{
  "openapi": "3.0.0",
  "info": {
    "title": "Microsoft.Authorization",
    "version": "2022-04-01"
  },
  "components": {},
  "paths": {
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Authorization/permissions": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "operationId": "Permissions_ListForResourceGroup",
        "description": "Gets all permissions the caller has for a resource group.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of permissions.",
            "schema": {
              "$ref": "#/definitions/PermissionGetResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "List permissions for resource group": {
            "$ref": "./examples/GetPermissions.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/permissions": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "operationId": "Permissions_ListForResource",
        "description": "Gets all permissions the caller has for a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ResourceProviderNamespaceParameter"
          },
          {
            "name": "parentResourcePath",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The parent resource identity.",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "resourceType",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The resource type of the resource.",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "resourceName",
            "in": "path",
            "required": true,
            "pattern": ".+",
            "type": "string",
            "description": "The name of the resource to get the permissions for."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of permissions.",
            "schema": {
              "$ref": "#/definitions/PermissionGetResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "List permissions for resource": {
            "$ref": "./examples/GetResourcePermissions.json"
          }
        }
      }
    },
    "/{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}": {
      "delete": {
        "tags": [
          "RoleDefinitions"
        ],
        "operationId": "RoleDefinitions_Delete",
        "description": "Deletes a role definition.",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The scope of the role definition.",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "roleDefinitionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the role definition to delete."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns information about the role definition.",
            "schema": {
              "$ref": "#/definitions/RoleDefinition"
            }
          },
          "204": {
            "description": "Role definition already deleted or does not exist."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Delete role definition": {
            "$ref": "./examples/DeleteRoleDefinition.json"
          }
        }
      },
      "get": {
        "tags": [
          "RoleDefinitions"
        ],
        "operationId": "RoleDefinitions_Get",
        "description": "Get role definition by name (GUID).",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The scope of the role definition.",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "roleDefinitionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the role definition."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns information about the role definition.",
            "schema": {
              "$ref": "#/definitions/RoleDefinition"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get role definition by name": {
            "$ref": "./examples/GetRoleDefinitionByName.json"
          }
        }
      },
      "put": {
        "tags": [
          "RoleDefinitions"
        ],
        "operationId": "RoleDefinitions_CreateOrUpdate",
        "description": "Creates or updates a role definition.",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The scope of the role definition.",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "roleDefinitionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the role definition."
          },
          {
            "name": "roleDefinition",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleDefinition"
            },
            "description": "The values for the role definition."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "OK - Returns information about the role definition.",
            "schema": {
              "$ref": "#/definitions/RoleDefinition"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Create role definition": {
            "$ref": "./examples/PutRoleDefinition.json"
          }
        }
      }
    },
    "/{scope}/providers/Microsoft.Authorization/roleDefinitions": {
      "get": {
        "tags": [
          "RoleDefinitions"
        ],
        "operationId": "RoleDefinitions_List",
        "description": "Get all role definitions that are applicable at scope and above.",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The scope of the role definition.",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as well."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of role definitions.",
            "schema": {
              "$ref": "#/definitions/RoleDefinitionListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/RoleDefinitionFilter",
        "x-ms-examples": {
          "List role definitions for scope": {
            "$ref": "./examples/GetRoleDefinitionAtScope.json"
          }
        }
      }
    },
    "/providers/Microsoft.Authorization/providerOperations/{resourceProviderNamespace}": {
      "get": {
        "tags": [
          "ProviderOperationsMetadata"
        ],
        "operationId": "ProviderOperationsMetadata_Get",
        "description": "Gets provider operations metadata for the specified resource provider.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceProviderNamespaceParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "name": "$expand",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "resourceTypes",
            "description": "Specifies whether to expand the values."
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns the operations metadata.",
            "schema": {
              "$ref": "#/definitions/ProviderOperationsMetadata"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "List provider operations metadata for resource provider": {
            "$ref": "./examples/GetProviderOperationsRP.json"
          }
        }
      }
    },
    "/providers/Microsoft.Authorization/providerOperations": {
      "get": {
        "tags": [
          "ProviderOperationsMetadata"
        ],
        "operationId": "ProviderOperationsMetadata_List",
        "description": "Gets provider operations metadata for all resource providers.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "name": "$expand",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "resourceTypes",
            "description": "Specifies whether to expand the values."
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of the operations metadata.",
            "schema": {
              "$ref": "#/definitions/ProviderOperationsMetadataListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "List provider operations metadata for all resource providers": {
            "$ref": "./examples/GetAllProviderOperations.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/roleAssignments": {
      "get": {
        "tags": [
          "RoleAssignments"
        ],
        "operationId": "RoleAssignments_ListForSubscription",
        "description": "List all role assignments that apply to a subscription.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/RoleAssignmentFilterParameter"
          },
          {
            "$ref": "#/parameters/TenantIdQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of role assignments.",
            "schema": {
              "$ref": "#/definitions/RoleAssignmentListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-odata": "#/definitions/RoleAssignmentFilter",
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "List role assignments for subscription": {
            "$ref": "./examples/RoleAssignments_ListForSubscription.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/roleAssignments": {
      "get": {
        "tags": [
          "RoleAssignments"
        ],
        "operationId": "RoleAssignments_ListForResourceGroup",
        "description": "List all role assignments that apply to a resource group.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/RoleAssignmentFilterParameter"
          },
          {
            "$ref": "#/parameters/TenantIdQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of role assignments.",
            "schema": {
              "$ref": "#/definitions/RoleAssignmentListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-odata": "#/definitions/RoleAssignmentFilter",
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "List role assignments for resource group": {
            "$ref": "./examples/RoleAssignments_ListForResourceGroup.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/roleAssignments": {
      "get": {
        "tags": [
          "RoleAssignments"
        ],
        "operationId": "RoleAssignments_ListForResource",
        "description": "List all role assignments that apply to a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ResourceProviderNamespaceParameter"
          },
          {
            "$ref": "#/parameters/ResourceTypeParameter"
          },
          {
            "$ref": "#/parameters/ResourceNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/RoleAssignmentFilterParameter"
          },
          {
            "$ref": "#/parameters/TenantIdQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of role assignments.",
            "schema": {
              "$ref": "#/definitions/RoleAssignmentListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-odata": "#/definitions/RoleAssignmentFilter",
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "List role assignments for a resource": {
            "$ref": "./examples/RoleAssignments_ListForResource.json"
          }
        }
      }
    },
    "/{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}": {
      "get": {
        "tags": [
          "RoleAssignments"
        ],
        "operationId": "RoleAssignments_Get",
        "description": "Get a role assignment by scope and name.",
        "parameters": [
          {
            "$ref": "#/parameters/ScopeParameter"
          },
          {
            "$ref": "#/parameters/RoleAssignmentNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/TenantIdQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the role assignment.",
            "schema": {
              "$ref": "#/definitions/RoleAssignment"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get role assignment by scope and name": {
            "$ref": "./examples/RoleAssignments_Get.json"
          }
        }
      },
      "put": {
        "tags": [
          "RoleAssignments"
        ],
        "operationId": "RoleAssignments_Create",
        "description": "Create or update a role assignment by scope and name.",
        "parameters": [
          {
            "$ref": "#/parameters/ScopeParameter"
          },
          {
            "$ref": "#/parameters/RoleAssignmentNameParameter"
          },
          {
            "$ref": "#/parameters/RoleAssignmentCreateParameters"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the role assignment.",
            "schema": {
              "$ref": "#/definitions/RoleAssignment"
            }
          },
          "200": {
            "description": "Returns the role assignment.",
            "schema": {
              "$ref": "#/definitions/RoleAssignment"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Create role assignment for subscription": {
            "$ref": "./examples/RoleAssignments_CreateForSubscription.json"
          },
          "Create role assignment for resource group": {
            "$ref": "./examples/RoleAssignments_CreateForResourceGroup.json"
          },
          "Create role assignment for resource": {
            "$ref": "./examples/RoleAssignments_CreateForResource.json"
          }
        }
      },
      "delete": {
        "tags": [
          "RoleAssignments"
        ],
        "operationId": "RoleAssignments_Delete",
        "description": "Delete a role assignment by scope and name.",
        "parameters": [
          {
            "$ref": "#/parameters/ScopeParameter"
          },
          {
            "$ref": "#/parameters/RoleAssignmentNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/TenantIdQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deleted role assignment.",
            "schema": {
              "$ref": "#/definitions/RoleAssignment"
            }
          },
          "204": {
            "description": "Role assignment was already deleted or does not exist."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Delete role assignment": {
            "$ref": "./examples/RoleAssignments_Delete.json"
          }
        }
      }
    },
    "/{scope}/providers/Microsoft.Authorization/roleAssignments": {
      "get": {
        "tags": [
          "RoleAssignments"
        ],
        "operationId": "RoleAssignments_ListForScope",
        "description": "List all role assignments that apply to a scope.",
        "parameters": [
          {
            "$ref": "#/parameters/ScopeParameter"
          },
          {
            "$ref": "#/parameters/RoleAssignmentFilterParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/TenantIdQueryParameter"
          },
          {
            "$ref": "#/parameters/PaginationSkipToken"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of role assignments.",
            "schema": {
              "$ref": "#/definitions/RoleAssignmentListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/RoleAssignmentFilter",
        "x-ms-examples": {
          "List role assignments for scope": {
            "$ref": "./examples/RoleAssignments_ListForScope.json"
          }
        }
      }
    },
    "/{roleAssignmentId}": {
      "get": {
        "tags": [
          "RoleAssignments"
        ],
        "operationId": "RoleAssignments_GetById",
        "description": "Get a role assignment by ID.",
        "parameters": [
          {
            "$ref": "#/parameters/RoleAssignmentIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/TenantIdQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the role assignment.",
            "schema": {
              "$ref": "#/definitions/RoleAssignment"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get role assignment by ID": {
            "$ref": "./examples/RoleAssignments_GetById.json"
          }
        }
      },
      "put": {
        "tags": [
          "RoleAssignments"
        ],
        "operationId": "RoleAssignments_CreateById",
        "description": "Create or update a role assignment by ID.",
        "parameters": [
          {
            "$ref": "#/parameters/RoleAssignmentIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/RoleAssignmentCreateParameters"
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the role assignment.",
            "schema": {
              "$ref": "#/definitions/RoleAssignment"
            }
          },
          "200": {
            "description": "Returns the role assignment.",
            "schema": {
              "$ref": "#/definitions/RoleAssignment"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Create or update role assignment by ID": {
            "$ref": "./examples/RoleAssignments_CreateById.json"
          }
        }
      },
      "delete": {
        "tags": [
          "RoleAssignments"
        ],
        "operationId": "RoleAssignments_DeleteById",
        "description": "Delete a role assignment by ID.",
        "parameters": [
          {
            "$ref": "#/parameters/RoleAssignmentIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/TenantIdQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deleted role assignment.",
            "schema": {
              "$ref": "#/definitions/RoleAssignment"
            }
          },
          "204": {
            "description": "Role assignment already deleted or does not exist."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Delete role assignment by ID": {
            "$ref": "./examples/RoleAssignments_DeleteById.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/denyAssignments": {
      "get": {
        "tags": [
          "DenyAssignments"
        ],
        "operationId": "DenyAssignments_ListForResource",
        "description": "Gets deny assignments for a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ResourceProviderNamespaceParameter"
          },
          {
            "name": "parentResourcePath",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The parent resource identity.",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "resourceType",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The resource type of the resource.",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "resourceName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource to get deny assignments for."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/FilterParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of deny assignments.",
            "schema": {
              "$ref": "#/definitions/DenyAssignmentListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/DenyAssignmentFilter",
        "x-ms-examples": {
          "List deny assignments for resource": {
            "$ref": "./examples/GetDenyAssignmentsForResource.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/denyAssignments": {
      "get": {
        "tags": [
          "DenyAssignments"
        ],
        "operationId": "DenyAssignments_ListForResourceGroup",
        "description": "Gets deny assignments for a resource group.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/FilterParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of deny assignments.",
            "schema": {
              "$ref": "#/definitions/DenyAssignmentListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/DenyAssignmentFilter",
        "x-ms-examples": {
          "List deny assignments for resource group": {
            "$ref": "./examples/GetDenyAssignmentsForResourceGroup.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/denyAssignments": {
      "get": {
        "tags": [
          "DenyAssignments"
        ],
        "operationId": "DenyAssignments_List",
        "description": "Gets all deny assignments for the subscription.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/FilterParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of deny assignments.",
            "schema": {
              "$ref": "#/definitions/DenyAssignmentListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/DenyAssignmentFilter",
        "x-ms-examples": {
          "List deny assignments for subscription": {
            "$ref": "./examples/GetAllDenyAssignments.json"
          }
        }
      }
    },
    "/{scope}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId}": {
      "get": {
        "tags": [
          "DenyAssignments"
        ],
        "operationId": "DenyAssignments_Get",
        "description": "Get the specified deny assignment.",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The scope of the deny assignment.",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "denyAssignmentId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the deny assignment to get."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns information about the deny assignment.",
            "schema": {
              "$ref": "#/definitions/DenyAssignment"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get deny assignment by name": {
            "$ref": "./examples/GetDenyAssignmentByNameId.json"
          }
        }
      }
    },
    "/{denyAssignmentId}": {
      "get": {
        "tags": [
          "DenyAssignments"
        ],
        "operationId": "DenyAssignments_GetById",
        "description": "Gets a deny assignment by ID.",
        "parameters": [
          {
            "name": "denyAssignmentId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The fully qualified deny assignment ID. For example, use the format, /subscriptions/{guid}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for subscription level deny assignments, or /providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for tenant level deny assignments.",
            "x-ms-skip-url-encoding": true
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns the deny assignment.",
            "schema": {
              "$ref": "#/definitions/DenyAssignment"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get deny assignment by ID": {
            "$ref": "./examples/GetDenyAssignmentById.json"
          }
        }
      }
    },
    "/{scope}/providers/Microsoft.Authorization/denyAssignments": {
      "get": {
        "tags": [
          "DenyAssignments"
        ],
        "operationId": "DenyAssignments_ListForScope",
        "description": "Gets deny assignments for a scope.",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The scope of the deny assignments.",
            "x-ms-skip-url-encoding": true
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/FilterParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of deny assignments.",
            "schema": {
              "$ref": "#/definitions/DenyAssignmentListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/DenyAssignmentFilter",
        "x-ms-examples": {
          "List deny assignments for scope": {
            "$ref": "./examples/GetDenyAssignmentByScope.json"
          }
        }
      }
    }
  },
  "parameters": {
    "FilterParameter": {
      "name": "$filter",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "The filter to apply on the operation. Use $filter=atScope() to return all deny assignments at or above the scope. Use $filter=denyAssignmentName eq '{name}' to search deny assignments by name at specified scope. Use $filter=principalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. Use $filter=gdprExportPrincipalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned.",
      "x-ms-parameter-location": "method"
    },
    "ResourceProviderNamespaceParameter": {
      "name": "resourceProviderNamespace",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The namespace of the resource provider.",
      "x-ms-skip-url-encoding": true,
      "x-ms-parameter-location": "method"
    },
    "RoleAssignmentFilterParameter": {
      "name": "$filter",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal.",
      "x-ms-skip-url-encoding": true,
      "x-ms-parameter-location": "method"
    },
    "RoleAssignmentNameParameter": {
      "name": "roleAssignmentName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of the role assignment. It can be any valid GUID.",
      "x-ms-skip-url-encoding": true,
      "x-ms-parameter-location": "method"
    },
    "RoleAssignmentIdParameter": {
      "name": "roleAssignmentId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The fully qualified ID of the role assignment including scope, resource name, and resource type. Format: /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example: /subscriptions/<SUB_ID>/resourcegroups/<RESOURCE_GROUP>/providers/Microsoft.Authorization/roleAssignments/<ROLE_ASSIGNMENT_NAME>",
      "x-ms-skip-url-encoding": true,
      "x-ms-parameter-location": "method"
    },
    "RoleAssignmentCreateParameters": {
      "name": "parameters",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/RoleAssignmentCreateParameters"
      },
      "description": "Parameters for the role assignment.",
      "x-ms-parameter-location": "method"
    },
    "TenantIdQueryParameter": {
      "name": "tenantId",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "Tenant ID for cross-tenant request",
      "x-ms-parameter-location": "method"
    },
    "PaginationSkipToken": {
      "name": "$skipToken",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "The skipToken to apply on the operation. Use $skipToken={skiptoken} to return paged role assignments following the skipToken passed. Only supported on provider level calls.",
      "x-ms-skip-url-encoding": true,
      "x-ms-parameter-location": "method"
    },
    "ResourceTypeParameter": {
      "name": "resourceType",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The resource type name. For example the type name of a web app is 'sites' (from Microsoft.Web/sites).",
      "x-ms-skip-url-encoding": true,
      "x-ms-parameter-location": "method"
    },
    "ResourceNameParameter": {
      "name": "resourceName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The resource name.",
      "x-ms-skip-url-encoding": true,
      "x-ms-parameter-location": "method"
    },
    "ScopeParameter": {
      "name": "scope",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The scope of the operation or resource. Valid scopes are: subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'",
      "x-ms-skip-url-encoding": true,
      "x-ms-parameter-location": "method"
    },
    "SubscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The ID of the target subscription.",
      "minLength": 1
    },
    "ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "The API version to use for this operation.",
      "minLength": 1
    },
    "ResourceGroupNameParameter": {
      "name": "resourceGroupName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of the resource group. The name is case insensitive.",
      "minLength": 1,
      "maxLength": 90,
      "x-ms-parameter-location": "method"
    },
    "OperationIdParameter": {
      "name": "operationId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The ID of an ongoing async operation.",
      "minLength": 1,
      "x-ms-parameter-location": "method"
    },
    "LocationParameter": {
      "name": "location",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of Azure region.",
      "minLength": 1,
      "x-ms-parameter-location": "method"
    }
  },
  "definitions": {
    "RoleDefinitionFilter": {
      "properties": {
        "roleName": {
          "type": "string",
          "description": "Returns role definition with the specific name."
        },
        "type": {
          "type": "string",
          "description": "Returns role definition with the specific type."
        }
      },
      "type": "object",
      "description": "Role Definitions filter"
    },
    "RoleDefinitionProperties": {
      "properties": {
        "roleName": {
          "type": "string",
          "description": "The role name."
        },
        "description": {
          "type": "string",
          "description": "The role definition description."
        },
        "type": {
          "type": "string",
          "description": "The role type.",
          "x-ms-client-name": "roleType"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Permission"
          },
          "x-ms-identifiers": [],
          "description": "Role definition permissions."
        },
        "assignableScopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Role definition assignable scopes."
        },
        "createdOn": {
          "readOnly": true,
          "type": "string",
          "description": "Time it was created",
          "format": "date-time"
        },
        "updatedOn": {
          "readOnly": true,
          "type": "string",
          "description": "Time it was updated",
          "format": "date-time"
        },
        "createdBy": {
          "readOnly": true,
          "type": "string",
          "description": "Id of the user who created the assignment"
        },
        "updatedBy": {
          "readOnly": true,
          "type": "string",
          "description": "Id of the user who updated the assignment"
        }
      },
      "type": "object",
      "description": "Role definition properties."
    },
    "RoleDefinition": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true,
          "description": "The role definition ID."
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "The role definition name."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "The role definition type."
        },
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/RoleDefinitionProperties",
          "description": "Role definition properties."
        }
      },
      "type": "object",
      "description": "Role definition."
    },
    "RoleDefinitionListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleDefinition"
          },
          "description": "Role definition list."
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to use for getting the next set of results."
        }
      },
      "type": "object",
      "description": "Role definition list operation result."
    },
    "PermissionGetResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Permission"
          },
          "x-ms-identifiers": [],
          "description": "An array of permissions."
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to use for getting the next set of results."
        }
      },
      "type": "object",
      "description": "Permissions information."
    },
    "Permission": {
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Allowed actions."
        },
        "notActions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Denied actions."
        },
        "dataActions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Allowed Data actions."
        },
        "notDataActions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Denied Data actions."
        }
      },
      "type": "object",
      "description": "Role definition permissions."
    },
    "ResourceType": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The resource type name."
        },
        "displayName": {
          "type": "string",
          "description": "The resource type display name."
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProviderOperation"
          },
          "x-ms-identifiers": [],
          "description": "The resource type operations."
        }
      },
      "type": "object",
      "description": "Resource Type"
    },
    "ProviderOperation": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The operation name."
        },
        "displayName": {
          "type": "string",
          "description": "The operation display name."
        },
        "description": {
          "type": "string",
          "description": "The operation description."
        },
        "origin": {
          "type": "string",
          "description": "The operation origin."
        },
        "properties": {
          "type": "object",
          "x-ms-client-flatten": true,
          "description": "The operation properties."
        },
        "isDataAction": {
          "type": "boolean",
          "description": "The dataAction flag to specify the operation type."
        }
      },
      "type": "object",
      "description": "Operation"
    },
    "ProviderOperationsMetadata": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The provider id."
        },
        "name": {
          "type": "string",
          "description": "The provider name."
        },
        "type": {
          "type": "string",
          "description": "The provider type."
        },
        "displayName": {
          "type": "string",
          "description": "The provider display name."
        },
        "resourceTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceType"
          },
          "x-ms-identifiers": [
            "name"
          ],
          "description": "The provider resource types"
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProviderOperation"
          },
          "x-ms-identifiers": [],
          "description": "The provider operations."
        }
      },
      "type": "object",
      "description": "Provider Operations metadata"
    },
    "ProviderOperationsMetadataListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProviderOperationsMetadata"
          },
          "description": "The list of providers."
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to use for getting the next set of results."
        }
      },
      "type": "object",
      "description": "Provider operations metadata list"
    },
    "ValidationResponseErrorInfo": {
      "type": "object",
      "description": "Failed validation result details",
      "properties": {
        "code": {
          "readOnly": true,
          "type": "string",
          "description": "Error code indicating why validation failed"
        },
        "message": {
          "readOnly": true,
          "type": "string",
          "description": "Message indicating why validation failed"
        }
      }
    },
    "ValidationResponse": {
      "type": "object",
      "description": "Validation response",
      "properties": {
        "isValid": {
          "readOnly": true,
          "type": "boolean",
          "description": "Whether or not validation succeeded"
        },
        "errorInfo": {
          "description": "Failed validation result details",
          "$ref": "#/definitions/ValidationResponseErrorInfo"
        }
      }
    },
    "RoleAssignmentFilter": {
      "properties": {
        "principalId": {
          "type": "string",
          "description": "Returns role assignment of the specific principal."
        }
      },
      "type": "object",
      "description": "Role Assignments filter"
    },
    "RoleAssignmentListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleAssignment"
          },
          "description": "Role assignment list."
        },
        "nextLink": {
          "readOnly": true,
          "type": "string",
          "description": "The skipToken to use for getting the next set of results."
        }
      },
      "type": "object",
      "description": "Role assignment list operation result."
    },
    "RoleAssignmentProperties": {
      "properties": {
        "scope": {
          "readOnly": true,
          "type": "string",
          "description": "The role assignment scope."
        },
        "roleDefinitionId": {
          "type": "string",
          "description": "The role definition ID."
        },
        "principalId": {
          "type": "string",
          "description": "The principal ID."
        },
        "principalType": {
          "type": "string",
          "description": "The principal type of the assigned principal ID.",
          "enum": [
            "User",
            "Group",
            "ServicePrincipal",
            "ForeignGroup",
            "Device"
          ],
          "default": "User",
          "x-ms-enum": {
            "name": "PrincipalType",
            "modelAsString": true
          }
        },
        "description": {
          "type": "string",
          "description": "Description of role assignment"
        },
        "condition": {
          "type": "string",
          "description": "The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'"
        },
        "conditionVersion": {
          "type": "string",
          "description": "Version of the condition. Currently the only accepted value is '2.0'"
        },
        "createdOn": {
          "readOnly": true,
          "type": "string",
          "description": "Time it was created",
          "format": "date-time"
        },
        "updatedOn": {
          "readOnly": true,
          "type": "string",
          "description": "Time it was updated",
          "format": "date-time"
        },
        "createdBy": {
          "readOnly": true,
          "type": "string",
          "description": "Id of the user who created the assignment"
        },
        "updatedBy": {
          "readOnly": true,
          "type": "string",
          "description": "Id of the user who updated the assignment"
        },
        "delegatedManagedIdentityResourceId": {
          "type": "string",
          "description": "Id of the delegated managed identity resource"
        }
      },
      "required": [
        "roleDefinitionId",
        "principalId"
      ],
      "type": "object",
      "description": "Role assignment properties."
    },
    "RoleAssignment": {
      "x-ms-azure-resource": true,
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true,
          "description": "The role assignment ID."
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "The role assignment name."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "The role assignment type."
        },
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/RoleAssignmentProperties",
          "description": "Role assignment properties."
        }
      },
      "type": "object",
      "description": "Role Assignments"
    },
    "RoleAssignmentCreateParameters": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/RoleAssignmentProperties",
          "description": "Role assignment properties."
        }
      },
      "required": [
        "properties"
      ],
      "type": "object",
      "description": "Role assignment create parameters."
    },
    "Principal": {
      "readOnly": true,
      "type": "object",
      "description": "The name of the entity last modified it",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the principal made changes"
        },
        "displayName": {
          "type": "string",
          "description": "The name of the principal made changes"
        },
        "type": {
          "type": "string",
          "description": "Type of principal such as user , group etc"
        },
        "email": {
          "type": "string",
          "description": "Email of principal"
        }
      }
    },
    "RoleManagementPolicyRule": {
      "description": "The role management policy rule.",
      "type": "object",
      "required": [
        "ruleType"
      ],
      "discriminator": "ruleType",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the rule."
        },
        "ruleType": {
          "description": "The type of rule",
          "$ref": "#/definitions/RoleManagementPolicyRuleType"
        },
        "target": {
          "$ref": "#/definitions/RoleManagementPolicyRuleTarget",
          "description": "The target of the current rule."
        }
      }
    },
    "RoleManagementPolicyApprovalRule": {
      "description": "The role management policy approval rule.",
      "allOf": [
        {
          "$ref": "#/definitions/RoleManagementPolicyRule"
        }
      ],
      "type": "object",
      "properties": {
        "setting": {
          "$ref": "#/definitions/ApprovalSettings",
          "description": "The approval setting"
        }
      }
    },
    "ApprovalSettings": {
      "description": "The approval settings.",
      "type": "object",
      "properties": {
        "isApprovalRequired": {
          "type": "boolean",
          "description": "Determines whether approval is required or not."
        },
        "isApprovalRequiredForExtension": {
          "type": "boolean",
          "description": "Determines whether approval is required for assignment extension."
        },
        "isRequestorJustificationRequired": {
          "type": "boolean",
          "description": "Determine whether requestor justification is required."
        },
        "approvalMode": {
          "type": "string",
          "description": "The type of rule",
          "enum": [
            "SingleStage",
            "Serial",
            "Parallel",
            "NoApproval"
          ],
          "x-ms-enum": {
            "name": "ApprovalMode",
            "modelAsString": true
          }
        },
        "approvalStages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApprovalStage"
          },
          "x-ms-identifiers": [],
          "description": "The approval stages of the request."
        }
      }
    },
    "ApprovalStage": {
      "description": "The approval stage.",
      "type": "object",
      "properties": {
        "approvalStageTimeOutInDays": {
          "type": "integer",
          "format": "int32",
          "description": "The time in days when approval request would be timed out"
        },
        "isApproverJustificationRequired": {
          "type": "boolean",
          "description": "Determines whether approver need to provide justification for his decision."
        },
        "escalationTimeInMinutes": {
          "type": "integer",
          "format": "int32",
          "description": "The time in minutes when the approval request would be escalated if the primary approver does not approve"
        },
        "primaryApprovers": {
          "type": "array",
          "description": "The primary approver of the request.",
          "items": {
            "$ref": "#/definitions/UserSet"
          }
        },
        "isEscalationEnabled": {
          "type": "boolean",
          "description": "The value determine whether escalation feature is enabled."
        },
        "escalationApprovers": {
          "type": "array",
          "description": "The escalation approver of the request.",
          "items": {
            "$ref": "#/definitions/UserSet"
          }
        }
      }
    },
    "UserSet": {
      "description": "The detail of a user.",
      "type": "object",
      "properties": {
        "userType": {
          "type": "string",
          "description": "The type of user.",
          "enum": [
            "User",
            "Group"
          ],
          "x-ms-enum": {
            "name": "UserType",
            "modelAsString": true
          }
        },
        "isBackup": {
          "type": "boolean",
          "description": "The value indicating whether the user is a backup fallback approver"
        },
        "id": {
          "type": "string",
          "description": "The object id of the user."
        },
        "description": {
          "type": "string",
          "description": "The description of the user."
        }
      }
    },
    "RoleManagementPolicyAuthenticationContextRule": {
      "description": "The role management policy authentication context rule.",
      "allOf": [
        {
          "$ref": "#/definitions/RoleManagementPolicyRule"
        }
      ],
      "type": "object",
      "properties": {
        "isEnabled": {
          "type": "boolean",
          "description": "The value indicating if rule is enabled."
        },
        "claimValue": {
          "type": "string",
          "description": "The claim value."
        }
      }
    },
    "RoleManagementPolicyEnablementRule": {
      "description": "The role management policy enablement rule.",
      "allOf": [
        {
          "$ref": "#/definitions/RoleManagementPolicyRule"
        }
      ],
      "type": "object",
      "properties": {
        "enabledRules": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "The type of enablement rule",
            "enum": [
              "MultiFactorAuthentication",
              "Justification",
              "Ticketing"
            ],
            "x-ms-enum": {
              "name": "EnablementRules",
              "modelAsString": true
            }
          },
          "description": "The list of enabled rules."
        }
      }
    },
    "RoleManagementPolicyExpirationRule": {
      "description": "The role management policy expiration rule.",
      "allOf": [
        {
          "$ref": "#/definitions/RoleManagementPolicyRule"
        }
      ],
      "type": "object",
      "properties": {
        "isExpirationRequired": {
          "type": "boolean",
          "description": "The value indicating whether expiration is required."
        },
        "maximumDuration": {
          "type": "string",
          "description": "The maximum duration of expiration in timespan."
        }
      }
    },
    "RoleManagementPolicyNotificationRule": {
      "description": "The role management policy notification rule.",
      "allOf": [
        {
          "$ref": "#/definitions/RoleManagementPolicyRule"
        }
      ],
      "type": "object",
      "properties": {
        "notificationType": {
          "type": "string",
          "description": "The type of notification.",
          "enum": [
            "Email"
          ],
          "x-ms-enum": {
            "name": "NotificationDeliveryMechanism",
            "modelAsString": true
          }
        },
        "notificationLevel": {
          "type": "string",
          "description": "The notification level.",
          "enum": [
            "None",
            "Critical",
            "All"
          ],
          "x-ms-enum": {
            "name": "NotificationLevel",
            "modelAsString": true
          }
        },
        "recipientType": {
          "type": "string",
          "description": "The recipient type.",
          "enum": [
            "Requestor",
            "Approver",
            "Admin"
          ],
          "x-ms-enum": {
            "name": "RecipientType",
            "modelAsString": true
          }
        },
        "notificationRecipients": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of notification recipients."
        },
        "isDefaultRecipientsEnabled": {
          "type": "boolean",
          "description": "Determines if the notification will be sent to the recipient type specified in the policy rule."
        }
      }
    },
    "RoleManagementPolicyRuleTarget": {
      "description": "The role management policy rule target.",
      "type": "object",
      "properties": {
        "caller": {
          "type": "string",
          "description": "The caller of the setting."
        },
        "operations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The type of operation."
        },
        "level": {
          "type": "string",
          "description": "The assignment level to which rule is applied."
        },
        "targetObjects": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of target objects."
        },
        "inheritableSettings": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of inheritable settings."
        },
        "enforcedSettings": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of enforced settings."
        }
      }
    },
    "RoleManagementPolicyRuleType": {
      "type": "string",
      "description": "The type of rule",
      "enum": [
        "RoleManagementPolicyApprovalRule",
        "RoleManagementPolicyAuthenticationContextRule",
        "RoleManagementPolicyEnablementRule",
        "RoleManagementPolicyExpirationRule",
        "RoleManagementPolicyNotificationRule"
      ],
      "x-ms-enum": {
        "name": "RoleManagementPolicyRuleType",
        "modelAsString": true
      }
    },
    "DenyAssignmentFilter": {
      "properties": {
        "denyAssignmentName": {
          "type": "string",
          "description": "Return deny assignment with specified name."
        },
        "principalId": {
          "type": "string",
          "description": "Return all deny assignments where the specified principal is listed in the principals list of deny assignments."
        },
        "gdprExportPrincipalId": {
          "type": "string",
          "description": "Return all deny assignments where the specified principal is listed either in the principals list or exclude principals list of deny assignments."
        }
      },
      "type": "object",
      "description": "Deny Assignments filter"
    },
    "DenyAssignmentProperties": {
      "properties": {
        "denyAssignmentName": {
          "type": "string",
          "description": "The display name of the deny assignment."
        },
        "description": {
          "type": "string",
          "description": "The description of the deny assignment."
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DenyAssignmentPermission"
          },
          "x-ms-identifiers": [],
          "description": "An array of permissions that are denied by the deny assignment."
        },
        "scope": {
          "type": "string",
          "description": "The deny assignment scope."
        },
        "doNotApplyToChildScopes": {
          "type": "boolean",
          "description": "Determines if the deny assignment applies to child scopes. Default value is false."
        },
        "principals": {
          "type": "array",
          "items": {
            "$ref": "./common-types.json#/definitions/Principal"
          },
          "description": "Array of principals to which the deny assignment applies."
        },
        "excludePrincipals": {
          "type": "array",
          "items": {
            "$ref": "./common-types.json#/definitions/Principal"
          },
          "description": "Array of principals to which the deny assignment does not apply."
        },
        "isSystemProtected": {
          "type": "boolean",
          "description": "Specifies whether this deny assignment was created by Azure and cannot be edited or deleted."
        },
        "condition": {
          "type": "string",
          "description": "The conditions on the deny assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'"
        },
        "conditionVersion": {
          "type": "string",
          "description": "Version of the condition."
        },
        "createdOn": {
          "readOnly": true,
          "type": "string",
          "description": "Time it was created",
          "format": "date-time"
        },
        "updatedOn": {
          "readOnly": true,
          "type": "string",
          "description": "Time it was updated",
          "format": "date-time"
        },
        "createdBy": {
          "readOnly": true,
          "type": "string",
          "description": "Id of the user who created the assignment"
        },
        "updatedBy": {
          "readOnly": true,
          "type": "string",
          "description": "Id of the user who updated the assignment"
        }
      },
      "type": "object",
      "description": "Deny assignment properties."
    },
    "DenyAssignment": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true,
          "description": "The deny assignment ID."
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "The deny assignment name."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "The deny assignment type."
        },
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/DenyAssignmentProperties",
          "description": "Deny assignment properties."
        }
      },
      "type": "object",
      "description": "Deny Assignment"
    },
    "DenyAssignmentListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DenyAssignment"
          },
          "description": "Deny assignment list."
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to use for getting the next set of results."
        }
      },
      "type": "object",
      "description": "Deny assignment list operation result."
    },
    "DenyAssignmentPermission": {
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Actions to which the deny assignment does not grant access."
        },
        "notActions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Actions to exclude from that the deny assignment does not grant access."
        },
        "dataActions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Data actions to which the deny assignment does not grant access."
        },
        "notDataActions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Data actions to exclude from that the deny assignment does not grant access."
        },
        "condition": {
          "type": "string",
          "description": "The conditions on the Deny assignment permission. This limits the resources it applies to."
        },
        "conditionVersion": {
          "type": "string",
          "description": "Version of the condition."
        }
      },
      "type": "object",
      "description": "Deny assignment permissions."
    },
    "Resource": {
      "title": "Resource",
      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
      "type": "object",
      "properties": {
        "id": {
          "readOnly": true,
          "type": "string",
          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "The name of the resource"
        },
        "type": {
          "readOnly": true,
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\""
        }
      },
      "x-ms-azure-resource": true
    },
    "AzureEntityResource": {
      "x-ms-client-name": "AzureEntityResource",
      "title": "Entity Resource",
      "description": "The resource model definition for an Azure Resource Manager resource with an etag.",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "readOnly": true,
          "description": "Resource Etag."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "TrackedResource": {
      "title": "Tracked Resource",
      "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
      "type": "object",
      "properties": {
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ],
          "description": "Resource tags."
        },
        "location": {
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "description": "The geo-location where the resource lives"
        }
      },
      "required": [
        "location"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "ProxyResource": {
      "title": "Proxy Resource",
      "description": "The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "ResourceModelWithAllowedPropertySet": {
      "description": "The resource model definition containing the full set of allowed properties for a resource. Except properties bag, there cannot be a top level property outside of this set.",
      "type": "object",
      "properties": {
        "id": {
          "readOnly": true,
          "type": "string",
          "x-ms-mutability": [
            "read"
          ],
          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "The name of the resource"
        },
        "type": {
          "readOnly": true,
          "type": "string",
          "x-ms-mutability": [
            "read"
          ],
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\""
        },
        "location": {
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "description": "The geo-location where the resource lives"
        },
        "managedBy": {
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ],
          "description": "The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is removed from the template since it is managed by another resource."
        },
        "kind": {
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.",
          "pattern": "^[-\\w\\._,\\(\\)]+$"
        },
        "etag": {
          "readOnly": true,
          "type": "string",
          "description": "The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. "
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ],
          "description": "Resource tags."
        },
        "identity": {
          "allOf": [
            {
              "$ref": "#/definitions/Identity"
            }
          ]
        },
        "sku": {
          "allOf": [
            {
              "$ref": "#/definitions/Sku"
            }
          ]
        },
        "plan": {
          "allOf": [
            {
              "$ref": "#/definitions/Plan"
            }
          ]
        }
      },
      "x-ms-azure-resource": true
    },
    "Sku": {
      "description": "The resource model definition representing SKU",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the SKU. Ex - P3. It is typically a letter+number code"
        },
        "tier": {
          "type": "string",
          "enum": [
            "Free",
            "Basic",
            "Standard",
            "Premium"
          ],
          "x-ms-enum": {
            "name": "SkuTier",
            "modelAsString": false
          },
          "description": "This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT."
        },
        "size": {
          "type": "string",
          "description": "The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. "
        },
        "family": {
          "type": "string",
          "description": "If the service has different generations of hardware, for the same SKU, then that can be captured here."
        },
        "capacity": {
          "type": "integer",
          "format": "int32",
          "description": "If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted."
        }
      },
      "required": [
        "name"
      ]
    },
    "Identity": {
      "description": "Identity for the resource.",
      "type": "object",
      "properties": {
        "principalId": {
          "readOnly": true,
          "type": "string",
          "description": "The principal ID of resource identity."
        },
        "tenantId": {
          "readOnly": true,
          "type": "string",
          "description": "The tenant ID of resource."
        },
        "type": {
          "type": "string",
          "description": "The identity type.",
          "enum": [
            "SystemAssigned"
          ],
          "x-ms-enum": {
            "name": "ResourceIdentityType",
            "modelAsString": false
          }
        }
      }
    },
    "Plan": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A user defined name of the 3rd Party Artifact that is being procured."
        },
        "publisher": {
          "type": "string",
          "description": "The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic"
        },
        "product": {
          "type": "string",
          "description": "The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. "
        },
        "promotionCode": {
          "type": "string",
          "description": "A publisher provided promotion code as provisioned in Data Market for the said product/artifact."
        },
        "version": {
          "type": "string",
          "description": "The version of the desired product/artifact."
        }
      },
      "description": "Plan for the resource.",
      "required": [
        "name",
        "publisher",
        "product"
      ]
    },
    "ErrorDetail": {
      "description": "The error detail.",
      "type": "object",
      "properties": {
        "code": {
          "readOnly": true,
          "type": "string",
          "description": "The error code."
        },
        "message": {
          "readOnly": true,
          "type": "string",
          "description": "The error message."
        },
        "target": {
          "readOnly": true,
          "type": "string",
          "description": "The error target."
        },
        "details": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorDetail"
          },
          "x-ms-identifiers": [
            "message",
            "target"
          ],
          "description": "The error details."
        },
        "additionalInfo": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorAdditionalInfo"
          },
          "x-ms-identifiers": [],
          "description": "The error additional info."
        }
      }
    },
    "ErrorResponse": {
      "title": "Error response",
      "description": "Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).",
      "type": "object",
      "properties": {
        "error": {
          "description": "The error object.",
          "$ref": "#/definitions/ErrorDetail"
        }
      }
    },
    "ErrorAdditionalInfo": {
      "type": "object",
      "properties": {
        "type": {
          "readOnly": true,
          "type": "string",
          "description": "The additional info type."
        },
        "info": {
          "readOnly": true,
          "type": "object",
          "description": "The additional info."
        }
      },
      "description": "The resource management error additional info."
    },
    "Operation": {
      "title": "REST API Operation",
      "description": "Details of a REST API operation, returned from the Resource Provider Operations API",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the operation, as per Resource-Based Access Control (RBAC). Examples: \"Microsoft.Compute/virtualMachines/write\", \"Microsoft.Compute/virtualMachines/capture/action\"",
          "type": "string",
          "readOnly": true
        },
        "isDataAction": {
          "description": "Whether the operation applies to data-plane. This is \"true\" for data-plane operations and \"false\" for ARM/control-plane operations.",
          "type": "boolean",
          "readOnly": true
        },
        "display": {
          "description": "Localized display information for this particular operation.",
          "type": "object",
          "properties": {
            "provider": {
              "description": "The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring Insights\" or \"Microsoft Compute\".",
              "type": "string",
              "readOnly": true
            },
            "resource": {
              "description": "The localized friendly name of the resource type related to this operation. E.g. \"Virtual Machines\" or \"Job Schedule Collections\".",
              "type": "string",
              "readOnly": true
            },
            "operation": {
              "description": "The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create or Update Virtual Machine\", \"Restart Virtual Machine\".",
              "type": "string",
              "readOnly": true
            },
            "description": {
              "description": "The short, localized friendly description of the operation; suitable for tool tips and detailed views.",
              "type": "string",
              "readOnly": true
            }
          }
        },
        "origin": {
          "description": "The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is \"user,system\"",
          "type": "string",
          "readOnly": true,
          "enum": [
            "user",
            "system",
            "user,system"
          ],
          "x-ms-enum": {
            "name": "Origin",
            "modelAsString": true
          }
        },
        "actionType": {
          "description": "Enum. Indicates the action type. \"Internal\" refers to actions that are for internal only APIs.",
          "type": "string",
          "readOnly": true,
          "enum": [
            "Internal"
          ],
          "x-ms-enum": {
            "name": "ActionType",
            "modelAsString": true
          }
        }
      }
    },
    "OperationListResult": {
      "description": "A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results.",
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Operation"
          },
          "x-ms-identifiers": [
            "name"
          ],
          "description": "List of operations supported by the resource provider",
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "description": "URL to get the next set of operation list results (if there are any).",
          "readOnly": true
        }
      }
    },
    "OperationStatusResult": {
      "description": "The current status of an async operation.",
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "id": {
          "description": "Fully qualified ID for the async operation.",
          "type": "string"
        },
        "name": {
          "description": "Name of the async operation.",
          "type": "string"
        },
        "status": {
          "description": "Operation status.",
          "type": "string"
        },
        "percentComplete": {
          "description": "Percent of the operation that is complete.",
          "type": "number",
          "minimum": 0,
          "maximum": 100
        },
        "startTime": {
          "description": "The start time of the operation.",
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "description": "The end time of the operation.",
          "type": "string",
          "format": "date-time"
        },
        "operations": {
          "description": "The operations list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationStatusResult"
          }
        },
        "error": {
          "description": "If present, details of the operation error.",
          "$ref": "#/definitions/ErrorDetail"
        }
      }
    },
    "locationData": {
      "description": "Metadata pertaining to the geographic location of the resource.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 256,
          "description": "A canonical name for the geographic or physical location."
        },
        "city": {
          "type": "string",
          "description": "The city or locality where the resource is located."
        },
        "district": {
          "type": "string",
          "description": "The district, state, or province where the resource is located."
        },
        "countryOrRegion": {
          "type": "string",
          "description": "The country or region where the resource is located"
        }
      },
      "required": [
        "name"
      ]
    },
    "systemData": {
      "description": "Metadata pertaining to creation and last modification of the resource.",
      "type": "object",
      "readOnly": true,
      "properties": {
        "createdBy": {
          "type": "string",
          "description": "The identity that created the resource."
        },
        "createdByType": {
          "type": "string",
          "description": "The type of identity that created the resource.",
          "enum": [
            "User",
            "Application",
            "ManagedIdentity",
            "Key"
          ],
          "x-ms-enum": {
            "name": "createdByType",
            "modelAsString": true
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of resource creation (UTC)."
        },
        "lastModifiedBy": {
          "type": "string",
          "description": "The identity that last modified the resource."
        },
        "lastModifiedByType": {
          "type": "string",
          "description": "The type of identity that last modified the resource.",
          "enum": [
            "User",
            "Application",
            "ManagedIdentity",
            "Key"
          ],
          "x-ms-enum": {
            "name": "createdByType",
            "modelAsString": true
          }
        },
        "lastModifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of resource last modification (UTC)"
        }
      }
    },
    "encryptionProperties": {
      "description": "Configuration of key for data encryption",
      "type": "object",
      "properties": {
        "status": {
          "description": "Indicates whether or not the encryption is enabled for container registry.",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "EncryptionStatus",
            "modelAsString": true
          }
        },
        "keyVaultProperties": {
          "$ref": "#/definitions/KeyVaultProperties",
          "description": "Key vault properties."
        }
      }
    },
    "KeyVaultProperties": {
      "type": "object",
      "properties": {
        "keyIdentifier": {
          "description": "Key vault uri to access the encryption key.",
          "type": "string"
        },
        "identity": {
          "description": "The client ID of the identity which will be used to access key vault.",
          "type": "string"
        }
      }
    },
    "CheckNameAvailabilityRequest": {
      "description": "The check availability request body.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the resource for which availability needs to be checked.",
          "type": "string"
        },
        "type": {
          "description": "The resource type.",
          "type": "string"
        }
      }
    },
    "CheckNameAvailabilityResponse": {
      "description": "The check availability result.",
      "type": "object",
      "properties": {
        "nameAvailable": {
          "description": "Indicates if the resource name is available.",
          "type": "boolean"
        },
        "reason": {
          "description": "The reason why the given name is not available.",
          "type": "string",
          "enum": [
            "Invalid",
            "AlreadyExists"
          ],
          "x-ms-enum": {
            "name": "CheckNameAvailabilityReason",
            "modelAsString": true
          }
        },
        "message": {
          "description": "Detailed reason why the given name is available.",
          "type": "string"
        }
      }
    }
  }
}