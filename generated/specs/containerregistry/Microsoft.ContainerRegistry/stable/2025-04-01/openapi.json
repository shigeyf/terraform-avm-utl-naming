{
  "openapi": "3.0.0",
  "info": {
    "title": "Microsoft.ContainerRegistry",
    "version": "2025-04-01"
  },
  "components": {},
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/cacheRules": {
      "get": {
        "tags": [
          "CacheRules"
        ],
        "description": "Lists all cache rule resources for the specified container registry.",
        "operationId": "CacheRules_List",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/CacheRulesListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "CacheRuleList": {
            "$ref": "./examples/CacheRuleList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/cacheRules/{cacheRuleName}": {
      "get": {
        "tags": [
          "CacheRules"
        ],
        "description": "Gets the properties of the specified cache rule resource.",
        "operationId": "CacheRules_Get",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/CacheRuleNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/CacheRule"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed. If the resource does not exist, 404 (Not found) is returned.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "CacheRuleGet": {
            "$ref": "./examples/CacheRuleGet.json"
          }
        }
      },
      "put": {
        "tags": [
          "CacheRules"
        ],
        "description": "Creates a cache rule for a container registry with the specified parameters.",
        "operationId": "CacheRules_Create",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/CacheRuleNameParameter"
          },
          {
            "name": "cacheRuleCreateParameters",
            "in": "body",
            "description": "The parameters for creating a cache rule.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CacheRule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/CacheRule"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/CacheRule"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed. If any of the input parameters are invalid, 400 (Bad Request) is returned. If the request cannot be processed due to a conflict in the request, 409 (Conflict) is returned.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "CacheRuleCreate": {
            "$ref": "./examples/CacheRuleCreate.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      },
      "delete": {
        "tags": [
          "CacheRules"
        ],
        "description": "Deletes a cache rule resource from a container registry.",
        "operationId": "CacheRules_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/CacheRuleNameParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          },
          "204": {
            "description": "The cache rule does not exist in the subscription."
          },
          "default": {
            "description": "Error response describing why the operation failed. If the resource does not exist, 404 (Not found) is returned.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "CacheRuleDelete": {
            "$ref": "./examples/CacheRuleDelete.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        }
      },
      "patch": {
        "tags": [
          "CacheRules"
        ],
        "description": "Updates a cache rule for a container registry with the specified parameters.",
        "operationId": "CacheRules_Update",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/CacheRuleNameParameter"
          },
          {
            "name": "cacheRuleUpdateParameters",
            "in": "body",
            "description": "The parameters for updating a cache rule.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CacheRuleUpdateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/CacheRule"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/CacheRule"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed. If any of the input parameters are invalid, 400 (Bad Request) is returned. If the request cannot be processed due to a conflict in the request, 409 (Conflict) is returned.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "CacheRuleUpdate": {
            "$ref": "./examples/CacheRuleUpdate.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}": {
      "get": {
        "tags": [
          "ConnectedRegistries"
        ],
        "description": "Gets the properties of the connected registry.",
        "operationId": "ConnectedRegistries_Get",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ConnectedRegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/ConnectedRegistry"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed. If the resource does not exist, 404 (Not found) is returned.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ConnectedRegistryGet": {
            "$ref": "./examples/ConnectedRegistryGet.json"
          }
        }
      },
      "put": {
        "tags": [
          "ConnectedRegistries"
        ],
        "description": "Creates a connected registry for a container registry with the specified parameters.",
        "operationId": "ConnectedRegistries_Create",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ConnectedRegistryNameParameter"
          },
          {
            "in": "body",
            "name": "connectedRegistryCreateParameters",
            "description": "The parameters for creating a connectedRegistry.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConnectedRegistry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/ConnectedRegistry"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/ConnectedRegistry"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed. If any of the input parameters are invalid, 400 (Bad Request) is returned. If the request cannot be processed due to a conflict in the request, 409 (Conflict) is returned.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-examples": {
          "ConnectedRegistryCreate": {
            "$ref": "./examples/ConnectedRegistryCreate.json"
          }
        }
      },
      "patch": {
        "tags": [
          "ConnectedRegistries"
        ],
        "description": "Updates a connected registry with the specified parameters.",
        "operationId": "ConnectedRegistries_Update",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ConnectedRegistryNameParameter"
          },
          {
            "in": "body",
            "name": "connectedRegistryUpdateParameters",
            "description": "The parameters for updating a connectedRegistry.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConnectedRegistryUpdateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/ConnectedRegistry"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/ConnectedRegistry"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed. If any of the input parameters are invalid, 400 (Bad Request) is returned. If the request cannot be processed due to a conflict in the request, 409 (Conflict) is returned.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-examples": {
          "ConnectedRegistryUpdate": {
            "$ref": "./examples/ConnectedRegistryUpdate.json"
          }
        }
      },
      "delete": {
        "tags": [
          "ConnectedRegistries"
        ],
        "description": "Deletes a connected registry from a container registry.",
        "operationId": "ConnectedRegistries_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ConnectedRegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          },
          "204": {
            "description": "The webhook does not exist in the subscription."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "ConnectedRegistryDelete": {
            "$ref": "./examples/ConnectedRegistryDelete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries": {
      "get": {
        "tags": [
          "ConnectedRegistries"
        ],
        "description": "Lists all connected registries for the specified container registry.",
        "operationId": "ConnectedRegistries_List",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ConnectedRegistryFilterParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/ConnectedRegistryListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "ConnectedRegistryList": {
            "$ref": "./examples/ConnectedRegistryList.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}/deactivate": {
      "post": {
        "tags": [
          "ConnectedRegistries"
        ],
        "description": "Deactivates the connected registry instance.",
        "operationId": "ConnectedRegistries_Deactivate",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ConnectedRegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-examples": {
          "ConnectedRegistryDeactivate": {
            "$ref": "./examples/ConnectedRegistryDeactivate.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/credentialSets": {
      "get": {
        "tags": [
          "CredentialSets"
        ],
        "description": "Lists all credential set resources for the specified container registry.",
        "operationId": "CredentialSets_List",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/CredentialSetListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "CredentialSetList": {
            "$ref": "./examples/CredentialSetList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/credentialSets/{credentialSetName}": {
      "get": {
        "tags": [
          "CredentialSets"
        ],
        "description": "Gets the properties of the specified credential set resource.",
        "operationId": "CredentialSets_Get",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/CredentialSetNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/CredentialSet"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed. If the resource does not exist, 404 (Not found) is returned.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "CredentialSetGet": {
            "$ref": "./examples/CredentialSetGet.json"
          }
        }
      },
      "put": {
        "tags": [
          "CredentialSets"
        ],
        "description": "Creates a credential set for a container registry with the specified parameters.",
        "operationId": "CredentialSets_Create",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/CredentialSetNameParameter"
          },
          {
            "name": "credentialSetCreateParameters",
            "in": "body",
            "description": "The parameters for creating a credential set.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CredentialSet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/CredentialSet"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/CredentialSet"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed. If any of the input parameters are invalid, 400 (Bad Request) is returned. If the request cannot be processed due to a conflict in the request, 409 (Conflict) is returned.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "CredentialSetCreate": {
            "$ref": "./examples/CredentialSetCreate.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      },
      "delete": {
        "tags": [
          "CredentialSets"
        ],
        "description": "Deletes a credential set from a container registry.",
        "operationId": "CredentialSets_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/CredentialSetNameParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          },
          "204": {
            "description": "The credential store resource does not exist in the subscription."
          },
          "default": {
            "description": "Error response describing why the operation failed. If the resource does not exist, 404 (Not found) is returned.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "CredentialSetDelete": {
            "$ref": "./examples/CredentialSetDelete.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        }
      },
      "patch": {
        "tags": [
          "CredentialSets"
        ],
        "description": "Updates a credential set for a container registry with the specified parameters.",
        "operationId": "CredentialSets_Update",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/CredentialSetNameParameter"
          },
          {
            "name": "credentialSetUpdateParameters",
            "in": "body",
            "description": "The parameters for updating a credential set.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CredentialSetUpdateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/CredentialSet"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/CredentialSet"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed. If any of the input parameters are invalid, 400 (Bad Request) is returned. If the request cannot be processed due to a conflict in the request, 409 (Conflict) is returned.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "CredentialSetUpdate": {
            "$ref": "./examples/CredentialSetUpdate.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/importImage": {
      "post": {
        "tags": [
          "Registries"
        ],
        "description": "Copies an image to this container registry from the specified container registry.",
        "operationId": "Registries_ImportImage",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "The parameters specifying the image to copy and the source container registry.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImportImageParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the operation has completed successfully."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "ImportImageByTag": {
            "$ref": "./examples/ImportImageByTag.json"
          },
          "ImportImageByManifestDigest": {
            "$ref": "./examples/ImportImageByManifestDigest.json"
          },
          "ImportImageFromPublicRegistry": {
            "$ref": "./examples/ImportImageFromPublicRegistry.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        }
      }
    },
    "/providers/Microsoft.ContainerRegistry/operations": {
      "get": {
        "tags": [
          "Operation"
        ],
        "description": "Lists all of the available Azure Container Registry REST API operations.",
        "operationId": "Operations_List",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/OperationListResult"
            }
          }
        },
        "x-ms-examples": {
          "OperationList": {
            "$ref": "./examples/OperationList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerRegistry/checkNameAvailability": {
      "post": {
        "tags": [
          "Operation"
        ],
        "description": "Checks whether the container registry name is available for use. The name must contain only alphanumeric characters, be globally unique, and between 5 and 50 characters in length.",
        "operationId": "Registries_CheckNameAvailability",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "registryNameCheckRequest",
            "in": "body",
            "description": "The object containing information for the availability request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegistryNameCheckRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/RegistryNameStatus"
            }
          }
        },
        "x-ms-examples": {
          "RegistryCheckNameAvailable": {
            "$ref": "./examples/RegistryCheckNameAvailable.json"
          },
          "RegistryCheckNameNotAvailable": {
            "$ref": "./examples/RegistryCheckNameNotAvailable.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateEndpointConnections": {
      "get": {
        "tags": [
          "PrivateEndpointConnections"
        ],
        "description": "List all private endpoint connections in a container registry.",
        "operationId": "PrivateEndpointConnections_List",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/PrivateEndpointConnectionListResult"
            }
          }
        },
        "x-ms-examples": {
          "PrivateEndpointConnectionList": {
            "$ref": "./examples/PrivateEndpointConnectionList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateEndpointConnections/{privateEndpointConnectionName}": {
      "get": {
        "tags": [
          "PrivateEndpointConnections"
        ],
        "description": "Get the specified private endpoint connection associated with the container registry.",
        "operationId": "PrivateEndpointConnections_Get",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/PrivateEndpointConnectionNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/PrivateEndpointConnection"
            }
          }
        },
        "x-ms-examples": {
          "PrivateEndpointConnectionGet": {
            "$ref": "./examples/PrivateEndpointConnectionGet.json"
          }
        }
      },
      "put": {
        "tags": [
          "PrivateEndpointConnections"
        ],
        "description": "Update the state of specified private endpoint connection associated with the container registry.",
        "operationId": "PrivateEndpointConnections_CreateOrUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/PrivateEndpointConnectionNameParameter"
          },
          {
            "name": "privateEndpointConnection",
            "in": "body",
            "description": "The parameters for creating a private endpoint connection.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PrivateEndpointConnection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/PrivateEndpointConnection"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/PrivateEndpointConnection"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "PrivateEndpointConnectionCreateOrUpdate": {
            "$ref": "./examples/PrivateEndpointConnectionCreateOrUpdate.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      },
      "delete": {
        "tags": [
          "PrivateEndpointConnections"
        ],
        "description": "Deletes the specified private endpoint connection associated with the container registry.",
        "operationId": "PrivateEndpointConnections_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/PrivateEndpointConnectionNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          },
          "204": {
            "description": "The private endpoint connection does not exist in the subscription."
          }
        },
        "x-ms-examples": {
          "PrivateEndpointConnectionDelete": {
            "$ref": "./examples/PrivateEndpointConnectionDelete.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerRegistry/registries": {
      "get": {
        "tags": [
          "Registries"
        ],
        "description": "Lists all the container registries under the specified subscription.",
        "operationId": "Registries_List",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/RegistryListResult"
            }
          }
        },
        "x-ms-examples": {
          "RegistryList": {
            "$ref": "./examples/RegistryList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries": {
      "get": {
        "tags": [
          "Registries"
        ],
        "description": "Lists all the container registries under the specified resource group.",
        "operationId": "Registries_ListByResourceGroup",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/RegistryListResult"
            }
          }
        },
        "x-ms-examples": {
          "RegistryListByResourceGroup": {
            "$ref": "./examples/RegistryListByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}": {
      "get": {
        "tags": [
          "Registries"
        ],
        "description": "Gets the properties of the specified container registry.",
        "operationId": "Registries_Get",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/Registry"
            }
          }
        },
        "x-ms-examples": {
          "RegistryGet": {
            "$ref": "./examples/RegistryGet.json"
          }
        }
      },
      "put": {
        "tags": [
          "Registries"
        ],
        "description": "Creates a container registry with the specified parameters.",
        "operationId": "Registries_Create",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "name": "registry",
            "in": "body",
            "description": "The parameters for creating a container registry.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Registry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/Registry"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/Registry"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "RegistryCreate": {
            "$ref": "./examples/RegistryCreate.json"
          },
          "RegistryCreateZoneRedundant": {
            "$ref": "./examples/RegistryCreateZoneRedundant.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      },
      "delete": {
        "tags": [
          "Registries"
        ],
        "description": "Deletes a container registry.",
        "operationId": "Registries_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          },
          "204": {
            "description": "The container registry does not exist in the subscription."
          }
        },
        "x-ms-examples": {
          "RegistryDelete": {
            "$ref": "./examples/RegistryDelete.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        }
      },
      "patch": {
        "tags": [
          "Registries"
        ],
        "description": "Updates a container registry with the specified parameters.",
        "operationId": "Registries_Update",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "name": "registryUpdateParameters",
            "in": "body",
            "description": "The parameters for updating a container registry.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegistryUpdateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/Registry"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/Registry"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "RegistryUpdate": {
            "$ref": "./examples/RegistryUpdate.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listUsages": {
      "get": {
        "tags": [
          "Registries"
        ],
        "description": "Gets the quota usages for the specified container registry.",
        "operationId": "Registries_ListUsages",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the registry usages retrieved and returned successfully.",
            "schema": {
              "$ref": "#/definitions/RegistryUsageListResult"
            }
          }
        },
        "x-ms-examples": {
          "RegistryListUsages": {
            "$ref": "./examples/RegistryListUsages.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateLinkResources": {
      "get": {
        "tags": [
          "Registries"
        ],
        "description": "Lists the private link resources for a container registry.",
        "operationId": "Registries_ListPrivateLinkResources",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the private link resources were retrieved and returned successfully.",
            "schema": {
              "$ref": "#/definitions/PrivateLinkResourceListResult"
            }
          }
        },
        "x-ms-examples": {
          "RegistryListPrivateLinkResources": {
            "$ref": "./examples/RegistryListPrivateLinkResources.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateLinkResources/{groupName}": {
      "get": {
        "tags": [
          "Registries"
        ],
        "description": "Gets a private link resource by a specified group name for a container registry.",
        "operationId": "Registries_GetPrivateLinkResource",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/GroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the private link resource was retrieved and returned successfully.",
            "schema": {
              "$ref": "#/definitions/PrivateLinkResource"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed. If the resource does not exist, 404 (Not found) is returned.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RegistryGetPrivateLinkResource": {
            "$ref": "./examples/RegistryGetPrivateLinkResource.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listCredentials": {
      "post": {
        "tags": [
          "Registries"
        ],
        "description": "Lists the login credentials for the specified container registry.",
        "operationId": "Registries_ListCredentials",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the list of credentials retrieved and returned successfully.",
            "schema": {
              "$ref": "#/definitions/RegistryListCredentialsResult"
            }
          }
        },
        "x-ms-examples": {
          "RegistryListCredentials": {
            "$ref": "./examples/RegistryListCredentials.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/regenerateCredential": {
      "post": {
        "tags": [
          "Registries"
        ],
        "description": "Regenerates one of the login credentials for the specified container registry.",
        "operationId": "Registries_RegenerateCredential",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "name": "regenerateCredentialParameters",
            "in": "body",
            "description": "Specifies name of the password which should be regenerated -- password or password2.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegenerateCredentialParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the specified credential regenerated successfully.",
            "schema": {
              "$ref": "#/definitions/RegistryListCredentialsResult"
            }
          }
        },
        "x-ms-examples": {
          "RegistryRegenerateCredential": {
            "$ref": "./examples/RegistryRegenerateCredential.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications": {
      "get": {
        "tags": [
          "Replications"
        ],
        "description": "Lists all the replications for the specified container registry.",
        "operationId": "Replications_List",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/ReplicationListResult"
            }
          }
        },
        "x-ms-examples": {
          "ReplicationList": {
            "$ref": "./examples/ReplicationList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}": {
      "get": {
        "tags": [
          "Replications"
        ],
        "description": "Gets the properties of the specified replication.",
        "operationId": "Replications_Get",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ReplicationNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/Replication"
            }
          }
        },
        "x-ms-examples": {
          "ReplicationGet": {
            "$ref": "./examples/ReplicationGet.json"
          }
        }
      },
      "put": {
        "tags": [
          "Replications"
        ],
        "description": "Creates a replication for a container registry with the specified parameters.",
        "operationId": "Replications_Create",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ReplicationNameParameter"
          },
          {
            "name": "replication",
            "in": "body",
            "description": "The parameters for creating a replication.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Replication"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/Replication"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/Replication"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "ReplicationCreate": {
            "$ref": "./examples/ReplicationCreate.json"
          },
          "ReplicationCreateZoneRedundant": {
            "$ref": "./examples/ReplicationCreateZoneRedundant.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      },
      "delete": {
        "tags": [
          "Replications"
        ],
        "description": "Deletes a replication from a container registry.",
        "operationId": "Replications_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ReplicationNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          },
          "204": {
            "description": "The replication does not exist in the subscription."
          }
        },
        "x-ms-examples": {
          "ReplicationDelete": {
            "$ref": "./examples/ReplicationDelete.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        }
      },
      "patch": {
        "tags": [
          "Replications"
        ],
        "description": "Updates a replication for a container registry with the specified parameters.",
        "operationId": "Replications_Update",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ReplicationNameParameter"
          },
          {
            "name": "replicationUpdateParameters",
            "in": "body",
            "description": "The parameters for updating a replication.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReplicationUpdateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/Replication"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/Replication"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "ReplicationUpdate": {
            "$ref": "./examples/ReplicationUpdate.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps": {
      "get": {
        "tags": [
          "ScopeMaps"
        ],
        "description": "Lists all the scope maps for the specified container registry.",
        "operationId": "ScopeMaps_List",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/ScopeMapListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ScopeMapList": {
            "$ref": "./examples/ScopeMapList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps/{scopeMapName}": {
      "get": {
        "tags": [
          "ScopeMaps"
        ],
        "description": "Gets the properties of the specified scope map.",
        "operationId": "ScopeMaps_Get",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ScopeMapNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/ScopeMap"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed. If the resource does not exist, 404 (Not found) is returned.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ScopeMapGet": {
            "$ref": "./examples/ScopeMapGet.json"
          }
        }
      },
      "put": {
        "tags": [
          "ScopeMaps"
        ],
        "description": "Creates a scope map for a container registry with the specified parameters.",
        "operationId": "ScopeMaps_Create",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ScopeMapNameParameter"
          },
          {
            "name": "scopeMapCreateParameters",
            "in": "body",
            "description": "The parameters for creating a scope map.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScopeMap"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/ScopeMap"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/ScopeMap"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed. If any of the input parameters are invalid, 400 (Bad Request) is returned. If the request cannot be processed due to a conflict in the request, 409 (Conflict) is returned.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ScopeMapCreate": {
            "$ref": "./examples/ScopeMapCreate.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      },
      "delete": {
        "tags": [
          "ScopeMaps"
        ],
        "description": "Deletes a scope map from a container registry.",
        "operationId": "ScopeMaps_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ScopeMapNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          },
          "204": {
            "description": "The scopemap does not exist in the subscription."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ScopeMapDelete": {
            "$ref": "./examples/ScopeMapDelete.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        }
      },
      "patch": {
        "tags": [
          "ScopeMaps"
        ],
        "description": "Updates a scope map with the specified parameters.",
        "operationId": "ScopeMaps_Update",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/ScopeMapNameParameter"
          },
          {
            "name": "scopeMapUpdateParameters",
            "in": "body",
            "description": "The parameters for updating a scope map.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScopeMapUpdateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/ScopeMap"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/ScopeMap"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed. If any of the input parameters are invalid, 400 (Bad Request) is returned. If the request cannot be processed due to a conflict in the request, 409 (Conflict) is returned.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ScopeMapUpdate": {
            "$ref": "./examples/ScopeMapUpdate.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tokens": {
      "get": {
        "tags": [
          "Tokens"
        ],
        "description": "Lists all the tokens for the specified container registry.",
        "operationId": "Tokens_List",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/TokenListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "TokenList": {
            "$ref": "./examples/TokenList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tokens/{tokenName}": {
      "get": {
        "tags": [
          "Tokens"
        ],
        "description": "Gets the properties of the specified token.",
        "operationId": "Tokens_Get",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/TokenNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed. If the resource does not exist, 404 (Not found) is returned.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "TokenGet": {
            "$ref": "./examples/TokenGet.json"
          }
        }
      },
      "put": {
        "tags": [
          "Tokens"
        ],
        "description": "Creates a token for a container registry with the specified parameters.",
        "operationId": "Tokens_Create",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/TokenNameParameter"
          },
          {
            "name": "tokenCreateParameters",
            "in": "body",
            "description": "The parameters for creating a token.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/Token"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed. If any of the input parameters are invalid, 400 (Bad Request) is returned. If the request cannot be processed due to a conflict in the request, 409 (Conflict) is returned.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "TokenCreate": {
            "$ref": "./examples/TokenCreate.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      },
      "delete": {
        "tags": [
          "Tokens"
        ],
        "description": "Deletes a token from a container registry.",
        "operationId": "Tokens_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/TokenNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          },
          "204": {
            "description": "The token does not exist in the subscription."
          },
          "default": {
            "description": "Error response describing why the operation failed. If the resource does not exist, 404 (Not found) is returned.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "TokenDelete": {
            "$ref": "./examples/TokenDelete.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        }
      },
      "patch": {
        "tags": [
          "Tokens"
        ],
        "description": "Updates a token with the specified parameters.",
        "operationId": "Tokens_Update",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/TokenNameParameter"
          },
          {
            "name": "tokenUpdateParameters",
            "in": "body",
            "description": "The parameters for updating a token.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TokenUpdateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/Token"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed. If any of the input parameters are invalid, 400 (Bad Request) is returned. If the request cannot be processed due to a conflict in the request, 409 (Conflict) is returned.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "TokenUpdate": {
            "$ref": "./examples/TokenUpdate.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/generateCredentials": {
      "post": {
        "tags": [
          "Registries"
        ],
        "description": "Generate keys for a token of a specified container registry.",
        "operationId": "Registries_GenerateCredentials",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "name": "generateCredentialsParameters",
            "in": "body",
            "description": "The parameters for generating credentials.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GenerateCredentialsParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/GenerateCredentialsResult"
            }
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response describing why the operation failed. If the resource does not exist, 404 (Not found) is returned.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "RegistryGenerateCredentials": {
            "$ref": "./examples/RegistryGenerateCredentials.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "description": "Lists all the webhooks for the specified container registry.",
        "operationId": "Webhooks_List",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/WebhookListResult"
            }
          }
        },
        "x-ms-examples": {
          "WebhookList": {
            "$ref": "./examples/WebhookList.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "description": "Gets the properties of the specified webhook.",
        "operationId": "Webhooks_Get",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/WebhookNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          }
        },
        "x-ms-examples": {
          "WebhookGet": {
            "$ref": "./examples/WebhookGet.json"
          }
        }
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "description": "Creates a webhook for a container registry with the specified parameters.",
        "operationId": "Webhooks_Create",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/WebhookNameParameter"
          },
          {
            "name": "webhookCreateParameters",
            "in": "body",
            "description": "The parameters for creating a webhook.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookCreateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/Webhook"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "WebhookCreate": {
            "$ref": "./examples/WebhookCreate.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "description": "Deletes a webhook from a container registry.",
        "operationId": "Webhooks_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/WebhookNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly."
          },
          "202": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          },
          "204": {
            "description": "The webhook does not exist in the subscription."
          }
        },
        "x-ms-examples": {
          "WebhookDelete": {
            "$ref": "./examples/WebhookDelete.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        }
      },
      "patch": {
        "tags": [
          "Webhooks"
        ],
        "description": "Updates a webhook with the specified parameters.",
        "operationId": "Webhooks_Update",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/WebhookNameParameter"
          },
          {
            "name": "webhookUpdateParameters",
            "in": "body",
            "description": "The parameters for updating a webhook.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookUpdateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "201": {
            "description": "The request was successful; the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/Webhook"
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-examples": {
          "WebhookUpdate": {
            "$ref": "./examples/WebhookUpdate.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/ping": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "description": "Triggers a ping event to be sent to the webhook.",
        "operationId": "Webhooks_Ping",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/WebhookNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/EventInfo"
            }
          }
        },
        "x-ms-examples": {
          "WebhookPing": {
            "$ref": "./examples/WebhookPing.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/listEvents": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "description": "Lists recent events for the specified webhook.",
        "operationId": "Webhooks_ListEvents",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/WebhookNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/EventListResult"
            }
          }
        },
        "x-ms-examples": {
          "WebhookListEvents": {
            "$ref": "./examples/WebhookListEvents.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/getCallbackConfig": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "description": "Gets the configuration of service URI and custom headers for the webhook.",
        "operationId": "Webhooks_GetCallbackConfig",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/RegistryNameParameter"
          },
          {
            "$ref": "#/parameters/WebhookNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful; the request was well-formed and received properly.",
            "schema": {
              "$ref": "#/definitions/CallbackConfig"
            }
          }
        },
        "x-ms-examples": {
          "WebhookGetCallbackConfig": {
            "$ref": "./examples/WebhookGetCallbackConfig.json"
          }
        }
      }
    }
  },
  "parameters": {
    "RegistryNameParameter": {
      "name": "registryName",
      "in": "path",
      "description": "The name of the container registry.",
      "required": true,
      "type": "string",
      "maxLength": 50,
      "minLength": 5,
      "pattern": "^[a-zA-Z0-9]*$",
      "x-ms-parameter-location": "method"
    },
    "WebhookNameParameter": {
      "name": "webhookName",
      "in": "path",
      "description": "The name of the webhook.",
      "required": true,
      "type": "string",
      "maxLength": 50,
      "minLength": 5,
      "pattern": "^[a-zA-Z0-9]*$",
      "x-ms-parameter-location": "method"
    },
    "ReplicationNameParameter": {
      "name": "replicationName",
      "in": "path",
      "description": "The name of the replication.",
      "required": true,
      "type": "string",
      "maxLength": 50,
      "minLength": 5,
      "pattern": "^[a-zA-Z0-9]*$",
      "x-ms-parameter-location": "method"
    },
    "ScopeMapNameParameter": {
      "name": "scopeMapName",
      "in": "path",
      "description": "The name of the scope map.",
      "required": true,
      "type": "string",
      "maxLength": 50,
      "minLength": 5,
      "pattern": "^[a-zA-Z0-9-_]*$",
      "x-ms-parameter-location": "method"
    },
    "TokenNameParameter": {
      "name": "tokenName",
      "in": "path",
      "description": "The name of the token.",
      "required": true,
      "type": "string",
      "maxLength": 50,
      "minLength": 5,
      "pattern": "^[a-zA-Z0-9-]*$",
      "x-ms-parameter-location": "method"
    },
    "PrivateEndpointConnectionNameParameter": {
      "name": "privateEndpointConnectionName",
      "in": "path",
      "description": "The name of the private endpoint connection.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "GroupNameParameter": {
      "name": "groupName",
      "in": "path",
      "description": "The name of the private link resource.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "ConnectedRegistryNameParameter": {
      "in": "path",
      "name": "connectedRegistryName",
      "description": "The name of the connected registry.",
      "required": true,
      "type": "string",
      "maxLength": 50,
      "minLength": 5,
      "pattern": "^[a-zA-Z0-9]*$",
      "x-ms-parameter-location": "method"
    },
    "ConnectedRegistryFilterParameter": {
      "in": "query",
      "name": "$filter",
      "description": "An OData filter expression that describes a subset of connectedRegistries to return. The parameters that can be filtered are parent.id (the resource id of the connectedRegistry parent), mode, and connectionState. The supported operator is eq.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "CredentialSetNameParameter": {
      "name": "credentialSetName",
      "in": "path",
      "description": "The name of the credential set.",
      "required": true,
      "type": "string",
      "maxLength": 50,
      "minLength": 5,
      "pattern": "^[a-zA-Z0-9-]*$",
      "x-ms-parameter-location": "method"
    },
    "CacheRuleNameParameter": {
      "name": "cacheRuleName",
      "in": "path",
      "description": "The name of the cache rule.",
      "required": true,
      "type": "string",
      "maxLength": 50,
      "minLength": 5,
      "pattern": "^[a-zA-Z0-9-]*$",
      "x-ms-parameter-location": "method"
    },
    "ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1
    },
    "If-Match": {
      "name": "ifMatch",
      "in": "header",
      "description": "The If-Match header that makes a request conditional.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "If-None-Match": {
      "name": "ifNoneMatch",
      "in": "header",
      "description": "The If-None-Match header that makes a request conditional.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "LocationParameter": {
      "name": "location",
      "in": "path",
      "description": "The name of the Azure region.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method"
    },
    "ManagementGroupNameParameter": {
      "name": "managementGroupName",
      "in": "path",
      "description": "The name of the management group. The name is case insensitive.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 90,
      "x-ms-parameter-location": "method"
    },
    "OperationIdParameter": {
      "name": "operationId",
      "in": "path",
      "description": "The ID of an ongoing async operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method"
    },
    "ResourceGroupNameParameter": {
      "name": "resourceGroupName",
      "in": "path",
      "description": "The name of the resource group. The name is case insensitive.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 90,
      "x-ms-parameter-location": "method"
    },
    "ScopeParameter": {
      "name": "scope",
      "in": "path",
      "description": "The scope at which the operation is performed.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true
    },
    "SubscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "description": "The ID of the target subscription. The value must be an UUID.",
      "required": true,
      "type": "string",
      "format": "uuid"
    },
    "TenantIdParameter": {
      "name": "tenantId",
      "in": "path",
      "description": "The Azure tenant ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)",
      "required": true,
      "type": "string",
      "format": "uuid",
      "x-ms-parameter-location": "method"
    }
  },
  "definitions": {
    "ActivationProperties": {
      "description": "The activation properties of the connected registry.",
      "type": "object",
      "properties": {
        "status": {
          "description": "The activation status of the connected registry.",
          "enum": [
            "Active",
            "Inactive"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ActivationStatus",
            "modelAsString": true
          }
        }
      }
    },
    "AzureADAuthenticationAsArmPolicy": {
      "description": "The policy for using ARM audience token for a container registry.",
      "type": "object",
      "properties": {
        "status": {
          "description": "The value that indicates whether the policy is enabled or not.",
          "default": "enabled",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AzureADAuthenticationAsArmPolicyStatus",
            "modelAsString": true
          }
        }
      }
    },
    "CacheRulesListResult": {
      "description": "The result of a request to list cache rules for a container registry.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of cache rules.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CacheRule"
          }
        },
        "nextLink": {
          "description": "If provided, client must use NextLink URI to request next list of cache rules.",
          "type": "string"
        }
      }
    },
    "CacheRule": {
      "description": "An object that represents a cache rule for a container registry.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyResource"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/CacheRuleProperties",
          "description": "The properties of the cache rule.",
          "x-ms-client-flatten": true
        }
      }
    },
    "CacheRuleProperties": {
      "description": "The properties of a cache rule.",
      "type": "object",
      "properties": {
        "credentialSetResourceId": {
          "description": "The ARM resource ID of the credential store which is associated with the cache rule.",
          "type": "string"
        },
        "sourceRepository": {
          "description": "Source repository pulled from upstream.",
          "type": "string"
        },
        "targetRepository": {
          "description": "Target repository specified in docker pull command.\r\nEg: docker pull myregistry.azurecr.io/{targetRepository}:{tag}",
          "type": "string"
        },
        "creationDate": {
          "format": "date-time",
          "description": "The creation date of the cache rule.",
          "type": "string",
          "readOnly": true
        },
        "provisioningState": {
          "description": "Provisioning state of the resource.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        }
      }
    },
    "CacheRuleUpdateParameters": {
      "description": "The parameters for updating a cache rule.",
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/CacheRuleUpdateProperties",
          "description": "The properties of the cache rule update parameters.",
          "x-ms-client-flatten": true
        }
      }
    },
    "CacheRuleUpdateProperties": {
      "description": "The parameters for updating cache rule properties.",
      "type": "object",
      "properties": {
        "credentialSetResourceId": {
          "description": "The ARM resource ID of the credential store which is associated with the Cache rule.",
          "type": "string"
        }
      }
    },
    "ConnectedRegistry": {
      "description": "An object that represents a connected registry for a container registry.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyResource"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/ConnectedRegistryProperties",
          "description": "The properties of the connected registry.",
          "x-ms-client-flatten": true
        }
      }
    },
    "ConnectedRegistryListResult": {
      "description": "The result of a request to list connected registries for a container registry.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of connected registries. Since this list may be incomplete, the nextLink field should be used to request the next list of connected registries.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectedRegistry"
          }
        },
        "nextLink": {
          "description": "The URI that can be used to request the next list of connected registries.",
          "type": "string"
        }
      }
    },
    "ConnectedRegistryProperties": {
      "description": "The properties of a connected registry.",
      "required": [
        "mode",
        "parent"
      ],
      "type": "object",
      "properties": {
        "provisioningState": {
          "description": "Provisioning state of the resource.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "mode": {
          "description": "The mode of the connected registry resource that indicates the permissions of the registry.",
          "enum": [
            "ReadWrite",
            "ReadOnly",
            "Registry",
            "Mirror"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ConnectedRegistryMode",
            "modelAsString": true
          }
        },
        "version": {
          "description": "The current version of ACR runtime on the connected registry.",
          "type": "string",
          "readOnly": true
        },
        "connectionState": {
          "description": "The current connection state of the connected registry.",
          "enum": [
            "Online",
            "Offline",
            "Syncing",
            "Unhealthy"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ConnectionState",
            "modelAsString": true
          }
        },
        "lastActivityTime": {
          "format": "date-time",
          "description": "The last activity time of the connected registry.",
          "type": "string",
          "readOnly": true
        },
        "activation": {
          "$ref": "#/definitions/ActivationProperties",
          "description": "The activation properties of the connected registry.",
          "readOnly": true
        },
        "parent": {
          "$ref": "#/definitions/ParentProperties",
          "description": "The parent of the connected registry."
        },
        "clientTokenIds": {
          "description": "The list of the ACR token resource IDs used to authenticate clients to the connected registry.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "loginServer": {
          "$ref": "#/definitions/LoginServerProperties",
          "description": "The login server properties of the connected registry."
        },
        "logging": {
          "$ref": "#/definitions/LoggingProperties",
          "description": "The logging properties of the connected registry."
        },
        "statusDetails": {
          "description": "The list of current statuses of the connected registry.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StatusDetailProperties"
          },
          "readOnly": true,
          "x-ms-identifiers": [
            "correlationId"
          ]
        },
        "notificationsList": {
          "description": "The list of notifications subscription information for the connected registry.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "garbageCollection": {
          "$ref": "#/definitions/GarbageCollectionProperties"
        }
      }
    },
    "ConnectedRegistryUpdateParameters": {
      "description": "The parameters for updating a connected registry.",
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ConnectedRegistryUpdateProperties",
          "description": "The properties of the connected registry update parameters.",
          "x-ms-client-flatten": true
        }
      }
    },
    "ConnectedRegistryUpdateProperties": {
      "description": "The parameters for updating token properties.",
      "type": "object",
      "properties": {
        "syncProperties": {
          "$ref": "#/definitions/SyncUpdateProperties",
          "description": "The sync properties of the connected registry with its parent."
        },
        "logging": {
          "$ref": "#/definitions/LoggingProperties",
          "description": "The logging properties of the connected registry."
        },
        "clientTokenIds": {
          "description": "The list of the ACR token resource IDs used to authenticate clients to the connected registry.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "notificationsList": {
          "description": "The list of notifications subscription information for the connected registry.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "garbageCollection": {
          "$ref": "#/definitions/GarbageCollectionProperties"
        }
      }
    },
    "GarbageCollectionProperties": {
      "description": "The garbage collection properties of the connected registry.",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Indicates whether garbage collection is enabled for the connected registry.",
          "type": "boolean"
        },
        "schedule": {
          "description": "The cron expression indicating the schedule that the connected registry will run garbage collection.",
          "type": "string"
        }
      }
    },
    "LoggingProperties": {
      "description": "The logging properties of the connected registry.",
      "type": "object",
      "properties": {
        "logLevel": {
          "description": "The verbosity of logs persisted on the connected registry.",
          "default": "Information",
          "enum": [
            "Debug",
            "Information",
            "Warning",
            "Error",
            "None"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "LogLevel",
            "modelAsString": true
          }
        },
        "auditLogStatus": {
          "description": "Indicates whether audit logs are enabled on the connected registry.",
          "default": "Disabled",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AuditLogStatus",
            "modelAsString": true
          }
        }
      }
    },
    "LoginServerProperties": {
      "description": "The login server properties of the connected registry.",
      "type": "object",
      "properties": {
        "host": {
          "description": "The host of the connected registry. Can be FQDN or IP.",
          "type": "string",
          "readOnly": true
        },
        "tls": {
          "$ref": "#/definitions/TlsProperties",
          "description": "The TLS properties of the connected registry login server.",
          "readOnly": true
        }
      }
    },
    "ParentProperties": {
      "description": "The properties of the connected registry parent.",
      "required": [
        "syncProperties"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The resource ID of the parent to which the connected registry will be associated.",
          "type": "string"
        },
        "syncProperties": {
          "$ref": "#/definitions/SyncProperties",
          "description": "The sync properties of the connected registry with its parent."
        }
      }
    },
    "CredentialSetListResult": {
      "description": "The result of a request to list credential sets for a container registry.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of credential sets. Since this list may be incomplete, the nextLink field should be used to request the next list of credential sets.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CredentialSet"
          }
        },
        "nextLink": {
          "description": "The URI that can be used to request the next list of credential sets.",
          "type": "string"
        }
      }
    },
    "CredentialSet": {
      "description": "An object that represents a credential set resource for a container registry.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyResource"
        }
      ],
      "properties": {
        "identity": {
          "$ref": "#/definitions/IdentityProperties",
          "description": "Identities associated with the resource. This is used to access the KeyVault secrets."
        },
        "properties": {
          "$ref": "#/definitions/CredentialSetProperties",
          "description": "The properties of the credential set.",
          "x-ms-client-flatten": true
        }
      }
    },
    "IdentityProperties": {
      "description": "Managed identity for the resource.",
      "type": "object",
      "properties": {
        "principalId": {
          "description": "The principal ID of resource identity.",
          "type": "string",
          "readOnly": true
        },
        "tenantId": {
          "description": "The tenant ID of resource.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "The identity type.",
          "enum": [
            "SystemAssigned",
            "UserAssigned",
            "SystemAssigned, UserAssigned",
            "None"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ResourceIdentityType",
            "modelAsString": false
          }
        },
        "userAssignedIdentities": {
          "description": "The list of user identities associated with the resource. The user identity \r\ndictionary key references will be ARM resource ids in the form: \r\n'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/\r\n    providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/UserIdentityProperties"
          }
        }
      }
    },
    "CredentialSetProperties": {
      "description": "The properties of a credential set resource.",
      "type": "object",
      "properties": {
        "loginServer": {
          "description": "The credentials are stored for this upstream or login server.",
          "type": "string"
        },
        "authCredentials": {
          "description": "List of authentication credentials stored for an upstream.\r\nUsually consists of a primary and an optional secondary credential.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthCredential"
          },
          "x-ms-identifiers": [
            "name"
          ]
        },
        "creationDate": {
          "format": "date-time",
          "description": "The creation date of credential store resource.",
          "type": "string",
          "readOnly": true
        },
        "provisioningState": {
          "description": "Provisioning state of the resource.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        }
      }
    },
    "UserIdentityProperties": {
      "type": "object",
      "properties": {
        "principalId": {
          "description": "The principal id of user assigned identity.",
          "type": "string",
          "readOnly": true
        },
        "clientId": {
          "description": "The client id of user assigned identity.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Resource": {
      "type": "object",
      "title": "Resource",
      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
      "properties": {
        "id": {
          "type": "string",
          "format": "arm-id",
          "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "$ref": "#/definitions/systemData",
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true
        }
      },
      "x-ms-azure-resource": true
    },
    "AuthCredential": {
      "description": "Authentication credential stored for an upstream.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the credential.",
          "enum": [
            "Credential1"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "CredentialName",
            "modelAsString": true
          }
        },
        "usernameSecretIdentifier": {
          "description": "KeyVault Secret URI for accessing the username.",
          "type": "string"
        },
        "passwordSecretIdentifier": {
          "description": "KeyVault Secret URI for accessing the password.",
          "type": "string"
        },
        "credentialHealth": {
          "$ref": "#/definitions/CredentialHealth",
          "description": "This provides data pertaining to the health of the auth credential.",
          "readOnly": true
        }
      }
    },
    "ProxyResource": {
      "type": "object",
      "title": "Proxy Resource",
      "description": "The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "CredentialHealth": {
      "description": "The health of the auth credential.",
      "type": "object",
      "properties": {
        "status": {
          "description": "The health status of credential.",
          "enum": [
            "Healthy",
            "Unhealthy"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "CredentialHealthStatus",
            "modelAsString": true
          }
        },
        "errorCode": {
          "description": "Error code representing the health check error.",
          "type": "string"
        },
        "errorMessage": {
          "description": "Descriptive message representing the health check error.",
          "type": "string"
        }
      }
    },
    "SystemData": {
      "description": "Metadata pertaining to creation and last modification of the resource.",
      "type": "object",
      "properties": {
        "createdBy": {
          "description": "The identity that created the resource.",
          "type": "string"
        },
        "createdByType": {
          "description": "The type of identity that created the resource.",
          "enum": [
            "User",
            "Application",
            "ManagedIdentity",
            "Key"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "createdByType",
            "modelAsString": true
          }
        },
        "createdAt": {
          "format": "date-time",
          "description": "The timestamp of resource creation (UTC).",
          "type": "string"
        },
        "lastModifiedBy": {
          "description": "The identity that last modified the resource.",
          "type": "string"
        },
        "lastModifiedByType": {
          "description": "The type of identity that last modified the resource.",
          "enum": [
            "User",
            "Application",
            "ManagedIdentity",
            "Key"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "lastModifiedByType",
            "modelAsString": true
          }
        },
        "lastModifiedAt": {
          "format": "date-time",
          "description": "The timestamp of resource modification (UTC).",
          "type": "string"
        }
      },
      "readOnly": true
    },
    "CredentialSetUpdateParameters": {
      "description": "The parameters for updating a credential set",
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/CredentialSetUpdateProperties",
          "description": "The properties of the credential set update parameters",
          "x-ms-client-flatten": true
        },
        "identity": {
          "$ref": "#/definitions/IdentityProperties",
          "description": "Identities associated with the resource. This is used to access the KeyVault secrets."
        }
      }
    },
    "CredentialSetUpdateProperties": {
      "description": "The parameters for updating credential set properties.",
      "type": "object",
      "properties": {
        "authCredentials": {
          "description": "List of authentication credentials stored for an upstream.\r\nUsually consists of a primary and an optional secondary credential.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthCredential"
          },
          "x-ms-identifiers": [
            "name"
          ]
        }
      }
    },
    "ImportImageParameters": {
      "required": [
        "source"
      ],
      "type": "object",
      "properties": {
        "source": {
          "$ref": "#/definitions/ImportSource",
          "description": "The source of the image."
        },
        "targetTags": {
          "description": "List of strings of the form repo[:tag]. When tag is omitted the source will be used (or 'latest' if source tag is also omitted).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "untaggedTargetRepositories": {
          "description": "List of strings of repository names to do a manifest only copy. No tag will be created.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mode": {
          "description": "When Force, any existing target tags will be overwritten. When NoForce, any existing target tags will fail the operation before any copying begins.",
          "default": "NoForce",
          "enum": [
            "NoForce",
            "Force"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ImportMode",
            "modelAsString": true
          }
        }
      }
    },
    "ImportSource": {
      "required": [
        "sourceImage"
      ],
      "type": "object",
      "properties": {
        "resourceId": {
          "description": "The resource identifier of the source Azure Container Registry.",
          "type": "string"
        },
        "registryUri": {
          "description": "The address of the source registry (e.g. 'mcr.microsoft.com').",
          "type": "string"
        },
        "credentials": {
          "$ref": "#/definitions/ImportSourceCredentials",
          "description": "Credentials used when importing from a registry uri."
        },
        "sourceImage": {
          "description": "Repository name of the source image.\r\nSpecify an image by repository ('hello-world'). This will use the 'latest' tag.\r\nSpecify an image by tag ('hello-world:latest').\r\nSpecify an image by sha256-based manifest digest ('hello-world@sha256:abc123').",
          "type": "string"
        }
      }
    },
    "ImportSourceCredentials": {
      "required": [
        "password"
      ],
      "type": "object",
      "properties": {
        "username": {
          "description": "The username to authenticate with the source registry.",
          "type": "string"
        },
        "password": {
          "description": "The password used to authenticate with the source registry.",
          "type": "string"
        }
      }
    },
    "OperationListResult": {
      "type": "object",
      "description": "A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results.",
      "properties": {
        "value": {
          "type": "array",
          "description": "List of operations supported by the resource provider",
          "items": {
            "$ref": "#/definitions/Operation"
          },
          "readOnly": true,
          "x-ms-identifiers": [
            "name"
          ]
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "URL to get the next set of operation list results (if there are any).",
          "readOnly": true
        }
      }
    },
    "OperationDefinition": {
      "description": "The definition of a container registry operation.",
      "type": "object",
      "properties": {
        "origin": {
          "description": "The origin information of the container registry operation.",
          "type": "string"
        },
        "name": {
          "description": "Operation name: {provider}/{resource}/{operation}.",
          "type": "string"
        },
        "display": {
          "$ref": "#/definitions/OperationDisplayDefinition",
          "description": "The display information for the container registry operation."
        },
        "properties": {
          "$ref": "#/definitions/OperationPropertiesDefinition",
          "description": "The properties information for the container registry operation.",
          "x-ms-client-flatten": true
        },
        "isDataAction": {
          "description": "This property indicates if the operation is an action or a data action\r\nref: https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions#management-and-data-operations",
          "type": "boolean"
        }
      }
    },
    "OperationDisplayDefinition": {
      "description": "The display information for a container registry operation.",
      "type": "object",
      "properties": {
        "provider": {
          "description": "The resource provider name: Microsoft.ContainerRegistry.",
          "type": "string"
        },
        "resource": {
          "description": "The resource on which the operation is performed.",
          "type": "string"
        },
        "operation": {
          "description": "The operation that users can perform.",
          "type": "string"
        },
        "description": {
          "description": "The description for the operation.",
          "type": "string"
        }
      }
    },
    "OperationPropertiesDefinition": {
      "description": "The definition of Azure Monitoring properties.",
      "type": "object",
      "properties": {
        "serviceSpecification": {
          "$ref": "#/definitions/OperationServiceSpecificationDefinition",
          "description": "The definition of Azure Monitoring service."
        }
      }
    },
    "OperationServiceSpecificationDefinition": {
      "description": "The definition of Azure Monitoring list.",
      "type": "object",
      "properties": {
        "metricSpecifications": {
          "description": "A list of Azure Monitoring metrics definition.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationMetricSpecificationDefinition"
          },
          "x-ms-identifiers": [
            "name"
          ]
        },
        "logSpecifications": {
          "description": "A list of Azure Monitoring log definitions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationLogSpecificationDefinition"
          },
          "x-ms-identifiers": [
            "name"
          ]
        }
      }
    },
    "OperationMetricSpecificationDefinition": {
      "description": "The definition of Azure Monitoring metric.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Metric name.",
          "type": "string"
        },
        "displayName": {
          "description": "Metric display name.",
          "type": "string"
        },
        "displayDescription": {
          "description": "Metric description.",
          "type": "string"
        },
        "unit": {
          "description": "Metric unit.",
          "type": "string"
        },
        "aggregationType": {
          "description": "Metric aggregation type.",
          "type": "string"
        },
        "internalMetricName": {
          "description": "Internal metric name.",
          "type": "string"
        }
      }
    },
    "OperationLogSpecificationDefinition": {
      "description": "The definition of Azure Monitoring log.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Log name.",
          "type": "string"
        },
        "displayName": {
          "description": "Log display name.",
          "type": "string"
        },
        "blobDuration": {
          "description": "Log blob duration.",
          "type": "string"
        }
      }
    },
    "RegistryNameCheckRequest": {
      "description": "A request to check whether a container registry name is available.",
      "required": [
        "name",
        "type"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the container registry.",
          "maxLength": 50,
          "minLength": 5,
          "pattern": "^[a-zA-Z0-9]*$",
          "type": "string"
        },
        "type": {
          "description": "The resource type of the container registry. This field must be set to 'Microsoft.ContainerRegistry/registries'.",
          "enum": [
            "Microsoft.ContainerRegistry/registries"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ContainerRegistryResourceType",
            "modelAsString": false
          }
        }
      }
    },
    "RegistryNameStatus": {
      "description": "The result of a request to check the availability of a container registry name.",
      "type": "object",
      "properties": {
        "nameAvailable": {
          "description": "The value that indicates whether the name is available.",
          "type": "boolean"
        },
        "reason": {
          "description": "If any, the reason that the name is not available.",
          "type": "string"
        },
        "message": {
          "description": "If any, the error message that provides more detail for the reason that the name is not available.",
          "type": "string"
        }
      }
    },
    "PrivateEndpointConnectionListResult": {
      "description": "The result of a request to list private endpoint connections for a container registry.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of private endpoint connections. Since this list may be incomplete, the nextLink field should be used to request the next list of private endpoint connections.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivateEndpointConnection"
          }
        },
        "nextLink": {
          "description": "The URI that can be used to request the next list of private endpoint connections.",
          "type": "string"
        }
      }
    },
    "PrivateEndpointConnection": {
      "description": "An object that represents a private endpoint connection for a container registry.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyResource"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/PrivateEndpointConnectionProperties",
          "description": "The properties of a private endpoint connection.",
          "x-ms-client-flatten": true
        }
      }
    },
    "PrivateEndpointConnectionProperties": {
      "description": "The properties of a private endpoint connection.",
      "type": "object",
      "properties": {
        "privateEndpoint": {
          "$ref": "#/definitions/PrivateEndpoint",
          "description": "The resource of private endpoint."
        },
        "privateLinkServiceConnectionState": {
          "$ref": "#/definitions/PrivateLinkServiceConnectionState",
          "description": "A collection of information about the state of the connection between service consumer and provider."
        },
        "provisioningState": {
          "description": "The provisioning state of private endpoint connection resource.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        }
      }
    },
    "PrivateEndpoint": {
      "description": "The Private Endpoint resource.",
      "type": "object",
      "properties": {
        "id": {
          "description": "This is private endpoint resource created with Microsoft.Network resource provider.",
          "type": "string"
        }
      }
    },
    "PrivateLinkServiceConnectionState": {
      "description": "The state of a private link service connection.",
      "type": "object",
      "properties": {
        "status": {
          "description": "The private link service connection status.",
          "enum": [
            "Approved",
            "Pending",
            "Rejected",
            "Disconnected"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ConnectionStatus",
            "modelAsString": true
          }
        },
        "description": {
          "description": "The description for connection status. For example if connection is rejected it can indicate reason for rejection.",
          "type": "string"
        },
        "actionsRequired": {
          "description": "A message indicating if changes on the service provider require any updates on the consumer.",
          "enum": [
            "None",
            "Recreate"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ActionsRequired",
            "modelAsString": true
          }
        }
      }
    },
    "RegistryListResult": {
      "description": "The result of a request to list container registries.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of container registries. Since this list may be incomplete, the nextLink field should be used to request the next list of container registries.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Registry"
          }
        },
        "nextLink": {
          "description": "The URI that can be used to request the next list of container registries.",
          "type": "string"
        }
      }
    },
    "Registry": {
      "description": "An object that represents a container registry.",
      "required": [
        "sku"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "sku": {
          "$ref": "#/definitions/Sku",
          "description": "The SKU of the container registry."
        },
        "identity": {
          "$ref": "#/definitions/IdentityProperties",
          "description": "The identity of the container registry."
        },
        "properties": {
          "$ref": "#/definitions/RegistryProperties",
          "description": "The properties of the container registry.",
          "x-ms-client-flatten": true
        }
      }
    },
    "Sku": {
      "type": "object",
      "description": "The resource model definition representing SKU",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the SKU. E.g. P3. It is typically a letter+number code"
        },
        "tier": {
          "$ref": "#/definitions/SkuTier"
        },
        "size": {
          "type": "string",
          "description": "The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. "
        },
        "family": {
          "type": "string",
          "description": "If the service has different generations of hardware, for the same SKU, then that can be captured here."
        },
        "capacity": {
          "type": "integer",
          "format": "int32",
          "description": "If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted."
        }
      },
      "required": [
        "name"
      ]
    },
    "RegistryProperties": {
      "description": "The properties of a container registry.",
      "type": "object",
      "properties": {
        "loginServer": {
          "description": "The URL that can be used to log into the container registry.",
          "type": "string",
          "readOnly": true
        },
        "creationDate": {
          "format": "date-time",
          "description": "The creation date of the container registry in ISO8601 format.",
          "type": "string",
          "readOnly": true
        },
        "provisioningState": {
          "description": "The provisioning state of the container registry at the time the operation was called.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "status": {
          "$ref": "#/definitions/Status",
          "description": "The status of the container registry at the time the operation was called.",
          "readOnly": true
        },
        "adminUserEnabled": {
          "description": "The value that indicates whether the admin user is enabled.",
          "default": false,
          "type": "boolean"
        },
        "networkRuleSet": {
          "$ref": "#/definitions/NetworkRuleSet",
          "description": "The network rule set for a container registry."
        },
        "policies": {
          "$ref": "#/definitions/Policies",
          "description": "The policies for a container registry."
        },
        "encryption": {
          "$ref": "#/definitions/EncryptionProperty",
          "description": "The encryption settings of container registry."
        },
        "dataEndpointEnabled": {
          "description": "Enable a single data endpoint per region for serving data.",
          "type": "boolean"
        },
        "dataEndpointHostNames": {
          "description": "List of host names that will serve data when dataEndpointEnabled is true.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "privateEndpointConnections": {
          "description": "List of private endpoint connections for a container registry.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivateEndpointConnection"
          },
          "readOnly": true
        },
        "publicNetworkAccess": {
          "description": "Whether or not public network access is allowed for the container registry.",
          "default": "Enabled",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PublicNetworkAccess",
            "modelAsString": true
          }
        },
        "networkRuleBypassOptions": {
          "description": "Whether to allow trusted Azure services to access a network restricted registry.",
          "default": "AzureServices",
          "enum": [
            "AzureServices",
            "None"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "NetworkRuleBypassOptions",
            "modelAsString": true
          }
        },
        "zoneRedundancy": {
          "description": "Whether or not zone redundancy is enabled for this container registry",
          "default": "Disabled",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ZoneRedundancy",
            "modelAsString": true
          }
        },
        "anonymousPullEnabled": {
          "description": "Enables registry-wide pull from unauthenticated clients.",
          "default": false,
          "type": "boolean"
        }
      }
    },
    "Status": {
      "description": "The status of an Azure resource at the time the operation was called.",
      "type": "object",
      "properties": {
        "displayStatus": {
          "description": "The short label for the status.",
          "type": "string",
          "readOnly": true
        },
        "message": {
          "description": "The detailed message for the status, including alerts and error messages.",
          "type": "string",
          "readOnly": true
        },
        "timestamp": {
          "format": "date-time",
          "description": "The timestamp when the status was changed to the current value.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "StatusDetailProperties": {
      "description": "The status detail properties of the connected registry.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The component of the connected registry corresponding to the status.",
          "type": "string",
          "readOnly": true
        },
        "code": {
          "description": "The code of the status.",
          "type": "string",
          "readOnly": true
        },
        "description": {
          "description": "The description of the status.",
          "type": "string",
          "readOnly": true
        },
        "timestamp": {
          "format": "date-time",
          "description": "The timestamp of the status.",
          "type": "string",
          "readOnly": true
        },
        "correlationId": {
          "description": "The correlation ID of the status.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "StorageAccountProperties": {
      "description": "The properties of a storage account for a container registry. Only applicable to Classic SKU.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The resource ID of the storage account.",
          "type": "string"
        }
      }
    },
    "SyncProperties": {
      "description": "The sync properties of the connected registry with its parent.",
      "required": [
        "tokenId",
        "messageTtl"
      ],
      "type": "object",
      "properties": {
        "tokenId": {
          "description": "The resource ID of the ACR token used to authenticate the connected registry to its parent during sync.",
          "type": "string"
        },
        "schedule": {
          "description": "The cron expression indicating the schedule that the connected registry will sync with its parent.",
          "type": "string"
        },
        "syncWindow": {
          "format": "duration",
          "description": "The time window during which sync is enabled for each schedule occurrence. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.",
          "type": "string"
        },
        "messageTtl": {
          "format": "duration",
          "description": "The period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.",
          "type": "string"
        },
        "lastSyncTime": {
          "format": "date-time",
          "description": "The last time a sync occurred between the connected registry and its parent.",
          "type": "string",
          "readOnly": true
        },
        "gatewayEndpoint": {
          "description": "The gateway endpoint used by the connected registry to communicate with its parent.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "SyncUpdateProperties": {
      "description": "The parameters for updating the sync properties of the connected registry with its parent.",
      "type": "object",
      "properties": {
        "schedule": {
          "description": "The cron expression indicating the schedule that the connected registry will sync with its parent.",
          "type": "string"
        },
        "syncWindow": {
          "format": "duration",
          "description": "The time window during which sync is enabled for each schedule occurrence. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.",
          "type": "string"
        },
        "messageTtl": {
          "format": "duration",
          "description": "The period of time for which a message is available to sync before it is expired. Specify the duration using the format P[n]Y[n]M[n]DT[n]H[n]M[n]S as per ISO8601.",
          "type": "string"
        }
      }
    },
    "NetworkRuleSet": {
      "description": "The network rule set for a container registry.",
      "required": [
        "defaultAction"
      ],
      "type": "object",
      "properties": {
        "defaultAction": {
          "description": "The default action of allow or deny when no other rules match.",
          "default": "Allow",
          "enum": [
            "Allow",
            "Deny"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "DefaultAction",
            "modelAsString": true
          }
        },
        "ipRules": {
          "description": "The IP ACL rules.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IPRule"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "Policies": {
      "description": "The policies for a container registry.",
      "type": "object",
      "properties": {
        "quarantinePolicy": {
          "$ref": "#/definitions/QuarantinePolicy",
          "description": "The quarantine policy for a container registry."
        },
        "trustPolicy": {
          "$ref": "#/definitions/TrustPolicy",
          "description": "The content trust policy for a container registry."
        },
        "retentionPolicy": {
          "$ref": "#/definitions/RetentionPolicy",
          "description": "The retention policy for a container registry."
        },
        "exportPolicy": {
          "$ref": "#/definitions/ExportPolicy",
          "description": "The export policy for a container registry."
        },
        "azureADAuthenticationAsArmPolicy": {
          "$ref": "#/definitions/AzureADAuthenticationAsArmPolicy",
          "description": "The policy for using ARM audience token for a container registry."
        }
      }
    },
    "EncryptionProperty": {
      "type": "object",
      "properties": {
        "status": {
          "description": "Indicates whether or not the encryption is enabled for container registry.",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "EncryptionStatus",
            "modelAsString": true
          }
        },
        "keyVaultProperties": {
          "$ref": "#/definitions/KeyVaultProperties",
          "description": "Key vault properties."
        }
      }
    },
    "PackageType": {
      "description": "The properties of a package type.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the package type.",
          "type": "string"
        },
        "endpoint": {
          "description": "The endpoint of the package type.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "IPRule": {
      "description": "IP rule with specific IP or IP range in CIDR format.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "action": {
          "description": "The action of IP ACL rule.",
          "default": "Allow",
          "enum": [
            "Allow"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "Action",
            "modelAsString": true
          }
        },
        "value": {
          "description": "Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.",
          "type": "string",
          "x-ms-client-name": "IPAddressOrRange"
        }
      }
    },
    "QuarantinePolicy": {
      "description": "The quarantine policy for a container registry.",
      "type": "object",
      "properties": {
        "status": {
          "description": "The value that indicates whether the policy is enabled or not.",
          "default": "disabled",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PolicyStatus",
            "modelAsString": true
          }
        }
      }
    },
    "TrustPolicy": {
      "description": "The content trust policy for a container registry.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of trust policy.",
          "default": "Notary",
          "enum": [
            "Notary"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TrustPolicyType",
            "modelAsString": true
          }
        },
        "status": {
          "description": "The value that indicates whether the policy is enabled or not.",
          "default": "disabled",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PolicyStatus",
            "modelAsString": true
          }
        }
      }
    },
    "RetentionPolicy": {
      "description": "The retention policy for a container registry.",
      "type": "object",
      "properties": {
        "days": {
          "format": "int32",
          "description": "The number of days to retain an untagged manifest after which it gets purged.",
          "default": 7,
          "type": "integer"
        },
        "lastUpdatedTime": {
          "format": "date-time",
          "description": "The timestamp when the policy was last updated.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "The value that indicates whether the policy is enabled or not.",
          "default": "disabled",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PolicyStatus",
            "modelAsString": true
          }
        }
      }
    },
    "ExportPolicy": {
      "description": "The export policy for a container registry.",
      "type": "object",
      "properties": {
        "status": {
          "description": "The value that indicates whether the policy is enabled or not.",
          "default": "enabled",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ExportPolicyStatus",
            "modelAsString": true
          }
        }
      }
    },
    "KeyVaultProperties": {
      "type": "object",
      "properties": {
        "keyIdentifier": {
          "type": "string",
          "description": "Key vault uri to access the encryption key."
        },
        "identity": {
          "type": "string",
          "description": "The client ID of the identity which will be used to access key vault."
        }
      }
    },
    "RegistryUpdateParameters": {
      "description": "The parameters for updating a container registry.",
      "type": "object",
      "properties": {
        "identity": {
          "$ref": "#/definitions/IdentityProperties",
          "description": "The identity of the container registry."
        },
        "tags": {
          "description": "The tags for the container registry.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sku": {
          "$ref": "#/definitions/Sku",
          "description": "The SKU of the container registry."
        },
        "properties": {
          "$ref": "#/definitions/RegistryPropertiesUpdateParameters",
          "description": "The properties that the container registry will be updated with.",
          "x-ms-client-flatten": true
        }
      }
    },
    "RegistryPropertiesUpdateParameters": {
      "description": "The parameters for updating the properties of a container registry.",
      "type": "object",
      "properties": {
        "adminUserEnabled": {
          "description": "The value that indicates whether the admin user is enabled.",
          "type": "boolean"
        },
        "networkRuleSet": {
          "$ref": "#/definitions/NetworkRuleSet",
          "description": "The network rule set for a container registry."
        },
        "policies": {
          "$ref": "#/definitions/Policies",
          "description": "The policies for a container registry."
        },
        "encryption": {
          "$ref": "#/definitions/EncryptionProperty",
          "description": "The encryption settings of container registry."
        },
        "dataEndpointEnabled": {
          "description": "Enable a single data endpoint per region for serving data.",
          "type": "boolean"
        },
        "publicNetworkAccess": {
          "description": "Whether or not public network access is allowed for the container registry.",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PublicNetworkAccess",
            "modelAsString": true
          }
        },
        "networkRuleBypassOptions": {
          "description": "Whether to allow trusted Azure services to access a network restricted registry.",
          "default": "AzureServices",
          "enum": [
            "AzureServices",
            "None"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "NetworkRuleBypassOptions",
            "modelAsString": true
          }
        },
        "anonymousPullEnabled": {
          "description": "Enables registry-wide pull from unauthenticated clients.",
          "type": "boolean"
        }
      }
    },
    "RegistryUsageListResult": {
      "description": "The result of a request to get container registry quota usages.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of container registry quota usages.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegistryUsage"
          },
          "x-ms-identifiers": [
            "name"
          ]
        }
      }
    },
    "RegistryUsage": {
      "description": "The quota usage for a container registry.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the usage.",
          "type": "string"
        },
        "limit": {
          "format": "int64",
          "description": "The limit of the usage.",
          "type": "integer"
        },
        "currentValue": {
          "format": "int64",
          "description": "The current value of the usage.",
          "type": "integer"
        },
        "unit": {
          "description": "The unit of measurement.",
          "enum": [
            "Count",
            "Bytes"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RegistryUsageUnit",
            "modelAsString": true
          }
        }
      }
    },
    "PrivateLinkResourceListResult": {
      "description": "The result of a request to list private link resources for a container registry.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of private link resources. Since this list may be incomplete, the nextLink field should be used to request the next list of private link resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrivateLinkResource"
          }
        },
        "nextLink": {
          "description": "The URI that can be used to request the next list of private link resources.",
          "type": "string"
        }
      }
    },
    "PrivateLinkResource": {
      "description": "A resource that supports private link capabilities.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The resource type is private link resource.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "The resource ID.",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/PrivateLinkResourceProperties",
          "description": "A resource that supports private link capabilities.",
          "x-ms-client-flatten": true
        }
      }
    },
    "PrivateLinkResourceProperties": {
      "description": "The properties of a private link resource.",
      "type": "object",
      "properties": {
        "groupId": {
          "description": "The private link resource group id.",
          "type": "string"
        },
        "requiredMembers": {
          "description": "The private link resource required member names.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "requiredZoneNames": {
          "description": "The private link resource Private link DNS zone name.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "RegistryListCredentialsResult": {
      "description": "The response from the ListCredentials operation.",
      "type": "object",
      "properties": {
        "username": {
          "description": "The username for a container registry.",
          "type": "string"
        },
        "passwords": {
          "description": "The list of passwords for a container registry.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegistryPassword"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "RegistryPassword": {
      "description": "The login password for the container registry.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The password name.",
          "enum": [
            "password",
            "password2"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PasswordName",
            "modelAsString": false
          }
        },
        "value": {
          "description": "The password value.",
          "type": "string"
        }
      }
    },
    "RegenerateCredentialParameters": {
      "description": "The parameters used to regenerate the login credential.",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Specifies name of the password which should be regenerated -- password or password2.",
          "enum": [
            "password",
            "password2"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PasswordName",
            "modelAsString": false
          }
        }
      }
    },
    "ReplicationListResult": {
      "description": "The result of a request to list replications for a container registry.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of replications. Since this list may be incomplete, the nextLink field should be used to request the next list of replications.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Replication"
          }
        },
        "nextLink": {
          "description": "The URI that can be used to request the next list of replications.",
          "type": "string"
        }
      }
    },
    "Replication": {
      "description": "An object that represents a replication for a container registry.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/ReplicationProperties",
          "description": "The properties of the replication.",
          "x-ms-client-flatten": true
        }
      }
    },
    "ReplicationProperties": {
      "description": "The properties of a replication.",
      "type": "object",
      "properties": {
        "provisioningState": {
          "description": "The provisioning state of the replication at the time the operation was called.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "status": {
          "$ref": "#/definitions/Status",
          "description": "The status of the replication at the time the operation was called.",
          "readOnly": true
        },
        "regionEndpointEnabled": {
          "description": "Specifies whether the replication's regional endpoint is enabled. Requests will not be routed to a replication whose regional endpoint is disabled, however its data will continue to be synced with other replications.",
          "default": true,
          "type": "boolean"
        },
        "zoneRedundancy": {
          "description": "Whether or not zone redundancy is enabled for this container registry replication",
          "default": "Disabled",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ZoneRedundancy",
            "modelAsString": true
          }
        }
      }
    },
    "ReplicationUpdateParameters": {
      "description": "The parameters for updating a replication.",
      "type": "object",
      "properties": {
        "tags": {
          "description": "The tags for the replication.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/ReplicationUpdateParametersProperties",
          "description": "The parameters for updating a replication's properties",
          "x-ms-client-flatten": true
        }
      }
    },
    "ReplicationUpdateParametersProperties": {
      "type": "object",
      "properties": {
        "regionEndpointEnabled": {
          "description": "Specifies whether the replication's regional endpoint is enabled. Requests will not be routed to a replication whose regional endpoint is disabled, however its data will continue to be synced with other replications.",
          "type": "boolean"
        }
      }
    },
    "ScopeMapListResult": {
      "description": "The result of a request to list scope maps for a container registry.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of scope maps. Since this list may be incomplete, the nextLink field should be used to request the next list of scope maps.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScopeMap"
          }
        },
        "nextLink": {
          "description": "The URI that can be used to request the next list of scope maps.",
          "type": "string"
        }
      }
    },
    "ScopeMap": {
      "description": "An object that represents a scope map for a container registry.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyResource"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/ScopeMapProperties",
          "description": "The properties of the scope map.",
          "x-ms-client-flatten": true
        }
      }
    },
    "ScopeMapProperties": {
      "description": "The properties of a scope map.",
      "required": [
        "actions"
      ],
      "type": "object",
      "properties": {
        "description": {
          "description": "The user friendly description of the scope map.",
          "type": "string"
        },
        "type": {
          "description": "The type of the scope map. E.g. BuildIn scope map.",
          "type": "string",
          "readOnly": true
        },
        "creationDate": {
          "format": "date-time",
          "description": "The creation date of scope map.",
          "type": "string",
          "readOnly": true
        },
        "provisioningState": {
          "description": "Provisioning state of the resource.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "actions": {
          "description": "The list of scoped permissions for registry artifacts.\r\nE.g. repositories/repository-name/content/read,\r\nrepositories/repository-name/metadata/write",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ScopeMapUpdateParameters": {
      "description": "The properties for updating the scope map.",
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ScopeMapPropertiesUpdateParameters",
          "description": "The update parameters for scope map properties.",
          "x-ms-client-flatten": true
        }
      }
    },
    "ScopeMapPropertiesUpdateParameters": {
      "description": "The update parameters for scope map properties.",
      "type": "object",
      "properties": {
        "description": {
          "description": "The user friendly description of the scope map.",
          "type": "string"
        },
        "actions": {
          "description": "The list of scope permissions for registry artifacts.\r\nE.g. repositories/repository-name/pull, \r\nrepositories/repository-name/delete",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TlsCertificateProperties": {
      "description": "The TLS certificate properties of the connected registry login server.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of certificate location.",
          "enum": [
            "LocalDirectory"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "CertificateType",
            "modelAsString": true
          }
        },
        "location": {
          "description": "Indicates the location of the certificates.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TlsProperties": {
      "description": "The TLS properties of the connected registry login server.",
      "type": "object",
      "properties": {
        "status": {
          "description": "Indicates whether HTTPS is enabled for the login server.",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "TlsStatus",
            "modelAsString": true
          }
        },
        "certificate": {
          "$ref": "#/definitions/TlsCertificateProperties",
          "description": "The certificate used to configure HTTPS for the login server.",
          "readOnly": true
        }
      }
    },
    "TokenListResult": {
      "description": "The result of a request to list tokens for a container registry.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of tokens. Since this list may be incomplete, the nextLink field should be used to request the next list of tokens.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Token"
          }
        },
        "nextLink": {
          "description": "The URI that can be used to request the next list of tokens.",
          "type": "string"
        }
      }
    },
    "Token": {
      "description": "An object that represents a token for a container registry.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyResource"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/TokenProperties",
          "description": "The properties of the token.",
          "x-ms-client-flatten": true
        }
      }
    },
    "TokenProperties": {
      "description": "The properties of a token.",
      "type": "object",
      "properties": {
        "creationDate": {
          "format": "date-time",
          "description": "The creation date of scope map.",
          "type": "string",
          "readOnly": true
        },
        "provisioningState": {
          "description": "Provisioning state of the resource.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "scopeMapId": {
          "description": "The resource ID of the scope map to which the token will be associated with.",
          "type": "string"
        },
        "credentials": {
          "$ref": "#/definitions/TokenCredentialsProperties",
          "description": "The credentials that can be used for authenticating the token."
        },
        "status": {
          "description": "The status of the token example enabled or disabled.",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TokenStatus",
            "modelAsString": true
          }
        }
      }
    },
    "TokenCredentialsProperties": {
      "description": "The properties of the credentials that can be used for authenticating the token.",
      "type": "object",
      "properties": {
        "certificates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenCertificate"
          },
          "x-ms-identifiers": [
            "thumbprint"
          ]
        },
        "passwords": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenPassword"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "ActiveDirectoryObject": {
      "description": "The Active Directory Object that will be used for authenticating the token of a container registry.",
      "type": "object",
      "properties": {
        "objectId": {
          "description": "The user/group/application object ID for Active Directory Object that will be used for authenticating the token of a container registry.",
          "type": "string"
        },
        "tenantId": {
          "description": "The tenant ID of user/group/application object Active Directory Object that will be used for authenticating the token of a container registry.",
          "type": "string"
        }
      }
    },
    "TokenCertificate": {
      "description": "The properties of a certificate used for authenticating a token.",
      "type": "object",
      "properties": {
        "name": {
          "enum": [
            "certificate1",
            "certificate2"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TokenCertificateName",
            "modelAsString": true
          }
        },
        "expiry": {
          "format": "date-time",
          "description": "The expiry datetime of the certificate.",
          "type": "string"
        },
        "thumbprint": {
          "description": "The thumbprint of the certificate.",
          "type": "string"
        },
        "encodedPemCertificate": {
          "description": "Base 64 encoded string of the public certificate1 in PEM format that will be used for authenticating the token.",
          "type": "string"
        }
      }
    },
    "TokenPassword": {
      "description": "The password that will be used for authenticating the token of a container registry.",
      "type": "object",
      "properties": {
        "creationTime": {
          "format": "date-time",
          "description": "The creation datetime of the password.",
          "type": "string"
        },
        "expiry": {
          "format": "date-time",
          "description": "The expiry datetime of the password.",
          "type": "string"
        },
        "name": {
          "description": "The password name \"password1\" or \"password2\"",
          "enum": [
            "password1",
            "password2"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TokenPasswordName",
            "modelAsString": true
          }
        },
        "value": {
          "description": "The password value.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TokenUpdateParameters": {
      "description": "The parameters for updating a token.",
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/TokenUpdateProperties",
          "description": "The properties of the token update parameters.",
          "x-ms-client-flatten": true
        }
      }
    },
    "TokenUpdateProperties": {
      "description": "The parameters for updating token properties.",
      "type": "object",
      "properties": {
        "scopeMapId": {
          "description": "The resource ID of the scope map to which the token will be associated with.",
          "type": "string"
        },
        "status": {
          "description": "The status of the token example enabled or disabled.",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TokenStatus",
            "modelAsString": true
          }
        },
        "credentials": {
          "$ref": "#/definitions/TokenCredentialsProperties",
          "description": "The credentials that can be used for authenticating the token."
        }
      }
    },
    "GenerateCredentialsParameters": {
      "description": "The parameters used to generate credentials for a specified token or user of a container registry.",
      "type": "object",
      "properties": {
        "tokenId": {
          "description": "The resource ID of the token for which credentials have to be generated.",
          "type": "string"
        },
        "expiry": {
          "format": "date-time",
          "description": "The expiry date of the generated credentials after which the credentials become invalid.",
          "type": "string"
        },
        "name": {
          "description": "Specifies name of the password which should be regenerated if any -- password1 or password2.",
          "enum": [
            "password1",
            "password2"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TokenPasswordName",
            "modelAsString": true
          }
        }
      }
    },
    "GenerateCredentialsResult": {
      "description": "The response from the GenerateCredentials operation.",
      "type": "object",
      "properties": {
        "username": {
          "description": "The username for a container registry.",
          "type": "string"
        },
        "passwords": {
          "description": "The list of passwords for a container registry.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenPassword"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "WebhookListResult": {
      "description": "The result of a request to list webhooks for a container registry.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of webhooks. Since this list may be incomplete, the nextLink field should be used to request the next list of webhooks.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Webhook"
          }
        },
        "nextLink": {
          "description": "The URI that can be used to request the next list of webhooks.",
          "type": "string"
        }
      }
    },
    "Webhook": {
      "description": "An object that represents a webhook for a container registry.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/WebhookProperties",
          "description": "The properties of the webhook.",
          "x-ms-client-flatten": true
        }
      }
    },
    "WebhookProperties": {
      "description": "The properties of a webhook.",
      "required": [
        "actions"
      ],
      "type": "object",
      "properties": {
        "status": {
          "description": "The status of the webhook at the time the operation was called.",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "WebhookStatus",
            "modelAsString": true
          }
        },
        "scope": {
          "description": "The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events.",
          "type": "string"
        },
        "actions": {
          "description": "The list of actions that trigger the webhook to post notifications.",
          "type": "array",
          "items": {
            "enum": [
              "push",
              "delete",
              "quarantine",
              "chart_push",
              "chart_delete"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "WebhookAction",
              "modelAsString": true
            }
          }
        },
        "provisioningState": {
          "description": "The provisioning state of the webhook at the time the operation was called.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        }
      }
    },
    "WebhookCreateParameters": {
      "description": "The parameters for creating a webhook.",
      "required": [
        "location"
      ],
      "type": "object",
      "properties": {
        "tags": {
          "description": "The tags for the webhook.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "location": {
          "description": "The location of the webhook. This cannot be changed after the resource is created.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/WebhookPropertiesCreateParameters",
          "description": "The properties that the webhook will be created with.",
          "x-ms-client-flatten": true
        }
      }
    },
    "WebhookPropertiesCreateParameters": {
      "description": "The parameters for creating the properties of a webhook.",
      "required": [
        "serviceUri",
        "actions"
      ],
      "type": "object",
      "properties": {
        "serviceUri": {
          "description": "The service URI for the webhook to post notifications.",
          "type": "string",
          "x-ms-secret": true
        },
        "customHeaders": {
          "description": "Custom headers that will be added to the webhook notifications.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-secret": true
        },
        "status": {
          "description": "The status of the webhook at the time the operation was called.",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "WebhookStatus",
            "modelAsString": true
          }
        },
        "scope": {
          "description": "The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events.",
          "type": "string"
        },
        "actions": {
          "description": "The list of actions that trigger the webhook to post notifications.",
          "type": "array",
          "items": {
            "enum": [
              "push",
              "delete",
              "quarantine",
              "chart_push",
              "chart_delete"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "WebhookAction",
              "modelAsString": true
            }
          }
        }
      }
    },
    "WebhookUpdateParameters": {
      "description": "The parameters for updating a webhook.",
      "type": "object",
      "properties": {
        "tags": {
          "description": "The tags for the webhook.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/WebhookPropertiesUpdateParameters",
          "description": "The properties that the webhook will be updated with.",
          "x-ms-client-flatten": true
        }
      }
    },
    "WebhookPropertiesUpdateParameters": {
      "description": "The parameters for updating the properties of a webhook.",
      "type": "object",
      "properties": {
        "serviceUri": {
          "description": "The service URI for the webhook to post notifications.",
          "type": "string",
          "x-ms-secret": true
        },
        "customHeaders": {
          "description": "Custom headers that will be added to the webhook notifications.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-secret": true
        },
        "status": {
          "description": "The status of the webhook at the time the operation was called.",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "WebhookStatus",
            "modelAsString": true
          }
        },
        "scope": {
          "description": "The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events.",
          "type": "string"
        },
        "actions": {
          "description": "The list of actions that trigger the webhook to post notifications.",
          "type": "array",
          "items": {
            "enum": [
              "push",
              "delete",
              "quarantine",
              "chart_push",
              "chart_delete"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "WebhookAction",
              "modelAsString": true
            }
          }
        }
      }
    },
    "EventInfo": {
      "description": "The basic information of an event.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The event ID.",
          "type": "string"
        }
      }
    },
    "EventListResult": {
      "description": "The result of a request to list events for a webhook.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of events. Since this list may be incomplete, the nextLink field should be used to request the next list of events.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        },
        "nextLink": {
          "description": "The URI that can be used to request the next list of events.",
          "type": "string"
        }
      }
    },
    "Event": {
      "description": "The event for a webhook.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EventInfo"
        }
      ],
      "properties": {
        "eventRequestMessage": {
          "$ref": "#/definitions/EventRequestMessage",
          "description": "The event request message sent to the service URI."
        },
        "eventResponseMessage": {
          "$ref": "#/definitions/EventResponseMessage",
          "description": "The event response message received from the service URI."
        }
      }
    },
    "EventRequestMessage": {
      "description": "The event request message sent to the service URI.",
      "type": "object",
      "properties": {
        "content": {
          "$ref": "#/definitions/EventContent",
          "description": "The content of the event request message."
        },
        "headers": {
          "description": "The headers of the event request message.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "method": {
          "description": "The HTTP method used to send the event request message.",
          "type": "string"
        },
        "requestUri": {
          "description": "The URI used to send the event request message.",
          "type": "string"
        },
        "version": {
          "description": "The HTTP message version.",
          "type": "string"
        }
      }
    },
    "EventResponseMessage": {
      "description": "The event response message received from the service URI.",
      "type": "object",
      "properties": {
        "content": {
          "description": "The content of the event response message.",
          "type": "string"
        },
        "headers": {
          "description": "The headers of the event response message.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "reasonPhrase": {
          "description": "The reason phrase of the event response message.",
          "type": "string"
        },
        "statusCode": {
          "description": "The status code of the event response message.",
          "type": "string"
        },
        "version": {
          "description": "The HTTP message version.",
          "type": "string"
        }
      }
    },
    "EventContent": {
      "description": "The content of the event request message.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The event ID.",
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "description": "The time at which the event occurred.",
          "type": "string"
        },
        "action": {
          "description": "The action that encompasses the provided event.",
          "type": "string"
        },
        "target": {
          "$ref": "#/definitions/Target",
          "description": "The target of the event."
        },
        "request": {
          "$ref": "#/definitions/Request",
          "description": "The request that generated the event."
        },
        "actor": {
          "$ref": "#/definitions/Actor",
          "description": "The agent that initiated the event. For most situations, this could be from the authorization context of the request."
        },
        "source": {
          "$ref": "#/definitions/Source",
          "description": "The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it."
        }
      }
    },
    "Target": {
      "description": "The target of the event.",
      "type": "object",
      "properties": {
        "mediaType": {
          "description": "The MIME type of the referenced object.",
          "type": "string"
        },
        "size": {
          "format": "int64",
          "description": "The number of bytes of the content. Same as Length field.",
          "type": "integer"
        },
        "digest": {
          "description": "The digest of the content, as defined by the Registry V2 HTTP API Specification.",
          "type": "string"
        },
        "length": {
          "format": "int64",
          "description": "The number of bytes of the content. Same as Size field.",
          "type": "integer"
        },
        "repository": {
          "description": "The repository name.",
          "type": "string"
        },
        "url": {
          "description": "The direct URL to the content.",
          "type": "string"
        },
        "tag": {
          "description": "The tag name.",
          "type": "string"
        },
        "name": {
          "description": "The name of the artifact.",
          "type": "string"
        },
        "version": {
          "description": "The version of the artifact.",
          "type": "string"
        }
      }
    },
    "Request": {
      "description": "The request that generated the event.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the request that initiated the event.",
          "type": "string"
        },
        "addr": {
          "description": "The IP or hostname and possibly port of the client connection that initiated the event. This is the RemoteAddr from the standard http request.",
          "type": "string"
        },
        "host": {
          "description": "The externally accessible hostname of the registry instance, as specified by the http host header on incoming requests.",
          "type": "string"
        },
        "method": {
          "description": "The request method that generated the event.",
          "type": "string"
        },
        "useragent": {
          "description": "The user agent header of the request.",
          "type": "string"
        }
      }
    },
    "Actor": {
      "description": "The agent that initiated the event. For most situations, this could be from the authorization context of the request.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The subject or username associated with the request context that generated the event.",
          "type": "string"
        }
      }
    },
    "Source": {
      "description": "The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it.",
      "type": "object",
      "properties": {
        "addr": {
          "description": "The IP or hostname and the port of the registry node that generated the event. Generally, this will be resolved by os.Hostname() along with the running port.",
          "type": "string"
        },
        "instanceID": {
          "description": "The running instance of an application. Changes after each restart.",
          "type": "string"
        }
      }
    },
    "CallbackConfig": {
      "description": "The configuration of service URI and custom headers for the webhook.",
      "required": [
        "serviceUri"
      ],
      "type": "object",
      "properties": {
        "serviceUri": {
          "description": "The service URI for the webhook to post notifications.",
          "type": "string"
        },
        "customHeaders": {
          "description": "Custom headers that will be added to the webhook notifications.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "AzureEntityResource": {
      "type": "object",
      "title": "Entity Resource",
      "description": "The resource model definition for an Azure Resource Manager resource with an etag.",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Resource Etag.",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "x-ms-client-name": "AzureEntityResource"
    },
    "CheckNameAvailabilityRequest": {
      "type": "object",
      "description": "The check availability request body.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the resource for which availability needs to be checked."
        },
        "type": {
          "type": "string",
          "description": "The resource type."
        }
      }
    },
    "CheckNameAvailabilityResponse": {
      "type": "object",
      "description": "The check availability result.",
      "properties": {
        "nameAvailable": {
          "type": "boolean",
          "description": "Indicates if the resource name is available."
        },
        "reason": {
          "type": "string",
          "description": "The reason why the given name is not available.",
          "enum": [
            "Invalid",
            "AlreadyExists"
          ],
          "x-ms-enum": {
            "name": "CheckNameAvailabilityReason",
            "modelAsString": true
          }
        },
        "message": {
          "type": "string",
          "description": "Detailed reason why the given name is available."
        }
      }
    },
    "ErrorAdditionalInfo": {
      "type": "object",
      "description": "The resource management error additional info.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The additional info type.",
          "readOnly": true
        },
        "info": {
          "type": "object",
          "description": "The additional info.",
          "readOnly": true
        }
      }
    },
    "ErrorDetail": {
      "type": "object",
      "description": "The error detail.",
      "properties": {
        "code": {
          "type": "string",
          "description": "The error code.",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "description": "The error message.",
          "readOnly": true
        },
        "target": {
          "type": "string",
          "description": "The error target.",
          "readOnly": true
        },
        "details": {
          "type": "array",
          "description": "The error details.",
          "items": {
            "$ref": "#/definitions/ErrorDetail"
          },
          "readOnly": true,
          "x-ms-identifiers": [
            "message",
            "target"
          ]
        },
        "additionalInfo": {
          "type": "array",
          "description": "The error additional info.",
          "items": {
            "$ref": "#/definitions/ErrorAdditionalInfo"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "title": "Error response",
      "description": "Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorDetail",
          "description": "The error object."
        }
      }
    },
    "Operation": {
      "type": "object",
      "title": "REST API Operation",
      "description": "Details of a REST API operation, returned from the Resource Provider Operations API",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the operation, as per Resource-Based Access Control (RBAC). Examples: \"Microsoft.Compute/virtualMachines/write\", \"Microsoft.Compute/virtualMachines/capture/action\"",
          "readOnly": true
        },
        "isDataAction": {
          "type": "boolean",
          "description": "Whether the operation applies to data-plane. This is \"true\" for data-plane operations and \"false\" for ARM/control-plane operations.",
          "readOnly": true
        },
        "display": {
          "type": "object",
          "description": "Localized display information for this particular operation.",
          "properties": {
            "provider": {
              "type": "string",
              "description": "The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring Insights\" or \"Microsoft Compute\".",
              "readOnly": true
            },
            "resource": {
              "type": "string",
              "description": "The localized friendly name of the resource type related to this operation. E.g. \"Virtual Machines\" or \"Job Schedule Collections\".",
              "readOnly": true
            },
            "operation": {
              "type": "string",
              "description": "The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create or Update Virtual Machine\", \"Restart Virtual Machine\".",
              "readOnly": true
            },
            "description": {
              "type": "string",
              "description": "The short, localized friendly description of the operation; suitable for tool tips and detailed views.",
              "readOnly": true
            }
          }
        },
        "origin": {
          "type": "string",
          "description": "The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is \"user,system\"",
          "enum": [
            "user",
            "system",
            "user,system"
          ],
          "x-ms-enum": {
            "name": "Origin",
            "modelAsString": true
          },
          "readOnly": true
        },
        "actionType": {
          "type": "string",
          "description": "Enum. Indicates the action type. \"Internal\" refers to actions that are for internal only APIs.",
          "enum": [
            "Internal"
          ],
          "x-ms-enum": {
            "name": "ActionType",
            "modelAsString": true
          },
          "readOnly": true
        }
      }
    },
    "OperationStatusResult": {
      "type": "object",
      "description": "The current status of an async operation.",
      "properties": {
        "id": {
          "type": "string",
          "format": "arm-id",
          "description": "Fully qualified ID for the async operation."
        },
        "resourceId": {
          "type": "string",
          "format": "arm-id",
          "description": "Fully qualified ID of the resource against which the original async operation was started.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Name of the async operation."
        },
        "status": {
          "type": "string",
          "description": "Operation status."
        },
        "percentComplete": {
          "type": "number",
          "description": "Percent of the operation that is complete.",
          "minimum": 0,
          "maximum": 100
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "The start time of the operation."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "The end time of the operation."
        },
        "operations": {
          "type": "array",
          "description": "The operations list.",
          "items": {
            "$ref": "#/definitions/OperationStatusResult"
          }
        },
        "error": {
          "$ref": "#/definitions/ErrorDetail",
          "description": "If present, details of the operation error."
        }
      },
      "required": [
        "status"
      ]
    },
    "Plan": {
      "type": "object",
      "description": "Plan for the resource.",
      "properties": {
        "name": {
          "type": "string",
          "description": "A user defined name of the 3rd Party Artifact that is being procured."
        },
        "publisher": {
          "type": "string",
          "description": "The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic"
        },
        "product": {
          "type": "string",
          "description": "The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. "
        },
        "promotionCode": {
          "type": "string",
          "description": "A publisher provided promotion code as provisioned in Data Market for the said product/artifact."
        },
        "version": {
          "type": "string",
          "description": "The version of the desired product/artifact."
        }
      },
      "required": [
        "name",
        "publisher",
        "product"
      ]
    },
    "ResourceModelWithAllowedPropertySet": {
      "type": "object",
      "description": "The resource model definition containing the full set of allowed properties for a resource. Except properties bag, there cannot be a top level property outside of this set.",
      "properties": {
        "managedBy": {
          "type": "string",
          "description": "The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is removed from the template since it is managed by another resource.",
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "kind": {
          "type": "string",
          "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type. E.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.",
          "pattern": "^[-\\w\\._,\\(\\)]+$",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "etag": {
          "type": "string",
          "description": "The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. ",
          "readOnly": true
        },
        "identity": {
          "$ref": "./managedidentity.json#/definitions/ManagedServiceIdentity"
        },
        "sku": {
          "$ref": "#/definitions/Sku"
        },
        "plan": {
          "$ref": "#/definitions/Plan"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TrackedResource"
        }
      ],
      "x-ms-azure-resource": true
    },
    "SkuTier": {
      "type": "string",
      "description": "This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.",
      "enum": [
        "Free",
        "Basic",
        "Standard",
        "Premium"
      ],
      "x-ms-enum": {
        "name": "SkuTier",
        "modelAsString": false
      }
    },
    "TrackedResource": {
      "type": "object",
      "title": "Tracked Resource",
      "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "location"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "encryptionProperties": {
      "type": "object",
      "description": "Configuration of key for data encryption",
      "properties": {
        "status": {
          "type": "string",
          "description": "Indicates whether or not the encryption is enabled for container registry.",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-ms-enum": {
            "name": "EncryptionStatus",
            "modelAsString": true
          }
        },
        "keyVaultProperties": {
          "$ref": "#/definitions/KeyVaultProperties",
          "description": "Key vault properties."
        }
      }
    },
    "locationData": {
      "type": "object",
      "description": "Metadata pertaining to the geographic location of the resource.",
      "properties": {
        "name": {
          "type": "string",
          "description": "A canonical name for the geographic or physical location.",
          "maxLength": 256
        },
        "city": {
          "type": "string",
          "description": "The city or locality where the resource is located."
        },
        "district": {
          "type": "string",
          "description": "The district, state, or province where the resource is located."
        },
        "countryOrRegion": {
          "type": "string",
          "description": "The country or region where the resource is located"
        }
      },
      "required": [
        "name"
      ]
    },
    "systemData": {
      "type": "object",
      "description": "Metadata pertaining to creation and last modification of the resource.",
      "properties": {
        "createdBy": {
          "type": "string",
          "description": "The identity that created the resource."
        },
        "createdByType": {
          "type": "string",
          "description": "The type of identity that created the resource.",
          "enum": [
            "User",
            "Application",
            "ManagedIdentity",
            "Key"
          ],
          "x-ms-enum": {
            "name": "createdByType",
            "modelAsString": true
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of resource creation (UTC)."
        },
        "lastModifiedBy": {
          "type": "string",
          "description": "The identity that last modified the resource."
        },
        "lastModifiedByType": {
          "type": "string",
          "description": "The type of identity that last modified the resource.",
          "enum": [
            "User",
            "Application",
            "ManagedIdentity",
            "Key"
          ],
          "x-ms-enum": {
            "name": "createdByType",
            "modelAsString": true
          }
        },
        "lastModifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of resource last modification (UTC)"
        }
      },
      "readOnly": true
    }
  }
}