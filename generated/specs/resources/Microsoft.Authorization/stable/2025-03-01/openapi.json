{
  "openapi": "3.0.0",
  "info": {
    "title": "Microsoft.Authorization",
    "version": "2025-03-01"
  },
  "components": {},
  "paths": {
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}": {
      "put": {
        "tags": [
          "PolicyDefinitions"
        ],
        "operationId": "PolicyDefinitions_CreateOrUpdate",
        "summary": "Creates or updates a policy definition in a subscription.",
        "description": "This operation creates or updates a policy definition in the given subscription with the given name.",
        "x-ms-examples": {
          "Create or update a policy definition": {
            "$ref": "./examples/createOrUpdatePolicyDefinition.json"
          },
          "Create or update a policy definition with advanced parameters": {
            "$ref": "./examples/createOrUpdatePolicyDefinitionAdvancedParams.json"
          },
          "Create or update a policy definition with external evaluation enforcement settings": {
            "$ref": "./examples/createOrUpdatePolicyDefinitionExternalEvaluationEnforcementSettings.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "policyDefinitionName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[^<>*%&:\\?.+/]*[^<>*%&:\\?.+/ ]+$",
            "description": "The name of the policy definition to create."
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyDefinition"
            },
            "description": "The policy definition properties."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Created - Returns information about the policy definition.",
            "schema": {
              "$ref": "#/definitions/PolicyDefinition"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicyDefinitions"
        ],
        "operationId": "PolicyDefinitions_Delete",
        "summary": "Deletes a policy definition in a subscription.",
        "description": "This operation deletes the policy definition in the given subscription with the given name.",
        "x-ms-examples": {
          "Delete a policy definition": {
            "$ref": "./examples/deletePolicyDefinition.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "policyDefinitionName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[^<>*%&:\\?.+/]*[^<>*%&:\\?.+/ ]+$",
            "description": "The name of the policy definition to delete."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "PolicyDefinitions"
        ],
        "operationId": "PolicyDefinitions_Get",
        "summary": "Retrieves a policy definition in a subscription.",
        "description": "This operation retrieves the policy definition in the given subscription with the given name.",
        "x-ms-examples": {
          "Retrieve a policy definition": {
            "$ref": "./examples/getPolicyDefinition.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "policyDefinitionName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[^<>*%&:\\?.+/]*[^<>*%&:\\?.+/ ]+$",
            "description": "The name of the policy definition to get."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns information about the policy definition.",
            "schema": {
              "$ref": "#/definitions/PolicyDefinition"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}": {
      "get": {
        "tags": [
          "PolicyDefinitions"
        ],
        "operationId": "PolicyDefinitions_GetBuiltIn",
        "summary": "Retrieves a built-in policy definition.",
        "description": "This operation retrieves the built-in policy definition with the given name.",
        "x-ms-examples": {
          "Retrieve a built-in policy definition": {
            "$ref": "./examples/getBuiltinPolicyDefinition.json"
          }
        },
        "parameters": [
          {
            "name": "policyDefinitionName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[^<>*%&:\\?.+/]*[^<>*%&:\\?.+/ ]+$",
            "description": "The name of the built-in policy definition to get."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns information about the built-in policy definition.",
            "schema": {
              "$ref": "#/definitions/PolicyDefinition"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}": {
      "put": {
        "tags": [
          "PolicyDefinitions"
        ],
        "operationId": "PolicyDefinitions_CreateOrUpdateAtManagementGroup",
        "summary": "Creates or updates a policy definition in a management group.",
        "description": "This operation creates or updates a policy definition in the given management group with the given name.",
        "x-ms-examples": {
          "Create or update a policy definition at management group level": {
            "$ref": "./examples/createOrUpdatePolicyDefinitionAtManagementGroup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ManagementGroupIdParameter"
          },
          {
            "name": "policyDefinitionName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[^<>*%&:\\?.+/]*[^<>*%&:\\?.+/ ]+$",
            "description": "The name of the policy definition to create."
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyDefinition"
            },
            "description": "The policy definition properties."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Created - Returns information about the policy definition.",
            "schema": {
              "$ref": "#/definitions/PolicyDefinition"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicyDefinitions"
        ],
        "operationId": "PolicyDefinitions_DeleteAtManagementGroup",
        "summary": "Deletes a policy definition in a management group.",
        "description": "This operation deletes the policy definition in the given management group with the given name.",
        "x-ms-examples": {
          "Delete a policy definition at management group level": {
            "$ref": "./examples/deletePolicyDefinitionAtManagementGroup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ManagementGroupIdParameter"
          },
          {
            "name": "policyDefinitionName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[^<>*%&:\\?.+/]*[^<>*%&:\\?.+/ ]+$",
            "description": "The name of the policy definition to delete."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "PolicyDefinitions"
        ],
        "operationId": "PolicyDefinitions_GetAtManagementGroup",
        "summary": "Retrieve a policy definition in a management group.",
        "description": "This operation retrieves the policy definition in the given management group with the given name.",
        "x-ms-examples": {
          "Retrieve a policy definition at management group level": {
            "$ref": "./examples/getPolicyDefinitionAtManagementGroup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ManagementGroupIdParameter"
          },
          {
            "name": "policyDefinitionName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[^<>*%&:\\?.+/]*[^<>*%&:\\?.+/ ]+$",
            "description": "The name of the policy definition to get."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns information about the policy definition.",
            "schema": {
              "$ref": "#/definitions/PolicyDefinition"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions": {
      "get": {
        "tags": [
          "PolicyDefinitions"
        ],
        "operationId": "PolicyDefinitions_List",
        "summary": "Retrieves policy definitions in a subscription",
        "description": "This operation retrieves a list of all the policy definitions in a given subscription that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy definitions associated with the subscription, including those that apply directly or from management groups that contain the given subscription. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given subscription. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}.",
        "x-ms-examples": {
          "List policy definitions by subscription": {
            "$ref": "./examples/listPolicyDefinitions.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/PolicyDefinitionsFilterParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of policy definitions.",
            "schema": {
              "$ref": "#/definitions/PolicyDefinitionListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/providers/Microsoft.Authorization/policyDefinitions": {
      "get": {
        "tags": [
          "PolicyDefinitions"
        ],
        "operationId": "PolicyDefinitions_ListBuiltIn",
        "summary": "Retrieve built-in policy definitions",
        "description": "This operation retrieves a list of all the built-in policy definitions that match the optional given $filter. If $filter='policyType -eq {value}' is provided, the returned list only includes all built-in policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all built-in policy definitions whose category match the {value}.",
        "x-ms-examples": {
          "List built-in policy definitions": {
            "$ref": "./examples/listBuiltInPolicyDefinitions.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/PolicyDefinitionsFilterParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of built-in policy definitions.",
            "schema": {
              "$ref": "#/definitions/PolicyDefinitionListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions": {
      "get": {
        "tags": [
          "PolicyDefinitions"
        ],
        "operationId": "PolicyDefinitions_ListByManagementGroup",
        "summary": "Retrieve policy definitions in a management group",
        "description": "This operation retrieves a list of all the policy definitions in a given management group that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy definitions associated with the management group, including those that apply directly or from management groups that contain the given management group. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given management group. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}.",
        "x-ms-examples": {
          "List policy definitions by management group": {
            "$ref": "./examples/listPolicyDefinitionsByManagementGroup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ManagementGroupIdParameter"
          },
          {
            "$ref": "#/parameters/PolicyDefinitionsFilterParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of policy definitions.",
            "schema": {
              "$ref": "#/definitions/PolicyDefinitionListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}": {
      "delete": {
        "tags": [
          "PolicyAssignments"
        ],
        "operationId": "PolicyAssignments_Delete",
        "summary": "Deletes a policy assignment.",
        "description": "This operation deletes a policy assignment, given its name and the scope it was created in. The scope of a policy assignment is the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.",
        "x-ms-examples": {
          "Delete a policy assignment": {
            "$ref": "./examples/deletePolicyAssignment.json"
          }
        },
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The scope of the policy assignment. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "policyAssignmentName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[^<>*%&:\\?.+/]*[^<>*%&:\\?.+/ ]+$",
            "description": "The name of the policy assignment to delete."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns information about the deleted assignment.",
            "schema": {
              "$ref": "#/definitions/PolicyAssignment"
            }
          },
          "204": {
            "description": "No Content - the policy assignment doesn't exist."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "PolicyAssignments"
        ],
        "operationId": "PolicyAssignments_Create",
        "summary": "Creates or updates a policy assignment.",
        "description": " This operation creates or updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group.",
        "x-ms-examples": {
          "Create or update a policy assignment": {
            "$ref": "./examples/createPolicyAssignment.json"
          },
          "Create or update a policy assignment with multiple non-compliance messages": {
            "$ref": "./examples/createPolicyAssignmentNonComplianceMessages.json"
          },
          "Create or update a policy assignment with a system assigned identity": {
            "$ref": "./examples/createPolicyAssignmentWithIdentity.json"
          },
          "Create or update a policy assignment with a user assigned identity": {
            "$ref": "./examples/createPolicyAssignmentWithUserAssignedIdentity.json"
          },
          "Create or update a policy assignment without enforcing policy effect during resource creation or update.": {
            "$ref": "./examples/createPolicyAssignmentWithoutEnforcement.json"
          },
          "Create or update a policy assignment to enforce policy effect only on enrolled resources during resource creation or update.": {
            "$ref": "./examples/createPolicyAssignmentWithEnrollEnforcement.json"
          },
          "Create or update a policy assignment with resource selectors": {
            "$ref": "./examples/createPolicyAssignmentWithResourceSelectors.json"
          },
          "Create or update a policy assignment with overrides": {
            "$ref": "./examples/createPolicyAssignmentWithOverrides.json"
          }
        },
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The scope of the policy assignment. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "policyAssignmentName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[^<>*%&:\\?.+/]*[^<>*%&:\\?.+/ ]+$",
            "description": "The name of the policy assignment."
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyAssignment"
            },
            "description": "Parameters for the policy assignment."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Created - Returns information about the new policy assignment.",
            "schema": {
              "$ref": "#/definitions/PolicyAssignment"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "PolicyAssignments"
        ],
        "operationId": "PolicyAssignments_Get",
        "summary": "Retrieves a policy assignment.",
        "description": "This operation retrieves a single policy assignment, given its name and the scope it was created at.",
        "x-ms-examples": {
          "Retrieve a policy assignment": {
            "$ref": "./examples/getPolicyAssignment.json"
          },
          "Retrieve a policy assignment with a system assigned identity": {
            "$ref": "./examples/getPolicyAssignmentWithIdentity.json"
          },
          "Retrieve a policy assignment with a user assigned identity": {
            "$ref": "./examples/getPolicyAssignmentWithUserAssignedIdentity.json"
          },
          "Retrieve a policy assignment with resource selectors": {
            "$ref": "./examples/getPolicyAssignmentWithResourceSelectors.json"
          },
          "Retrieve a policy assignment with overrides": {
            "$ref": "./examples/getPolicyAssignmentWithOverrides.json"
          }
        },
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The scope of the policy assignment. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "policyAssignmentName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[^<>*%&:\\?.+/]*[^<>*%&:\\?.+/ ]+$",
            "description": "The name of the policy assignment to get."
          },
          {
            "$ref": "#/parameters/PolicyAssignmentExpandParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns information about the policy assignment.",
            "schema": {
              "$ref": "#/definitions/PolicyAssignment"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "PolicyAssignments"
        ],
        "operationId": "PolicyAssignments_Update",
        "summary": "Updates a policy assignment.",
        "description": " This operation updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group.",
        "x-ms-examples": {
          "Update a policy assignment with a system assigned identity": {
            "$ref": "./examples/updatePolicyAssignmentWithIdentity.json"
          },
          "Update a policy assignment with a user assigned identity": {
            "$ref": "./examples/updatePolicyAssignmentWithUserAssignedIdentity.json"
          },
          "Update a policy assignment with resource selectors": {
            "$ref": "./examples/updatePolicyAssignmentWithResourceSelectors.json"
          },
          "Update a policy assignment with overrides": {
            "$ref": "./examples/updatePolicyAssignmentWithOverrides.json"
          }
        },
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The scope of the policy assignment. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "policyAssignmentName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[^<>*%&:\\?.+/]*[^<>*%&:\\?.+/ ]+$",
            "description": "The name of the policy assignment."
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyAssignmentUpdate"
            },
            "description": "Parameters for policy assignment patch request."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns information about the policy assignment.",
            "schema": {
              "$ref": "#/definitions/PolicyAssignment"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/policyAssignments": {
      "get": {
        "tags": [
          "PolicyAssignments"
        ],
        "operationId": "PolicyAssignments_ListForResourceGroup",
        "summary": "Retrieves all policy assignments that apply to a resource group.",
        "description": "This operation retrieves the list of all policy assignments associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource group, which is everything in the unfiltered list except those applied to resources contained within the resource group. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the resource group. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource group.",
        "x-ms-examples": {
          "List policy assignments that apply to a resource group": {
            "$ref": "./examples/listPolicyAssignmentsForResourceGroup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group that contains policy assignments.",
            "pattern": "^[-\\w\\._\\(\\)]+$",
            "minLength": 1,
            "maxLength": 90
          },
          {
            "$ref": "#/parameters/PolicyAssignmentsFilterParameter"
          },
          {
            "$ref": "#/parameters/PolicyAssignmentExpandParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of policy assignments.",
            "schema": {
              "$ref": "#/definitions/PolicyAssignmentListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/policyAssignments": {
      "get": {
        "tags": [
          "PolicyAssignments"
        ],
        "operationId": "PolicyAssignments_ListForResource",
        "summary": "Retrieves all policy assignments that apply to a resource.",
        "description": "This operation retrieves the list of all policy assignments associated with the specified resource in the given resource group and subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource, including those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource, which is everything in the unfiltered list except those applied to resources contained within the resource. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the resource level. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource. Three parameters plus the resource name are used to identify a specific resource. If the resource is not part of a parent resource (the more common case), the parent resource path should not be provided (or provided as ''). For example a web app could be specified as ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} == '', {resourceType} == 'sites', {resourceName} == 'MyWebApp'). If the resource is part of a parent resource, then all parameters should be provided. For example a virtual machine DNS name could be specified as ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath} == 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames', {resourceName} == 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace} == '', {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites', {resourceName} == 'MyWebApp').",
        "deprecated": false,
        "x-ms-examples": {
          "List all policy assignments that apply to a resource": {
            "$ref": "./examples/listPolicyAssignmentsForResource.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group containing the resource.",
            "pattern": "^[-\\w\\._\\(\\)]+$",
            "minLength": 1,
            "maxLength": 90
          },
          {
            "name": "resourceProviderNamespace",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The namespace of the resource provider. For example, the namespace of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)"
          },
          {
            "name": "parentResourcePath",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The parent resource path. Use empty string if there is none.",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "resourceType",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The resource type name. For example the type name of a web app is 'sites' (from Microsoft.Web/sites).",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "resourceName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^.+$",
            "description": "The name of the resource."
          },
          {
            "$ref": "#/parameters/PolicyAssignmentsFilterParameter"
          },
          {
            "$ref": "#/parameters/PolicyAssignmentExpandParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of policy assignments.",
            "schema": {
              "$ref": "#/definitions/PolicyAssignmentListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/PolicyAssignment"
      }
    },
    "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyAssignments": {
      "get": {
        "tags": [
          "PolicyAssignments"
        ],
        "operationId": "PolicyAssignments_ListForManagementGroup",
        "summary": "Retrieves all policy assignments that apply to a management group.",
        "description": "This operation retrieves the list of all policy assignments applicable to the management group that match the given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter=atScope() is provided, the returned list includes all policy assignments that are assigned to the management group or the management group's ancestors. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the management group. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the management group.",
        "x-ms-examples": {
          "List policy assignments that apply to a management group": {
            "$ref": "./examples/listPolicyAssignmentsForManagementGroup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ManagementGroupIdParameter"
          },
          {
            "$ref": "#/parameters/PolicyAssignmentsFilterParameter"
          },
          {
            "$ref": "#/parameters/PolicyAssignmentExpandParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of policy assignments.",
            "schema": {
              "$ref": "#/definitions/PolicyAssignmentListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyAssignments": {
      "get": {
        "tags": [
          "PolicyAssignments"
        ],
        "operationId": "PolicyAssignments_List",
        "summary": "Retrieves all policy assignments that apply to a subscription.",
        "description": "This operation retrieves the list of all policy assignments associated with the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the subscription, including those that apply directly or from management groups that contain the given subscription, as well as any applied to objects contained within the subscription. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the subscription, which is everything in the unfiltered list except those applied to objects contained within the subscription. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the subscription. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}.",
        "x-ms-examples": {
          "List policy assignments that apply to a subscription": {
            "$ref": "./examples/listPolicyAssignments.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/PolicyAssignmentsFilterParameter"
          },
          {
            "$ref": "#/parameters/PolicyAssignmentExpandParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of policy assignments.",
            "schema": {
              "$ref": "#/definitions/PolicyAssignmentListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/PolicyAssignment"
      }
    },
    "/{policyAssignmentId}": {
      "delete": {
        "tags": [
          "PolicyAssignments"
        ],
        "operationId": "PolicyAssignments_DeleteById",
        "summary": "Deletes a policy assignment.",
        "description": "This operation deletes the policy with the given ID. Policy assignment IDs have this format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid formats for {scope} are: '/providers/Microsoft.Management/managementGroups/{managementGroup}' (management group), '/subscriptions/{subscriptionId}' (subscription), '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' (resource group), or '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}' (resource).",
        "x-ms-examples": {
          "Delete a policy assignment by ID": {
            "$ref": "./examples/deletePolicyAssignmentById.json"
          }
        },
        "parameters": [
          {
            "name": "policyAssignmentId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the policy assignment to delete. Use the format '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.",
            "x-ms-skip-url-encoding": true
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns information about the policy assignment.",
            "schema": {
              "$ref": "#/definitions/PolicyAssignment"
            }
          },
          "204": {
            "description": "No Content - the policy assignment doesn't exist."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "PolicyAssignments"
        ],
        "operationId": "PolicyAssignments_CreateById",
        "summary": "Creates or updates a policy assignment.",
        "description": "This operation creates or updates the policy assignment with the given ID. Policy assignments made on a scope apply to all resources contained in that scope. For example, when you assign a policy to a resource group that policy applies to all resources in the group. Policy assignment IDs have this format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.",
        "x-ms-examples": {
          "Create or update policy assignment by ID": {
            "$ref": "./examples/createPolicyAssignmentById.json"
          },
          "Create or update policy assignment with a managed identity by ID": {
            "$ref": "./examples/createPolicyAssignmentWithIdentityById.json"
          }
        },
        "parameters": [
          {
            "name": "policyAssignmentId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the policy assignment to create. Use the format '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyAssignment"
            },
            "description": "Parameters for policy assignment."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Created - Returns information about the policy assignment.",
            "schema": {
              "$ref": "#/definitions/PolicyAssignment"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "PolicyAssignments"
        ],
        "operationId": "PolicyAssignments_GetById",
        "summary": "Retrieves the policy assignment with the given ID.",
        "description": "The operation retrieves the policy assignment with the given ID. Policy assignment IDs have this format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.",
        "x-ms-examples": {
          "Retrieve a policy assignment by ID": {
            "$ref": "./examples/getPolicyAssignmentById.json"
          },
          "Retrieve a policy assignment with a managed identity by ID": {
            "$ref": "./examples/getPolicyAssignmentWithIdentityById.json"
          }
        },
        "parameters": [
          {
            "name": "policyAssignmentId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the policy assignment to get. Use the format '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.",
            "x-ms-skip-url-encoding": true
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns information about the policy assignment.",
            "schema": {
              "$ref": "#/definitions/PolicyAssignment"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "PolicyAssignments"
        ],
        "operationId": "PolicyAssignments_UpdateById",
        "summary": "Updates a policy assignment.",
        "description": "This operation updates the policy assignment with the given ID. Policy assignments made on a scope apply to all resources contained in that scope. For example, when you assign a policy to a resource group that policy applies to all resources in the group. Policy assignment IDs have this format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.",
        "x-ms-examples": {
          "Update policy assignment with a managed identity by ID": {
            "$ref": "./examples/updatePolicyAssignmentWithIdentityById.json"
          }
        },
        "parameters": [
          {
            "name": "policyAssignmentId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the policy assignment to update. Use the format '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyAssignmentUpdate"
            },
            "description": "Parameters for policy assignment patch request."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns information about the policy assignment.",
            "schema": {
              "$ref": "#/definitions/PolicyAssignment"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/providers/Microsoft.Authorization/listPolicySetDefinitionVersions": {
      "post": {
        "tags": [
          "PolicySetDefinitionVersions"
        ],
        "operationId": "PolicySetDefinitionVersions_ListAllBuiltins",
        "summary": "Lists all built-in policy set definition versions.",
        "description": "This operation lists all the built-in policy set definition versions for all built-in policy set definitions.",
        "x-ms-examples": {
          "List all built-in policy definition versions": {
            "$ref": "./examples/listAllBuiltInPolicySetDefinitionVersions.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of policy set definition versions.",
            "schema": {
              "$ref": "#/definitions/PolicySetDefinitionVersionListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/providers/Microsoft.Management/managementGroups/{managementGroupName}/providers/Microsoft.Authorization/listPolicySetDefinitionVersions": {
      "post": {
        "tags": [
          "PolicySetDefinitionVersions"
        ],
        "operationId": "PolicySetDefinitionVersions_ListAllAtManagementGroup",
        "summary": "Lists all policy set definition versions at management group scope.",
        "description": "This operation lists all the policy set definition versions for all policy set definitions at the management group scope.",
        "x-ms-examples": {
          "List all policy definition versions at management group": {
            "$ref": "./examples/listAllPolicySetDefinitionVersionsByManagementGroup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ManagementGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of policy set definition versions.",
            "schema": {
              "$ref": "#/definitions/PolicySetDefinitionVersionListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/listPolicySetDefinitionVersions": {
      "post": {
        "tags": [
          "PolicySetDefinitionVersions"
        ],
        "operationId": "PolicySetDefinitionVersions_ListAll",
        "summary": "Lists all policy set definition versions within a subscription.",
        "description": "This operation lists all the policy set definition versions for all policy set definitions within a subscription.",
        "x-ms-examples": {
          "List all policy definition versions at subscription": {
            "$ref": "./examples/listAllPolicySetDefinitionVersions.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of policy set definition versions.",
            "schema": {
              "$ref": "#/definitions/PolicySetDefinitionVersionListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}/versions/{policyDefinitionVersion}": {
      "put": {
        "tags": [
          "PolicySetDefinitionVersions"
        ],
        "operationId": "PolicySetDefinitionVersions_CreateOrUpdate",
        "summary": "Creates or updates a policy set definition version.",
        "description": "This operation creates or updates a policy set definition version in the given subscription with the given name and version.",
        "x-ms-examples": {
          "Create or update a policy set definition version": {
            "$ref": "./examples/createOrUpdatePolicySetDefinitionVersion.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionName"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionVersion"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicySetDefinitionVersion"
            },
            "description": "The policy set definition properties."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Created - Returns information about the policy set definition version.",
            "schema": {
              "$ref": "#/definitions/PolicySetDefinitionVersion"
            }
          },
          "200": {
            "description": "OK - Successfully updated policy set definition version.",
            "schema": {
              "$ref": "#/definitions/PolicySetDefinitionVersion"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicySetDefinitionVersions"
        ],
        "operationId": "PolicySetDefinitionVersions_Delete",
        "summary": "Deletes a policy set definition version.",
        "description": "This operation deletes the policy set definition version in the given subscription with the given name and version.",
        "x-ms-examples": {
          "Delete a policy set definition version": {
            "$ref": "./examples/deletePolicySetDefinitionVersion.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionName"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionVersion"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - the policy set definition doesn't exist in the subscription."
          },
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "PolicySetDefinitionVersions"
        ],
        "operationId": "PolicySetDefinitionVersions_Get",
        "summary": "Retrieves a policy set definition version.",
        "description": "This operation retrieves the policy set definition version in the given subscription with the given name and version.",
        "x-ms-examples": {
          "Retrieve a policy set definition version": {
            "$ref": "./examples/getPolicySetDefinitionVersion.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionName"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionVersion"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionsExpandParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns information about the policy set definition version.",
            "schema": {
              "$ref": "#/definitions/PolicySetDefinitionVersion"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}/versions/{policyDefinitionVersion}": {
      "get": {
        "tags": [
          "PolicySetDefinitionVersions"
        ],
        "operationId": "PolicySetDefinitionVersions_GetBuiltIn",
        "summary": "Retrieves a built in policy set definition version.",
        "description": "This operation retrieves the built-in policy set definition version with the given name and version.",
        "x-ms-examples": {
          "Retrieve a built-in policy set definition version": {
            "$ref": "./examples/getBuiltInPolicySetDefinitionVersion.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/PolicySetDefinitionName"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionVersion"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionsExpandParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns information about the built in policy set definition version.",
            "schema": {
              "$ref": "#/definitions/PolicySetDefinitionVersion"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}/versions": {
      "get": {
        "tags": [
          "PolicySetDefinitionVersions"
        ],
        "operationId": "PolicySetDefinitionVersions_List",
        "summary": "Retrieves the policy set definition versions for a given policy set definition in a subscription.",
        "description": "This operation retrieves a list of all the policy set definition versions for the given policy set definition.",
        "x-ms-examples": {
          "List policy set definitions": {
            "$ref": "./examples/listPolicySetDefinitionVersions.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionName"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionsExpandParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of policy set definition versions.",
            "schema": {
              "$ref": "#/definitions/PolicySetDefinitionVersionListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}/versions": {
      "get": {
        "tags": [
          "PolicySetDefinitionVersions"
        ],
        "operationId": "PolicySetDefinitionVersions_ListBuiltIn",
        "summary": "Retrieves built-in policy set definition versions.",
        "description": "This operation retrieves a list of all the built-in policy set definition versions for the given built-in policy set definition.",
        "x-ms-examples": {
          "List built-in policy set definitions": {
            "$ref": "./examples/listBuiltInPolicySetDefinitionVersions.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/PolicySetDefinitionName"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionsExpandParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of built in policy set definition versions.",
            "schema": {
              "$ref": "#/definitions/PolicySetDefinitionVersionListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/providers/Microsoft.Management/managementGroups/{managementGroupName}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}/versions/{policyDefinitionVersion}": {
      "put": {
        "tags": [
          "PolicySetDefinitionVersions"
        ],
        "operationId": "PolicySetDefinitionVersions_CreateOrUpdateAtManagementGroup",
        "summary": "Creates or updates a policy set definition version.",
        "description": "This operation creates or updates a policy set definition version in the given management group with the given name and version.",
        "x-ms-examples": {
          "Create or update a policy set definition version at management group level": {
            "$ref": "./examples/createOrUpdatePolicySetDefinitionVersionAtManagementGroup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ManagementGroupNameParameter"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionName"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionVersion"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicySetDefinitionVersion"
            },
            "description": "The policy set definition version properties."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Created - Returns information about the policy set definition version.",
            "schema": {
              "$ref": "#/definitions/PolicySetDefinitionVersion"
            }
          },
          "200": {
            "description": "OK - Successfully updated policy set definition version.",
            "schema": {
              "$ref": "#/definitions/PolicySetDefinitionVersion"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicySetDefinitionVersions"
        ],
        "operationId": "PolicySetDefinitionVersions_DeleteAtManagementGroup",
        "summary": "Deletes a policy set definition version.",
        "description": "This operation deletes the policy set definition version in the given management group with the given name and version.",
        "x-ms-examples": {
          "Delete a policy set definition version at management group level": {
            "$ref": "./examples/deletePolicySetDefinitionVersionAtManagementGroup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ManagementGroupNameParameter"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionName"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionVersion"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - the policy set definition doesn't exist in the subscription."
          },
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "PolicySetDefinitionVersions"
        ],
        "operationId": "PolicySetDefinitionVersions_GetAtManagementGroup",
        "summary": "Retrieves a policy set definition version.",
        "description": "This operation retrieves the policy set definition version in the given management group with the given name and version.",
        "x-ms-examples": {
          "Retrieve a policy set definition version at management group level": {
            "$ref": "./examples/getPolicySetDefinitionVersionAtManagementGroup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ManagementGroupNameParameter"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionName"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionVersion"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionsExpandParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns information about the policy set definition version.",
            "schema": {
              "$ref": "#/definitions/PolicySetDefinitionVersion"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/providers/Microsoft.Management/managementGroups/{managementGroupName}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}/versions": {
      "get": {
        "tags": [
          "PolicySetDefinitionVersions"
        ],
        "operationId": "PolicySetDefinitionVersions_ListByManagementGroup",
        "summary": "Retrieves all policy set definition versions for a given policy set definition in a management group.",
        "description": "This operation retrieves a list of all the policy set definition versions for the given policy set definition in a given management group.",
        "x-ms-examples": {
          "List policy set definitions at management group level": {
            "$ref": "./examples/listPolicySetDefinitionVersionsByManagementGroup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ManagementGroupNameParameter"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionName"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionsExpandParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of policy set definition versions.",
            "schema": {
              "$ref": "#/definitions/PolicySetDefinitionVersionListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/acquirePolicyToken": {
      "post": {
        "tags": [
          "PolicyTokens"
        ],
        "operationId": "PolicyTokens_Acquire",
        "summary": "Acquires a policy token.",
        "description": "This operation acquires a policy token in the given subscription for the given request body.",
        "x-ms-examples": {
          "Acquire a policy token": {
            "$ref": "./examples/acquirePolicyToken.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyTokenRequest"
            },
            "description": "The policy token properties."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully acquired the policy token.",
            "schema": {
              "$ref": "#/definitions/PolicyTokenResponse"
            }
          },
          "202": {
            "description": "Accepted and the request for acquiring the policy token is being processed asynchronously."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}": {
      "put": {
        "tags": [
          "PolicySetDefinitions"
        ],
        "operationId": "PolicySetDefinitions_CreateOrUpdate",
        "summary": "Creates or updates a policy set definition.",
        "description": "This operation creates or updates a policy set definition in the given subscription with the given name.",
        "x-ms-examples": {
          "Create or update a policy set definition": {
            "$ref": "./examples/createOrUpdatePolicySetDefinition.json"
          },
          "Create or update a policy set definition with groups": {
            "$ref": "./examples/createOrUpdatePolicySetDefinitionWithGroups.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "policySetDefinitionName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[^<>*%&:\\?.+/]*[^<>*%&:\\?.+/ ]+$",
            "description": "The name of the policy set definition to create."
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicySetDefinition"
            },
            "description": "The policy set definition properties."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Created - Returns information about the policy set definition.",
            "schema": {
              "$ref": "#/definitions/PolicySetDefinition"
            }
          },
          "200": {
            "description": "OK - Returns information about the policy set definition.",
            "schema": {
              "$ref": "#/definitions/PolicySetDefinition"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicySetDefinitions"
        ],
        "operationId": "PolicySetDefinitions_Delete",
        "summary": "Deletes a policy set definition.",
        "description": "This operation deletes the policy set definition in the given subscription with the given name.",
        "x-ms-examples": {
          "Delete a policy set definition": {
            "$ref": "./examples/deletePolicySetDefinition.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "policySetDefinitionName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[^<>*%&:\\?.+/]*[^<>*%&:\\?.+/ ]+$",
            "description": "The name of the policy set definition to delete."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - the policy set definition doesn't exist in the subscription."
          },
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "PolicySetDefinitions"
        ],
        "operationId": "PolicySetDefinitions_Get",
        "summary": "Retrieves a policy set definition.",
        "description": "This operation retrieves the policy set definition in the given subscription with the given name.",
        "x-ms-examples": {
          "Retrieve a policy set definition": {
            "$ref": "./examples/getPolicySetDefinition.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "name": "policySetDefinitionName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[^<>*%&:\\?.+/]*[^<>*%&:\\?.+/ ]+$",
            "description": "The name of the policy set definition to get."
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionsExpandParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns information about the policy set definition.",
            "schema": {
              "$ref": "#/definitions/PolicySetDefinition"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}": {
      "get": {
        "tags": [
          "PolicySetDefinitions"
        ],
        "operationId": "PolicySetDefinitions_GetBuiltIn",
        "summary": "Retrieves a built in policy set definition.",
        "description": "This operation retrieves the built-in policy set definition with the given name.",
        "x-ms-examples": {
          "Retrieve a built-in policy set definition": {
            "$ref": "./examples/getBuiltInPolicySetDefinition.json"
          }
        },
        "parameters": [
          {
            "name": "policySetDefinitionName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[^<>*%&:\\?.+/]*[^<>*%&:\\?.+/ ]+$",
            "description": "The name of the policy set definition to get."
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionsExpandParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns information about the built in policy set definition.",
            "schema": {
              "$ref": "#/definitions/PolicySetDefinition"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions": {
      "get": {
        "tags": [
          "PolicySetDefinitions"
        ],
        "operationId": "PolicySetDefinitions_List",
        "summary": "Retrieves the policy set definitions for a subscription.",
        "description": "This operation retrieves a list of all the policy set definitions in a given subscription that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy set definitions associated with the subscription, including those that apply directly or from management groups that contain the given subscription. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given subscription. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn and Custom. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}.",
        "x-ms-examples": {
          "List policy set definitions": {
            "$ref": "./examples/listPolicySetDefinitions.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionsFilterParameter"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionsExpandParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of policy set definitions.",
            "schema": {
              "$ref": "#/definitions/PolicySetDefinitionListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/providers/Microsoft.Authorization/policySetDefinitions": {
      "get": {
        "tags": [
          "PolicySetDefinitions"
        ],
        "operationId": "PolicySetDefinitions_ListBuiltIn",
        "summary": "Retrieves built-in policy set definitions.",
        "description": "This operation retrieves a list of all the built-in policy set definitions that match the optional given $filter. If $filter='category -eq {value}' is provided, the returned list only includes all built-in policy set definitions whose category match the {value}.",
        "x-ms-examples": {
          "List built-in policy set definitions": {
            "$ref": "./examples/listBuiltInPolicySetDefinitions.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionsFilterParameter"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionsExpandParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of built in policy set definitions.",
            "schema": {
              "$ref": "#/definitions/PolicySetDefinitionListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}": {
      "put": {
        "tags": [
          "PolicySetDefinitions"
        ],
        "operationId": "PolicySetDefinitions_CreateOrUpdateAtManagementGroup",
        "summary": "Creates or updates a policy set definition.",
        "description": "This operation creates or updates a policy set definition in the given management group with the given name.",
        "x-ms-examples": {
          "Create or update a policy set definition at management group level": {
            "$ref": "./examples/createOrUpdatePolicySetDefinitionAtManagementGroup.json"
          },
          "Create or update a policy set definition with groups at management group level": {
            "$ref": "./examples/createOrUpdatePolicySetDefinitionWithGroupsAtManagementGroup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ManagementGroupIdParameter"
          },
          {
            "name": "policySetDefinitionName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[^<>*%&:\\?.+/]*[^<>*%&:\\?.+/ ]+$",
            "description": "The name of the policy set definition to create."
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicySetDefinition"
            },
            "description": "The policy set definition properties."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Created - Returns information about the policy set definition.",
            "schema": {
              "$ref": "#/definitions/PolicySetDefinition"
            }
          },
          "200": {
            "description": "OK - Returns information about the policy set definition.",
            "schema": {
              "$ref": "#/definitions/PolicySetDefinition"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicySetDefinitions"
        ],
        "operationId": "PolicySetDefinitions_DeleteAtManagementGroup",
        "summary": "Deletes a policy set definition.",
        "description": "This operation deletes the policy set definition in the given management group with the given name.",
        "x-ms-examples": {
          "Delete a policy set definition at management group level": {
            "$ref": "./examples/deletePolicySetDefinitionAtManagementGroup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ManagementGroupIdParameter"
          },
          {
            "name": "policySetDefinitionName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[^<>*%&:\\?.+/]*[^<>*%&:\\?.+/ ]+$",
            "description": "The name of the policy set definition to delete."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - the policy set definition doesn't exist in the subscription."
          },
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "PolicySetDefinitions"
        ],
        "operationId": "PolicySetDefinitions_GetAtManagementGroup",
        "summary": "Retrieves a policy set definition.",
        "description": "This operation retrieves the policy set definition in the given management group with the given name.",
        "x-ms-examples": {
          "Retrieve a policy set definition at management group level": {
            "$ref": "./examples/getPolicySetDefinitionAtManagementGroup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ManagementGroupIdParameter"
          },
          {
            "name": "policySetDefinitionName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[^<>*%&:\\?.+/]*[^<>*%&:\\?.+/ ]+$",
            "description": "The name of the policy set definition to get."
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionsExpandParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns information about the policy set definition.",
            "schema": {
              "$ref": "#/definitions/PolicySetDefinition"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions": {
      "get": {
        "tags": [
          "PolicySetDefinitions"
        ],
        "operationId": "PolicySetDefinitions_ListByManagementGroup",
        "summary": "Retrieves all policy set definitions in management group.",
        "description": "This operation retrieves a list of all the policy set definitions in a given management group that match the optional given $filter. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy set definitions associated with the management group, including those that apply directly or from management groups that contain the given management group. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given management group. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn and Custom. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}.",
        "x-ms-examples": {
          "List policy set definitions at management group level": {
            "$ref": "./examples/listPolicySetDefinitionsByManagementGroup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ManagementGroupIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionsFilterParameter"
          },
          {
            "$ref": "#/parameters/PolicySetDefinitionsExpandParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of policy set definitions.",
            "schema": {
              "$ref": "#/definitions/PolicySetDefinitionListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/providers/Microsoft.Authorization/listPolicyDefinitionVersions": {
      "post": {
        "tags": [
          "PolicyDefinitionVersions"
        ],
        "operationId": "PolicyDefinitionVersions_ListAllBuiltins",
        "summary": "Lists all built-in policy definition versions.",
        "description": "This operation lists all the built-in policy definition versions for all built-in policy definitions.",
        "x-ms-examples": {
          "List all built-in policy definition versions": {
            "$ref": "./examples/listAllBuiltInPolicyDefinitionVersions.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of policy definition versions.",
            "schema": {
              "$ref": "#/definitions/PolicyDefinitionVersionListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/providers/Microsoft.Management/managementGroups/{managementGroupName}/providers/Microsoft.Authorization/listPolicyDefinitionVersions": {
      "post": {
        "tags": [
          "PolicyDefinitionVersions"
        ],
        "operationId": "PolicyDefinitionVersions_ListAllAtManagementGroup",
        "summary": "Lists all policy definition versions at management group scope.",
        "description": "This operation lists all the policy definition versions for all policy definitions at the management group scope.",
        "x-ms-examples": {
          "List all policy definition versions at management group": {
            "$ref": "./examples/listAllPolicyDefinitionVersionsByManagementGroup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ManagementGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of policy definition versions.",
            "schema": {
              "$ref": "#/definitions/PolicyDefinitionVersionListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/listPolicyDefinitionVersions": {
      "post": {
        "tags": [
          "PolicyDefinitionVersions"
        ],
        "operationId": "PolicyDefinitionVersions_ListAll",
        "summary": "Lists all policy definition versions within a subscription.",
        "description": "This operation lists all the policy definition versions for all policy definitions within a subscription.",
        "x-ms-examples": {
          "List all policy definition versions at subscription": {
            "$ref": "./examples/listAllPolicyDefinitionVersions.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of policy definition versions.",
            "schema": {
              "$ref": "#/definitions/PolicyDefinitionVersionListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}/versions/{policyDefinitionVersion}": {
      "put": {
        "tags": [
          "PolicyDefinitionVersions"
        ],
        "operationId": "PolicyDefinitionVersions_CreateOrUpdate",
        "summary": "Creates or updates a policy definition in a subscription.",
        "description": "This operation creates or updates a policy definition in the given subscription with the given name.",
        "x-ms-examples": {
          "Create or update a policy definition version": {
            "$ref": "./examples/createOrUpdatePolicyDefinitionVersion.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/PolicyDefinitionName"
          },
          {
            "$ref": "#/parameters/PolicyDefinitionVersion"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyDefinitionVersion"
            },
            "description": "The policy definition properties."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Created - Returns information about the policy definition version.",
            "schema": {
              "$ref": "#/definitions/PolicyDefinitionVersion"
            }
          },
          "200": {
            "description": "OK - Successfully updated policy definition version.",
            "schema": {
              "$ref": "#/definitions/PolicyDefinitionVersion"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicyDefinitionVersions"
        ],
        "operationId": "PolicyDefinitionVersions_Delete",
        "summary": "Deletes a policy definition version in a subscription.",
        "description": "This operation deletes the policy definition version in the given subscription with the given name.",
        "x-ms-examples": {
          "Delete a policy definition version": {
            "$ref": "./examples/deletePolicyDefinitionVersion.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/PolicyDefinitionName"
          },
          {
            "$ref": "#/parameters/PolicyDefinitionVersion"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "PolicyDefinitionVersions"
        ],
        "operationId": "PolicyDefinitionVersions_Get",
        "summary": "Retrieves a policy definition version in a subscription.",
        "description": "This operation retrieves the policy definition version in the given subscription with the given name.",
        "x-ms-examples": {
          "Retrieve a policy definition version": {
            "$ref": "./examples/getPolicyDefinitionVersion.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/PolicyDefinitionName"
          },
          {
            "$ref": "#/parameters/PolicyDefinitionVersion"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns information about the policy definition.",
            "schema": {
              "$ref": "#/definitions/PolicyDefinitionVersion"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}/versions/{policyDefinitionVersion}": {
      "get": {
        "tags": [
          "PolicyDefinitionVersions"
        ],
        "operationId": "PolicyDefinitionVersions_GetBuiltIn",
        "summary": "Retrieves a built-in policy definition version.",
        "description": "This operation retrieves the built-in policy definition version with the given name.",
        "x-ms-examples": {
          "Retrieve a built-in policy definition version": {
            "$ref": "./examples/getBuiltinPolicyDefinitionVersion.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/PolicyDefinitionName"
          },
          {
            "$ref": "#/parameters/PolicyDefinitionVersion"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns information about the built-in policy definition.",
            "schema": {
              "$ref": "#/definitions/PolicyDefinitionVersion"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/providers/Microsoft.Management/managementGroups/{managementGroupName}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}/versions/{policyDefinitionVersion}": {
      "put": {
        "tags": [
          "PolicyDefinitionVersions"
        ],
        "operationId": "PolicyDefinitionVersions_CreateOrUpdateAtManagementGroup",
        "summary": "Creates or updates a policy definition version in a management group.",
        "description": "This operation creates or updates a policy definition version in the given management group with the given name.",
        "x-ms-examples": {
          "Create or update a policy definition version at management group level": {
            "$ref": "./examples/createOrUpdatePolicyDefinitionVersionAtManagementGroup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ManagementGroupNameParameter"
          },
          {
            "$ref": "#/parameters/PolicyDefinitionName"
          },
          {
            "$ref": "#/parameters/PolicyDefinitionVersion"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyDefinitionVersion"
            },
            "description": "The policy definition properties."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Created - Returns information about the policy definition version.",
            "schema": {
              "$ref": "#/definitions/PolicyDefinitionVersion"
            }
          },
          "200": {
            "description": "OK - Successfully updated policy definition version.",
            "schema": {
              "$ref": "#/definitions/PolicyDefinitionVersion"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PolicyDefinitionVersions"
        ],
        "operationId": "PolicyDefinitionVersions_DeleteAtManagementGroup",
        "summary": "Deletes a policy definition in a management group.",
        "description": "This operation deletes the policy definition in the given management group with the given name.",
        "x-ms-examples": {
          "Delete a policy definition version at management group level": {
            "$ref": "./examples/deletePolicyDefinitionVersionAtManagementGroup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ManagementGroupNameParameter"
          },
          {
            "$ref": "#/parameters/PolicyDefinitionName"
          },
          {
            "$ref": "#/parameters/PolicyDefinitionVersion"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "PolicyDefinitionVersions"
        ],
        "operationId": "PolicyDefinitionVersions_GetAtManagementGroup",
        "summary": "Retrieve a policy definition version in a management group.",
        "description": "This operation retrieves the policy definition version in the given management group with the given name.",
        "x-ms-examples": {
          "Retrieve a policy definition version at management group level": {
            "$ref": "./examples/getPolicyDefinitionVersionAtManagementGroup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ManagementGroupNameParameter"
          },
          {
            "$ref": "#/parameters/PolicyDefinitionName"
          },
          {
            "$ref": "#/parameters/PolicyDefinitionVersion"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns information about the policy definition.",
            "schema": {
              "$ref": "#/definitions/PolicyDefinitionVersion"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}/versions": {
      "get": {
        "tags": [
          "PolicyDefinitionVersions"
        ],
        "operationId": "PolicyDefinitionVersions_List",
        "summary": "Retrieves policy definition versions for a given policy definition in a subscription",
        "description": "This operation retrieves a list of all the policy definition versions for the given policy definition.",
        "x-ms-examples": {
          "List policy definition versions by subscription": {
            "$ref": "./examples/listPolicyDefinitionVersions.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/PolicyDefinitionName"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of policy definition versions.",
            "schema": {
              "$ref": "#/definitions/PolicyDefinitionVersionListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}/versions": {
      "get": {
        "tags": [
          "PolicyDefinitionVersions"
        ],
        "operationId": "PolicyDefinitionVersions_ListBuiltIn",
        "summary": "Retrieve built-in policy definition versions",
        "description": "This operation retrieves a list of all the built-in policy definition versions for the given policy definition.",
        "x-ms-examples": {
          "List built-in policy definition versions": {
            "$ref": "./examples/listBuiltInPolicyDefinitionVersions.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/PolicyDefinitionName"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of built-in policy definition versions.",
            "schema": {
              "$ref": "#/definitions/PolicyDefinitionVersionListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/providers/Microsoft.Management/managementGroups/{managementGroupName}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}/versions": {
      "get": {
        "tags": [
          "PolicyDefinitionVersions"
        ],
        "operationId": "PolicyDefinitionVersions_ListByManagementGroup",
        "summary": "Retrieve policy definition versions in a management group policy definition.",
        "description": "This operation retrieves a list of all the policy definition versions for the given policy definition in the given management group.",
        "x-ms-examples": {
          "List policy definition versions by management group": {
            "$ref": "./examples/listPolicyDefinitionVersionsByManagementGroup.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ManagementGroupNameParameter"
          },
          {
            "$ref": "#/parameters/PolicyDefinitionName"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns an array of policy definition versions.",
            "schema": {
              "$ref": "#/definitions/PolicyDefinitionVersionListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v6/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    }
  },
  "parameters": {
    "ManagementGroupIdParameter": {
      "name": "managementGroupId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The ID of the management group.",
      "x-ms-parameter-location": "method"
    },
    "PolicyDefinitionsFilterParameter": {
      "name": "$filter",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy definitions whose category match the {value}.",
      "x-ms-skip-url-encoding": true,
      "x-ms-parameter-location": "method"
    },
    "TopParameter": {
      "name": "$top",
      "in": "query",
      "required": false,
      "type": "integer",
      "format": "int32",
      "minimum": 1,
      "maximum": 1000,
      "description": "Maximum number of records to return. When the $top filter is not provided, it will return 500 records.",
      "x-ms-parameter-location": "method"
    },
    "PolicyAssignmentsFilterParameter": {
      "name": "$filter",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}.",
      "x-ms-skip-url-encoding": true,
      "x-ms-parameter-location": "method"
    },
    "PolicyAssignmentExpandParameter": {
      "name": "$expand",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "Comma-separated list of additional properties to be included in the response. Supported values are 'LatestDefinitionVersion, EffectiveDefinitionVersion'.",
      "x-ms-parameter-location": "method"
    },
    "PolicySetDefinitionName": {
      "name": "policySetDefinitionName",
      "in": "path",
      "required": true,
      "type": "string",
      "pattern": "^[^<>*%&:\\?.+/]*[^<>*%&:\\?.+/ ]+$",
      "description": "The name of the policy set definition.",
      "x-ms-parameter-location": "method"
    },
    "PolicySetDefinitionVersion": {
      "name": "policyDefinitionVersion",
      "in": "path",
      "required": true,
      "type": "string",
      "pattern": "^\\d+\\.\\d+\\.\\d+$",
      "description": "The policy set definition version.  The format is x.y.z where x is the major version number, y is the minor version number, and z is the patch number",
      "x-ms-parameter-location": "method"
    },
    "PolicySetDefinitionsFilterParameter": {
      "name": "$filter",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope. If $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}.",
      "x-ms-skip-url-encoding": true,
      "x-ms-parameter-location": "method"
    },
    "PolicySetDefinitionsExpandParameter": {
      "name": "$expand",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "Comma-separated list of additional properties to be included in the response. Supported values are 'LatestDefinitionVersion, EffectiveDefinitionVersion'.",
      "x-ms-parameter-location": "method"
    },
    "PolicyDefinitionName": {
      "name": "policyDefinitionName",
      "in": "path",
      "required": true,
      "type": "string",
      "pattern": "^[^<>*%&:\\?.+/]*[^<>*%&:\\?.+/ ]+$",
      "description": "The name of the policy definition.",
      "x-ms-parameter-location": "method"
    },
    "PolicyDefinitionVersion": {
      "name": "policyDefinitionVersion",
      "in": "path",
      "required": true,
      "type": "string",
      "pattern": "^\\d+\\.\\d+\\.\\d+$",
      "description": "The policy definition version.  The format is x.y.z where x is the major version number, y is the minor version number, and z is the patch number",
      "x-ms-parameter-location": "method"
    },
    "ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1
    },
    "If-Match": {
      "name": "ifMatch",
      "in": "header",
      "description": "The If-Match header that makes a request conditional.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "If-None-Match": {
      "name": "ifNoneMatch",
      "in": "header",
      "description": "The If-None-Match header that makes a request conditional.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "LocationParameter": {
      "name": "location",
      "in": "path",
      "description": "The name of the Azure region.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method"
    },
    "ManagementGroupNameParameter": {
      "name": "managementGroupName",
      "in": "path",
      "description": "The name of the management group. The name is case insensitive.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 90,
      "x-ms-parameter-location": "method"
    },
    "OperationIdParameter": {
      "name": "operationId",
      "in": "path",
      "description": "The ID of an ongoing async operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method"
    },
    "ResourceGroupNameParameter": {
      "name": "resourceGroupName",
      "in": "path",
      "description": "The name of the resource group. The name is case insensitive.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 90,
      "x-ms-parameter-location": "method"
    },
    "ScopeParameter": {
      "name": "scope",
      "in": "path",
      "description": "The scope at which the operation is performed.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true
    },
    "SubscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "description": "The ID of the target subscription. The value must be an UUID.",
      "required": true,
      "type": "string",
      "format": "uuid"
    },
    "TenantIdParameter": {
      "name": "tenantId",
      "in": "path",
      "description": "The Azure tenant ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)",
      "required": true,
      "type": "string",
      "format": "uuid",
      "x-ms-parameter-location": "method"
    }
  },
  "definitions": {
    "PolicyDefinitionProperties": {
      "type": "object",
      "properties": {
        "policyType": {
          "type": "string",
          "description": "The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.",
          "enum": [
            "NotSpecified",
            "BuiltIn",
            "Custom",
            "Static"
          ],
          "x-ms-enum": {
            "name": "policyType",
            "modelAsString": true
          }
        },
        "mode": {
          "type": "string",
          "description": "The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.",
          "default": "Indexed"
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the policy definition."
        },
        "description": {
          "type": "string",
          "description": "The policy definition description."
        },
        "policyRule": {
          "type": "object",
          "description": "The policy rule."
        },
        "metadata": {
          "type": "object",
          "description": "The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs."
        },
        "parameters": {
          "description": "The parameter definitions for parameters used in the policy rule. The keys are the parameter names.",
          "$ref": "#/definitions/ParameterDefinitions"
        },
        "version": {
          "type": "string",
          "description": "The policy definition version in #.#.# format."
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of available versions for this policy definition."
        },
        "externalEvaluationEnforcementSettings": {
          "description": "The details of the source of external evaluation results required by the policy during enforcement evaluation.",
          "$ref": "#/definitions/ExternalEvaluationEnforcementSettings"
        }
      },
      "description": "The policy definition properties."
    },
    "ParameterDefinitionsValue": {
      "type": "object",
      "properties": {
        "type": {
          "description": "The data type of the parameter.",
          "type": "string",
          "enum": [
            "String",
            "Array",
            "Object",
            "Boolean",
            "Integer",
            "Float",
            "DateTime"
          ],
          "x-ms-enum": {
            "name": "parameterType",
            "modelAsString": true
          }
        },
        "allowedValues": {
          "type": "array",
          "items": {
            "description": "The collection of allowed values for the parameter."
          },
          "x-ms-identifiers": [],
          "description": "The allowed values for the parameter."
        },
        "defaultValue": {
          "description": "The default value for the parameter if no value is provided."
        },
        "schema": {
          "type": "object",
          "description": "Provides validation of parameter inputs during assignment using a self-defined JSON schema. This property is only supported for object-type parameters and follows the Json.NET Schema 2019-09 implementation. You can learn more about using schemas at https://json-schema.org/ and test draft schemas at https://www.jsonschemavalidator.net/."
        },
        "metadata": {
          "type": "object",
          "properties": {
            "displayName": {
              "type": "string",
              "description": "The display name for the parameter."
            },
            "description": {
              "type": "string",
              "description": "The description of the parameter."
            },
            "strongType": {
              "type": "string",
              "description": "Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from."
            },
            "assignPermissions": {
              "type": "boolean",
              "description": "Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope."
            }
          },
          "additionalProperties": {
            "type": "object"
          },
          "description": "General metadata for the parameter."
        }
      },
      "description": "The definition of a parameter that can be provided to the policy."
    },
    "ParameterDefinitions": {
      "description": "The parameter definitions for parameters used in the policy. The keys are the parameter names.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/ParameterDefinitionsValue"
      }
    },
    "PolicyDefinition": {
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/PolicyDefinitionProperties",
          "description": "The policy definition properties."
        },
        "id": {
          "readOnly": true,
          "type": "string",
          "description": "The ID of the policy definition."
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "The name of the policy definition."
        },
        "type": {
          "readOnly": true,
          "type": "string",
          "description": "The type of the resource (Microsoft.Authorization/policyDefinitions)."
        },
        "systemData": {
          "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/systemData",
          "readOnly": true,
          "description": "The system metadata relating to this resource."
        }
      },
      "description": "The policy definition.",
      "x-ms-azure-resource": true
    },
    "PolicyDefinitionListResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyDefinition"
          },
          "description": "An array of policy definitions."
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to use for getting the next set of results."
        }
      },
      "description": "List of policy definitions."
    },
    "ExternalEvaluationEnforcementSettings": {
      "type": "object",
      "properties": {
        "missingTokenAction": {
          "type": "string",
          "description": "What to do when evaluating an enforcement policy that requires an external evaluation and the token is missing. Possible values are Audit and Deny and language expressions are supported."
        },
        "resultLifespan": {
          "type": "string",
          "description": "The lifespan of the endpoint invocation result after which it's no longer valid. Value is expected to follow the ISO 8601 duration format and language expressions are supported."
        },
        "endpointSettings": {
          "description": "The settings of an external endpoint providing evaluation results.",
          "$ref": "#/definitions/ExternalEvaluationEndpointSettings"
        },
        "roleDefinitionIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of the role definition Ids the assignment's MSI will need in order to invoke the endpoint."
        }
      },
      "description": "The details of the source of external evaluation results required by the policy during enforcement evaluation."
    },
    "ExternalEvaluationEndpointSettings": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "The kind of the endpoint."
        },
        "details": {
          "type": "object",
          "description": "The details of the endpoint."
        }
      },
      "description": "The settings of an external endpoint providing evaluation results."
    },
    "PolicyAssignmentProperties": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "The display name of the policy assignment."
        },
        "policyDefinitionId": {
          "type": "string",
          "description": "The ID of the policy definition or policy set definition being assigned."
        },
        "definitionVersion": {
          "type": "string",
          "description": "The version of the policy definition to use."
        },
        "latestDefinitionVersion": {
          "type": "string",
          "description": "The latest version of the policy definition available. This is only present if requested via the $expand query parameter.",
          "readOnly": true
        },
        "effectiveDefinitionVersion": {
          "type": "string",
          "description": "The effective version of the policy definition in use. This is only present if requested via the $expand query parameter.",
          "readOnly": true
        },
        "scope": {
          "type": "string",
          "description": "The scope for the policy assignment.",
          "readOnly": true
        },
        "notScopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The policy's excluded scopes."
        },
        "parameters": {
          "description": "The parameter values for the assigned policy rule. The keys are the parameter names.",
          "$ref": "#/definitions/ParameterValues"
        },
        "description": {
          "type": "string",
          "description": "This message will be part of response in case of policy violation."
        },
        "metadata": {
          "type": "object",
          "description": "The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs."
        },
        "enforcementMode": {
          "type": "string",
          "description": "The policy assignment enforcement mode. Possible values are Default, DoNotEnforce, and Enroll",
          "enum": [
            "Default",
            "DoNotEnforce",
            "Enroll"
          ],
          "x-ms-enum": {
            "name": "enforcementMode",
            "modelAsString": true,
            "values": [
              {
                "value": "Default",
                "description": "The policy effect is enforced during resource creation or update."
              },
              {
                "value": "DoNotEnforce",
                "description": "The policy effect is not enforced during resource creation or update."
              },
              {
                "value": "Enroll",
                "description": "The policy effect is not enforced during resource creation or update until the resource or scope of the resource is enrolled to the assignment instance. Enrollment occurs upon deployment of the policy enrollment resource."
              }
            ]
          },
          "default": "Default"
        },
        "nonComplianceMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NonComplianceMessage"
          },
          "x-ms-identifiers": [
            "message",
            "policyDefinitionReferenceId"
          ],
          "description": "The messages that describe why a resource is non-compliant with the policy."
        },
        "resourceSelectors": {
          "type": "array",
          "items": {
            "$ref": "../../common/v2/types.json#/definitions/ResourceSelector"
          },
          "x-ms-identifiers": [],
          "description": "The resource selector list to filter policies by resource properties."
        },
        "overrides": {
          "type": "array",
          "items": {
            "$ref": "../../common/v2/types.json#/definitions/Override"
          },
          "x-ms-identifiers": [],
          "description": "The policy property value override."
        },
        "assignmentType": {
          "type": "string",
          "description": "The type of policy assignment. Possible values are NotSpecified, System, SystemHidden, and Custom. Immutable.",
          "enum": [
            "NotSpecified",
            "System",
            "SystemHidden",
            "Custom"
          ],
          "x-ms-enum": {
            "name": "assignmentType",
            "modelAsString": true
          }
        },
        "instanceId": {
          "type": "string",
          "description": "The instance ID of the policy assignment. This ID only and always changes when the assignment is deleted and recreated.",
          "readOnly": true
        }
      },
      "description": "The policy assignment properties."
    },
    "NonComplianceMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results."
        },
        "policyDefinitionReferenceId": {
          "type": "string",
          "description": "The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment."
        }
      },
      "required": [
        "message"
      ],
      "description": "A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results."
    },
    "ParameterValues": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/ParameterValuesValue"
      },
      "description": "The parameter values for the policy rule. The keys are the parameter names."
    },
    "ParameterValuesValue": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the parameter."
        }
      },
      "description": "The value of a parameter."
    },
    "PolicyAssignment": {
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/PolicyAssignmentProperties",
          "description": "Properties for the policy assignment."
        },
        "id": {
          "type": "string",
          "description": "The ID of the policy assignment.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the policy assignment.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the policy assignment.",
          "readOnly": true
        },
        "location": {
          "type": "string",
          "description": "The location of the policy assignment. Only required when utilizing managed identity."
        },
        "identity": {
          "$ref": "#/definitions/Identity",
          "description": "The managed identity associated with the policy assignment."
        },
        "systemData": {
          "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/systemData",
          "readOnly": true,
          "description": "The system metadata relating to this resource."
        }
      },
      "description": "The policy assignment.",
      "x-ms-azure-resource": true
    },
    "PolicyAssignmentListResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyAssignment"
          },
          "x-ms-identifiers": [],
          "description": "An array of policy assignments."
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to use for getting the next set of results."
        }
      },
      "description": "List of policy assignments."
    },
    "Identity": {
      "type": "object",
      "description": "Identity for the resource.",
      "properties": {
        "principalId": {
          "type": "string",
          "format": "uuid",
          "description": "The principal ID of resource identity. The value must be an UUID.",
          "readOnly": true
        },
        "tenantId": {
          "type": "string",
          "format": "uuid",
          "description": "The tenant ID of resource. The value must be an UUID.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The identity type.",
          "enum": [
            "SystemAssigned"
          ],
          "x-ms-enum": {
            "name": "ResourceIdentityType",
            "modelAsString": false
          }
        }
      }
    },
    "PolicyAssignmentUpdateProperties": {
      "type": "object",
      "properties": {
        "resourceSelectors": {
          "type": "array",
          "items": {
            "$ref": "../../common/v2/types.json#/definitions/ResourceSelector"
          },
          "x-ms-identifiers": [],
          "description": "The resource selector list to filter policies by resource properties."
        },
        "overrides": {
          "type": "array",
          "items": {
            "$ref": "../../common/v2/types.json#/definitions/Override"
          },
          "x-ms-identifiers": [],
          "description": "The policy property value override."
        }
      },
      "description": "The policy assignment properties for Patch request."
    },
    "PolicyAssignmentUpdate": {
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/PolicyAssignmentUpdateProperties",
          "description": "The policy assignment properties for Patch request."
        },
        "location": {
          "type": "string",
          "description": "The location of the policy assignment. Only required when utilizing managed identity."
        },
        "identity": {
          "$ref": "#/definitions/Identity",
          "description": "The managed identity associated with the policy assignment."
        }
      },
      "description": "The policy assignment for Patch request."
    },
    "PolicySetDefinitionVersionProperties": {
      "type": "object",
      "properties": {
        "policyType": {
          "type": "string",
          "description": "The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.",
          "enum": [
            "NotSpecified",
            "BuiltIn",
            "Custom",
            "Static"
          ],
          "x-ms-enum": {
            "name": "policyType",
            "modelAsString": true
          }
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the policy set definition."
        },
        "description": {
          "type": "string",
          "description": "The policy set definition description."
        },
        "metadata": {
          "type": "object",
          "description": "The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs."
        },
        "parameters": {
          "description": "The policy set definition parameters that can be used in policy definition references.",
          "$ref": "./policyDefinitions.json#/definitions/ParameterDefinitions"
        },
        "policyDefinitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyDefinitionReference"
          },
          "x-ms-identifiers": [
            "policyDefinitionReferenceId"
          ],
          "description": "An array of policy definition references."
        },
        "policyDefinitionGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyDefinitionGroup"
          },
          "x-ms-identifiers": [
            "name"
          ],
          "description": "The metadata describing groups of policy definition references within the policy set definition."
        },
        "version": {
          "type": "string",
          "description": "The policy set definition version in #.#.# format."
        }
      },
      "required": [
        "policyDefinitions"
      ],
      "description": "The policy set definition properties."
    },
    "PolicyDefinitionReference": {
      "type": "object",
      "properties": {
        "policyDefinitionId": {
          "type": "string",
          "description": "The ID of the policy definition or policy set definition."
        },
        "definitionVersion": {
          "type": "string",
          "description": "The version of the policy definition to use."
        },
        "latestDefinitionVersion": {
          "type": "string",
          "description": "The latest version of the policy definition available. This is only present if requested via the $expand query parameter.",
          "readOnly": true
        },
        "effectiveDefinitionVersion": {
          "type": "string",
          "description": "The effective version of the policy definition in use. This is only present if requested via the $expand query parameter.",
          "readOnly": true
        },
        "parameters": {
          "description": "The parameter values for the referenced policy rule. The keys are the parameter names.",
          "$ref": "./policyAssignments.json#/definitions/ParameterValues"
        },
        "policyDefinitionReferenceId": {
          "type": "string",
          "description": "A unique id (within the policy set definition) for this policy definition reference."
        },
        "groupNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The name of the groups that this policy definition reference belongs to."
        }
      },
      "required": [
        "policyDefinitionId"
      ],
      "description": "The policy definition reference."
    },
    "PolicyDefinitionGroup": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the group."
        },
        "displayName": {
          "type": "string",
          "description": "The group's display name."
        },
        "category": {
          "type": "string",
          "description": "The group's category."
        },
        "description": {
          "type": "string",
          "description": "The group's description."
        },
        "additionalMetadataId": {
          "type": "string",
          "description": "A resource ID of a resource that contains additional metadata about the group."
        }
      },
      "required": [
        "name"
      ],
      "description": "The policy definition group."
    },
    "PolicySetDefinitionVersion": {
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/PolicySetDefinitionVersionProperties",
          "description": "The policy set definition version properties."
        },
        "id": {
          "readOnly": true,
          "type": "string",
          "description": "The ID of the policy set definition version."
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "The name of the policy set definition version."
        },
        "type": {
          "readOnly": true,
          "type": "string",
          "description": "The type of the resource (Microsoft.Authorization/policySetDefinitions/versions)."
        },
        "systemData": {
          "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/systemData",
          "readOnly": true,
          "description": "The system metadata relating to this resource."
        }
      },
      "description": "The policy set definition version.",
      "x-ms-azure-resource": true
    },
    "PolicySetDefinitionVersionListResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicySetDefinitionVersion"
          },
          "description": "An array of policy set definition versions."
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to use for getting the next set of results."
        }
      },
      "description": "List of policy set definition versions."
    },
    "PolicyTokenRequest": {
      "type": "object",
      "properties": {
        "operation": {
          "description": "The resource operation to acquire a token for.",
          "$ref": "#/definitions/PolicyTokenOperation"
        },
        "changeReference": {
          "type": "string",
          "description": "The change reference."
        }
      },
      "required": [
        "operation"
      ],
      "description": "The policy token request properties."
    },
    "PolicyTokenResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "string",
          "description": "The result of the completed token acquisition operation. Possible values are Succeeded and Failed.",
          "enum": [
            "Succeeded",
            "Failed"
          ],
          "x-ms-enum": {
            "name": "policyTokenResult",
            "modelAsString": true
          }
        },
        "message": {
          "type": "string",
          "description": "Status message with additional details about the token acquisition operation result."
        },
        "retryAfter": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time after which the client can try to acquire a token again in the case of retry-able failures."
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalEvaluationEndpointInvocationResult"
          },
          "description": "An array of external evaluation endpoint invocation results."
        },
        "changeReference": {
          "type": "string",
          "description": "The change reference associated with the operation for which the token is acquired."
        },
        "token": {
          "type": "string",
          "description": "The issued policy token."
        },
        "tokenId": {
          "type": "string",
          "description": "The unique Id assigned to the policy token."
        },
        "expiration": {
          "type": "string",
          "format": "date-time",
          "description": "The expiration of the policy token."
        }
      },
      "description": "The policy token response properties."
    },
    "PolicyTokenOperation": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "description": "The request URI of the resource operation."
        },
        "httpMethod": {
          "type": "string",
          "description": "The http method of the resource operation."
        },
        "content": {
          "type": "object",
          "description": "The payload of the resource operation."
        }
      },
      "required": [
        "uri",
        "httpMethod"
      ],
      "description": "The resource operation to acquire a token for."
    },
    "ExternalEvaluationEndpointInvocationResult": {
      "type": "object",
      "properties": {
        "policyInfo": {
          "description": "The details of the policy requiring the external endpoint invocation.",
          "$ref": "#/definitions/PolicyLogInfo"
        },
        "result": {
          "type": "string",
          "description": "The result of the external endpoint. Possible values are Succeeded and Failed.",
          "enum": [
            "Succeeded",
            "Failed"
          ],
          "x-ms-enum": {
            "name": "externalEndpointResult",
            "modelAsString": true
          }
        },
        "message": {
          "type": "string",
          "description": "The status message with additional details about the invocation result."
        },
        "retryAfter": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time after which a failed endpoint invocation can be retried."
        },
        "claims": {
          "type": "object",
          "description": "The set of claims that will be attached to the policy token as an attestation for the result of the endpoint invocation."
        },
        "expiration": {
          "type": "string",
          "format": "date-time",
          "description": "The expiration of the results."
        }
      },
      "description": "The external evaluation endpoint invocation results."
    },
    "PolicyLogInfo": {
      "type": "object",
      "properties": {
        "policyDefinitionId": {
          "type": "string",
          "description": "The policy definition Id."
        },
        "policySetDefinitionId": {
          "type": "string",
          "description": "The policy set definition Id."
        },
        "policyDefinitionReferenceId": {
          "type": "string",
          "description": "The policy definition instance Id inside a policy set."
        },
        "policySetDefinitionName": {
          "type": "string",
          "description": "The policy set definition name."
        },
        "policySetDefinitionDisplayName": {
          "type": "string",
          "description": "The policy set definition display name."
        },
        "policySetDefinitionVersion": {
          "type": "string",
          "description": "The policy set definition version."
        },
        "policySetDefinitionCategory": {
          "type": "string",
          "description": "The policy set definition category."
        },
        "policyDefinitionName": {
          "type": "string",
          "description": "The policy definition name."
        },
        "policyDefinitionDisplayName": {
          "type": "string",
          "description": "The policy definition display name."
        },
        "policyDefinitionVersion": {
          "type": "string",
          "description": "The policy definition version."
        },
        "policyDefinitionEffect": {
          "type": "string",
          "description": "The policy definition action."
        },
        "policyDefinitionGroupNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of policy definition group names."
        },
        "policyAssignmentId": {
          "type": "string",
          "description": "The policy assignment Id."
        },
        "policyAssignmentName": {
          "type": "string",
          "description": "The policy assignment name."
        },
        "policyAssignmentDisplayName": {
          "type": "string",
          "description": "The policy assignment display name."
        },
        "policyAssignmentVersion": {
          "type": "string",
          "description": "The policy assignment version."
        },
        "policyAssignmentScope": {
          "type": "string",
          "description": "The policy assignment scope."
        },
        "resourceLocation": {
          "type": "string",
          "description": "The resource location."
        },
        "ancestors": {
          "type": "string",
          "description": "The management group ancestors."
        },
        "complianceReasonCode": {
          "type": "string",
          "description": "The policy compliance reason code."
        },
        "policyExemptionIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of policy exemption Ids."
        }
      },
      "description": "The policy log info."
    },
    "PolicySetDefinitionProperties": {
      "type": "object",
      "properties": {
        "policyType": {
          "type": "string",
          "description": "The type of policy set definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.",
          "enum": [
            "NotSpecified",
            "BuiltIn",
            "Custom",
            "Static"
          ],
          "x-ms-enum": {
            "name": "policyType",
            "modelAsString": true
          }
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the policy set definition."
        },
        "description": {
          "type": "string",
          "description": "The policy set definition description."
        },
        "metadata": {
          "type": "object",
          "description": "The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs."
        },
        "parameters": {
          "description": "The policy set definition parameters that can be used in policy definition references.",
          "$ref": "./policyDefinitions.json#/definitions/ParameterDefinitions"
        },
        "policyDefinitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyDefinitionReference"
          },
          "x-ms-identifiers": [
            "policyDefinitionReferenceId"
          ],
          "description": "An array of policy definition references."
        },
        "policyDefinitionGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyDefinitionGroup"
          },
          "x-ms-identifiers": [
            "name"
          ],
          "description": "The metadata describing groups of policy definition references within the policy set definition."
        },
        "version": {
          "type": "string",
          "description": "The policy set definition version in #.#.# format."
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of available versions for this policy set definition."
        }
      },
      "required": [
        "policyDefinitions"
      ],
      "description": "The policy set definition properties."
    },
    "PolicySetDefinition": {
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/PolicySetDefinitionProperties",
          "description": "The policy set definition properties."
        },
        "id": {
          "readOnly": true,
          "type": "string",
          "description": "The ID of the policy set definition."
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "The name of the policy set definition."
        },
        "type": {
          "readOnly": true,
          "type": "string",
          "description": "The type of the resource (Microsoft.Authorization/policySetDefinitions)."
        },
        "systemData": {
          "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/systemData",
          "readOnly": true,
          "description": "The system metadata relating to this resource."
        }
      },
      "description": "The policy set definition.",
      "x-ms-azure-resource": true
    },
    "PolicySetDefinitionListResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicySetDefinition"
          },
          "description": "An array of policy set definitions."
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to use for getting the next set of results."
        }
      },
      "description": "List of policy set definitions."
    },
    "PolicyDefinitionVersionProperties": {
      "type": "object",
      "properties": {
        "policyType": {
          "type": "string",
          "description": "The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.",
          "enum": [
            "NotSpecified",
            "BuiltIn",
            "Custom",
            "Static"
          ],
          "x-ms-enum": {
            "name": "policyType",
            "modelAsString": true
          }
        },
        "mode": {
          "type": "string",
          "description": "The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.",
          "default": "Indexed"
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the policy definition."
        },
        "description": {
          "type": "string",
          "description": "The policy definition description."
        },
        "policyRule": {
          "type": "object",
          "description": "The policy rule."
        },
        "metadata": {
          "type": "object",
          "description": "The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs."
        },
        "parameters": {
          "description": "The parameter definitions for parameters used in the policy rule. The keys are the parameter names.",
          "$ref": "#/definitions/ParameterDefinitions"
        },
        "version": {
          "type": "string",
          "description": "The policy definition version in #.#.# format."
        },
        "externalEvaluationEnforcementSettings": {
          "description": "The details of the source of external evaluation results required by the policy during enforcement evaluation.",
          "$ref": "#/definitions/ExternalEvaluationEnforcementSettings"
        }
      },
      "description": "The policy definition properties."
    },
    "PolicyDefinitionVersion": {
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/PolicyDefinitionVersionProperties",
          "description": "The policy definition version properties."
        },
        "id": {
          "readOnly": true,
          "type": "string",
          "description": "The ID of the policy definition version."
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "The name of the policy definition version."
        },
        "type": {
          "readOnly": true,
          "type": "string",
          "description": "The type of the resource (Microsoft.Authorization/policyDefinitions/versions)."
        },
        "systemData": {
          "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/systemData",
          "readOnly": true,
          "description": "The system metadata relating to this resource."
        }
      },
      "description": "The ID of the policy definition version.",
      "x-ms-azure-resource": true
    },
    "PolicyDefinitionVersionListResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyDefinitionVersion"
          },
          "description": "An array of policy definitions versions."
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to use for getting the next set of results."
        }
      },
      "description": "List of policy definition versions."
    },
    "AzureEntityResource": {
      "type": "object",
      "title": "Entity Resource",
      "description": "The resource model definition for an Azure Resource Manager resource with an etag.",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Resource Etag.",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "x-ms-client-name": "AzureEntityResource"
    },
    "CheckNameAvailabilityRequest": {
      "type": "object",
      "description": "The check availability request body.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the resource for which availability needs to be checked."
        },
        "type": {
          "type": "string",
          "description": "The resource type."
        }
      }
    },
    "CheckNameAvailabilityResponse": {
      "type": "object",
      "description": "The check availability result.",
      "properties": {
        "nameAvailable": {
          "type": "boolean",
          "description": "Indicates if the resource name is available."
        },
        "reason": {
          "type": "string",
          "description": "The reason why the given name is not available.",
          "enum": [
            "Invalid",
            "AlreadyExists"
          ],
          "x-ms-enum": {
            "name": "CheckNameAvailabilityReason",
            "modelAsString": true
          }
        },
        "message": {
          "type": "string",
          "description": "Detailed reason why the given name is available."
        }
      }
    },
    "ErrorAdditionalInfo": {
      "type": "object",
      "description": "The resource management error additional info.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The additional info type.",
          "readOnly": true
        },
        "info": {
          "type": "object",
          "description": "The additional info.",
          "readOnly": true
        }
      }
    },
    "ErrorDetail": {
      "type": "object",
      "description": "The error detail.",
      "properties": {
        "code": {
          "type": "string",
          "description": "The error code.",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "description": "The error message.",
          "readOnly": true
        },
        "target": {
          "type": "string",
          "description": "The error target.",
          "readOnly": true
        },
        "details": {
          "type": "array",
          "description": "The error details.",
          "items": {
            "$ref": "#/definitions/ErrorDetail"
          },
          "readOnly": true,
          "x-ms-identifiers": [
            "message",
            "target"
          ]
        },
        "additionalInfo": {
          "type": "array",
          "description": "The error additional info.",
          "items": {
            "$ref": "#/definitions/ErrorAdditionalInfo"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "title": "Error response",
      "description": "Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorDetail",
          "description": "The error object."
        }
      }
    },
    "KeyVaultProperties": {
      "type": "object",
      "properties": {
        "keyIdentifier": {
          "type": "string",
          "description": "Key vault uri to access the encryption key."
        },
        "identity": {
          "type": "string",
          "description": "The client ID of the identity which will be used to access key vault."
        }
      }
    },
    "Operation": {
      "type": "object",
      "title": "REST API Operation",
      "description": "Details of a REST API operation, returned from the Resource Provider Operations API",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the operation, as per Resource-Based Access Control (RBAC). Examples: \"Microsoft.Compute/virtualMachines/write\", \"Microsoft.Compute/virtualMachines/capture/action\"",
          "readOnly": true
        },
        "isDataAction": {
          "type": "boolean",
          "description": "Whether the operation applies to data-plane. This is \"true\" for data-plane operations and \"false\" for ARM/control-plane operations.",
          "readOnly": true
        },
        "display": {
          "type": "object",
          "description": "Localized display information for this particular operation.",
          "properties": {
            "provider": {
              "type": "string",
              "description": "The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring Insights\" or \"Microsoft Compute\".",
              "readOnly": true
            },
            "resource": {
              "type": "string",
              "description": "The localized friendly name of the resource type related to this operation. E.g. \"Virtual Machines\" or \"Job Schedule Collections\".",
              "readOnly": true
            },
            "operation": {
              "type": "string",
              "description": "The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create or Update Virtual Machine\", \"Restart Virtual Machine\".",
              "readOnly": true
            },
            "description": {
              "type": "string",
              "description": "The short, localized friendly description of the operation; suitable for tool tips and detailed views.",
              "readOnly": true
            }
          }
        },
        "origin": {
          "type": "string",
          "description": "The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is \"user,system\"",
          "enum": [
            "user",
            "system",
            "user,system"
          ],
          "x-ms-enum": {
            "name": "Origin",
            "modelAsString": true
          },
          "readOnly": true
        },
        "actionType": {
          "type": "string",
          "description": "Enum. Indicates the action type. \"Internal\" refers to actions that are for internal only APIs.",
          "enum": [
            "Internal"
          ],
          "x-ms-enum": {
            "name": "ActionType",
            "modelAsString": true
          },
          "readOnly": true
        }
      }
    },
    "OperationListResult": {
      "type": "object",
      "description": "A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results.",
      "properties": {
        "value": {
          "type": "array",
          "description": "List of operations supported by the resource provider",
          "items": {
            "$ref": "#/definitions/Operation"
          },
          "readOnly": true,
          "x-ms-identifiers": [
            "name"
          ]
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "URL to get the next set of operation list results (if there are any).",
          "readOnly": true
        }
      }
    },
    "OperationStatusResult": {
      "type": "object",
      "description": "The current status of an async operation.",
      "properties": {
        "id": {
          "type": "string",
          "format": "arm-id",
          "description": "Fully qualified ID for the async operation."
        },
        "resourceId": {
          "type": "string",
          "format": "arm-id",
          "description": "Fully qualified ID of the resource against which the original async operation was started.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Name of the async operation."
        },
        "status": {
          "type": "string",
          "description": "Operation status."
        },
        "percentComplete": {
          "type": "number",
          "description": "Percent of the operation that is complete.",
          "minimum": 0,
          "maximum": 100
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "The start time of the operation."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "The end time of the operation."
        },
        "operations": {
          "type": "array",
          "description": "The operations list.",
          "items": {
            "$ref": "#/definitions/OperationStatusResult"
          }
        },
        "error": {
          "$ref": "#/definitions/ErrorDetail",
          "description": "If present, details of the operation error."
        }
      },
      "required": [
        "status"
      ]
    },
    "Plan": {
      "type": "object",
      "description": "Plan for the resource.",
      "properties": {
        "name": {
          "type": "string",
          "description": "A user defined name of the 3rd Party Artifact that is being procured."
        },
        "publisher": {
          "type": "string",
          "description": "The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic"
        },
        "product": {
          "type": "string",
          "description": "The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. "
        },
        "promotionCode": {
          "type": "string",
          "description": "A publisher provided promotion code as provisioned in Data Market for the said product/artifact."
        },
        "version": {
          "type": "string",
          "description": "The version of the desired product/artifact."
        }
      },
      "required": [
        "name",
        "publisher",
        "product"
      ]
    },
    "ProxyResource": {
      "type": "object",
      "title": "Proxy Resource",
      "description": "The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "Resource": {
      "type": "object",
      "title": "Resource",
      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
      "properties": {
        "id": {
          "type": "string",
          "format": "arm-id",
          "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "$ref": "#/definitions/systemData",
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true
        }
      },
      "x-ms-azure-resource": true
    },
    "ResourceModelWithAllowedPropertySet": {
      "type": "object",
      "description": "The resource model definition containing the full set of allowed properties for a resource. Except properties bag, there cannot be a top level property outside of this set.",
      "properties": {
        "managedBy": {
          "type": "string",
          "description": "The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is removed from the template since it is managed by another resource.",
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "kind": {
          "type": "string",
          "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type. E.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.",
          "pattern": "^[-\\w\\._,\\(\\)]+$",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "etag": {
          "type": "string",
          "description": "The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. ",
          "readOnly": true
        },
        "identity": {
          "allOf": [
            {
              "$ref": "#/definitions/Identity"
            }
          ]
        },
        "sku": {
          "allOf": [
            {
              "$ref": "#/definitions/Sku"
            }
          ]
        },
        "plan": {
          "allOf": [
            {
              "$ref": "#/definitions/Plan"
            }
          ]
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TrackedResource"
        }
      ],
      "x-ms-azure-resource": true
    },
    "Sku": {
      "type": "object",
      "description": "The resource model definition representing SKU",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the SKU. E.g. P3. It is typically a letter+number code"
        },
        "tier": {
          "$ref": "#/definitions/SkuTier"
        },
        "size": {
          "type": "string",
          "description": "The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. "
        },
        "family": {
          "type": "string",
          "description": "If the service has different generations of hardware, for the same SKU, then that can be captured here."
        },
        "capacity": {
          "type": "integer",
          "format": "int32",
          "description": "If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted."
        }
      },
      "required": [
        "name"
      ]
    },
    "SkuTier": {
      "type": "string",
      "description": "This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.",
      "enum": [
        "Free",
        "Basic",
        "Standard",
        "Premium"
      ],
      "x-ms-enum": {
        "name": "SkuTier",
        "modelAsString": false
      }
    },
    "TrackedResource": {
      "type": "object",
      "title": "Tracked Resource",
      "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "location"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "encryptionProperties": {
      "type": "object",
      "description": "Configuration of key for data encryption",
      "properties": {
        "status": {
          "type": "string",
          "description": "Indicates whether or not the encryption is enabled for container registry.",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-ms-enum": {
            "name": "EncryptionStatus",
            "modelAsString": true
          }
        },
        "keyVaultProperties": {
          "$ref": "#/definitions/KeyVaultProperties",
          "description": "Key vault properties."
        }
      }
    },
    "locationData": {
      "type": "object",
      "description": "Metadata pertaining to the geographic location of the resource.",
      "properties": {
        "name": {
          "type": "string",
          "description": "A canonical name for the geographic or physical location.",
          "maxLength": 256
        },
        "city": {
          "type": "string",
          "description": "The city or locality where the resource is located."
        },
        "district": {
          "type": "string",
          "description": "The district, state, or province where the resource is located."
        },
        "countryOrRegion": {
          "type": "string",
          "description": "The country or region where the resource is located"
        }
      },
      "required": [
        "name"
      ]
    },
    "systemData": {
      "type": "object",
      "description": "Metadata pertaining to creation and last modification of the resource.",
      "properties": {
        "createdBy": {
          "type": "string",
          "description": "The identity that created the resource."
        },
        "createdByType": {
          "type": "string",
          "description": "The type of identity that created the resource.",
          "enum": [
            "User",
            "Application",
            "ManagedIdentity",
            "Key"
          ],
          "x-ms-enum": {
            "name": "createdByType",
            "modelAsString": true
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of resource creation (UTC)."
        },
        "lastModifiedBy": {
          "type": "string",
          "description": "The identity that last modified the resource."
        },
        "lastModifiedByType": {
          "type": "string",
          "description": "The type of identity that last modified the resource.",
          "enum": [
            "User",
            "Application",
            "ManagedIdentity",
            "Key"
          ],
          "x-ms-enum": {
            "name": "createdByType",
            "modelAsString": true
          }
        },
        "lastModifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of resource last modification (UTC)"
        }
      },
      "readOnly": true
    }
  }
}