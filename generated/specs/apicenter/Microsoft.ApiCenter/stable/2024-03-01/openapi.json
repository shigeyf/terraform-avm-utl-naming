{
  "openapi": "3.0.0",
  "info": {
    "title": "Microsoft.ApiCenter",
    "version": "2024-03-01"
  },
  "components": {},
  "paths": {
    "/providers/Microsoft.ApiCenter/operations": {
      "get": {
        "operationId": "Operations_List",
        "tags": [
          "Operations"
        ],
        "description": "List the operations for the provider",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "List Provider Operations": {
            "$ref": "./examples/Operations_List.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ApiCenter/services": {
      "get": {
        "operationId": "Services_ListBySubscription",
        "tags": [
          "Services"
        ],
        "description": "Lists services within an Azure subscription.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ServiceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Services_ListBySubscription": {
            "$ref": "./examples/Services_ListBySubscription.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services": {
      "get": {
        "operationId": "Services_ListByResourceGroup",
        "tags": [
          "Services"
        ],
        "description": "Returns a collection of services within the resource group.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ServiceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Services_ListByResourceGroup": {
            "$ref": "./examples/Services_ListByResourceGroup.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}": {
      "get": {
        "operationId": "Services_Get",
        "tags": [
          "Services"
        ],
        "description": "Returns details of the service.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Services_Get": {
            "$ref": "./examples/Services_Get.json"
          }
        }
      },
      "put": {
        "operationId": "Services_CreateOrUpdate",
        "tags": [
          "Services"
        ],
        "description": "Creates new or updates existing API.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'Service' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "201": {
            "description": "Resource 'Service' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Services_CreateOrUpdate": {
            "$ref": "./examples/Services_CreateOrUpdate.json"
          }
        }
      },
      "patch": {
        "operationId": "Services_Update",
        "tags": [
          "Services"
        ],
        "description": "Updates existing service.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceUpdate"
            },
            "x-ms-client-name": "properties"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Services_Update": {
            "$ref": "./examples/Services_Update.json"
          }
        }
      },
      "delete": {
        "operationId": "Services_Delete",
        "tags": [
          "Services"
        ],
        "description": "Deletes specified service.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Services_Delete": {
            "$ref": "./examples/Services_Delete.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/exportMetadataSchema": {
      "post": {
        "operationId": "Services_ExportMetadataSchema",
        "tags": [
          "Services"
        ],
        "description": "Exports the effective metadata schema.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "The content of the action request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MetadataSchemaExportRequest"
            },
            "x-ms-client-name": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MetadataSchemaExportResult"
            }
          },
          "202": {
            "description": "Resource operation accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Services_ExportMetadataSchema": {
            "$ref": "./examples/Services_ExportMetadataSchema.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/metadataSchemas": {
      "get": {
        "operationId": "MetadataSchemas_List",
        "tags": [
          "MetadataSchemas"
        ],
        "description": "Returns a collection of metadata schemas.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "$ref": "#/parameters/OdataFilterParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MetadataSchemaListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MetadataSchemas_ListByService": {
            "$ref": "./examples/MetadataSchemas_List.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/metadataSchemas/{metadataSchemaName}": {
      "get": {
        "operationId": "MetadataSchemas_Get",
        "tags": [
          "MetadataSchemas"
        ],
        "description": "Returns details of the metadata schema.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "metadataSchemaName",
            "in": "path",
            "description": "The name of the metadata schema.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MetadataSchema"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MetadataSchemas_Get": {
            "$ref": "./examples/MetadataSchemas_Get.json"
          }
        }
      },
      "put": {
        "operationId": "MetadataSchemas_CreateOrUpdate",
        "tags": [
          "MetadataSchemas"
        ],
        "description": "Creates new or updates existing metadata schema.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "metadataSchemaName",
            "in": "path",
            "description": "The name of the metadata schema.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MetadataSchema"
            },
            "x-ms-client-name": "resource"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'MetadataSchema' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/MetadataSchema"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              }
            }
          },
          "201": {
            "description": "Resource 'MetadataSchema' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/MetadataSchema"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MetadataSchemas_CreateOrUpdate": {
            "$ref": "./examples/MetadataSchemas_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "operationId": "MetadataSchemas_Delete",
        "tags": [
          "MetadataSchemas"
        ],
        "description": "Deletes specified metadata schema.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "metadataSchemaName",
            "in": "path",
            "description": "The name of the metadata schema.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MetadataSchemas_Delete": {
            "$ref": "./examples/MetadataSchemas_Delete.json"
          }
        }
      },
      "head": {
        "operationId": "MetadataSchemas_Head",
        "tags": [
          "MetadataSchemas"
        ],
        "description": "Checks if specified metadata schema exists.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "metadataSchemaName",
            "in": "path",
            "description": "The name of the metadata schema.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "MetadataSchemas_Head": {
            "$ref": "./examples/MetadataSchemas_Head.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces": {
      "get": {
        "operationId": "Workspaces_List",
        "tags": [
          "Workspaces"
        ],
        "description": "Returns a collection of workspaces.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "$ref": "#/parameters/OdataFilterParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/WorkspaceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Workspaces_ListByService": {
            "$ref": "./examples/Workspaces_List.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}": {
      "get": {
        "operationId": "Workspaces_Get",
        "tags": [
          "Workspaces"
        ],
        "description": "Returns details of the workspace.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Workspace"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Workspaces_Get": {
            "$ref": "./examples/Workspaces_Get.json"
          }
        }
      },
      "put": {
        "operationId": "Workspaces_CreateOrUpdate",
        "tags": [
          "Workspaces"
        ],
        "description": "Creates new or updates existing workspace.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Workspace"
            },
            "x-ms-client-name": "resource"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'Workspace' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/Workspace"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              }
            }
          },
          "201": {
            "description": "Resource 'Workspace' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/Workspace"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Workspaces_CreateOrUpdate": {
            "$ref": "./examples/Workspaces_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "operationId": "Workspaces_Delete",
        "tags": [
          "Workspaces"
        ],
        "description": "Deletes specified workspace.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Workspaces_Delete": {
            "$ref": "./examples/Workspaces_Delete.json"
          }
        }
      },
      "head": {
        "operationId": "Workspaces_Head",
        "tags": [
          "Workspaces"
        ],
        "description": "Checks if specified workspace exists.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Workspaces_Head": {
            "$ref": "./examples/Workspaces_Head.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/apis": {
      "get": {
        "operationId": "Apis_List",
        "tags": [
          "Apis"
        ],
        "description": "Returns a collection of APIs.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "$ref": "#/parameters/OdataFilterParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ApiListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Apis_ListByWorkspace": {
            "$ref": "./examples/Apis_List.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/apis/{apiName}": {
      "get": {
        "operationId": "Apis_Get",
        "tags": [
          "Apis"
        ],
        "description": "Returns details of the API.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "apiName",
            "in": "path",
            "description": "The name of the API.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Api"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Apis_Get": {
            "$ref": "./examples/Apis_Get.json"
          }
        }
      },
      "put": {
        "operationId": "Apis_CreateOrUpdate",
        "tags": [
          "Apis"
        ],
        "description": "Creates new or updates existing API.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "apiName",
            "in": "path",
            "description": "The name of the API.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api"
            },
            "x-ms-client-name": "resource"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'Api' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/Api"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              }
            }
          },
          "201": {
            "description": "Resource 'Api' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/Api"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Apis_CreateOrUpdate": {
            "$ref": "./examples/Apis_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "operationId": "Apis_Delete",
        "tags": [
          "Apis"
        ],
        "description": "Deletes specified API.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "apiName",
            "in": "path",
            "description": "The name of the API.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Apis_Delete": {
            "$ref": "./examples/Apis_Delete.json"
          }
        }
      },
      "head": {
        "operationId": "Apis_Head",
        "tags": [
          "Apis"
        ],
        "description": "Checks if specified API exists.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "apiName",
            "in": "path",
            "description": "The name of the API.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Apis_Head": {
            "$ref": "./examples/Apis_Head.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/apis/{apiName}/deployments": {
      "get": {
        "operationId": "Deployments_List",
        "tags": [
          "Deployments"
        ],
        "description": "Returns a collection of API deployments.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "apiName",
            "in": "path",
            "description": "The name of the API.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "$ref": "#/parameters/OdataFilterParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DeploymentListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Deployments_ListByApi": {
            "$ref": "./examples/Deployments_List.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/apis/{apiName}/deployments/{deploymentName}": {
      "get": {
        "operationId": "Deployments_Get",
        "tags": [
          "Deployments"
        ],
        "description": "Returns details of the API deployment.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "apiName",
            "in": "path",
            "description": "The name of the API.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "deploymentName",
            "in": "path",
            "description": "The name of the API deployment.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Deployment"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Deployments_Get": {
            "$ref": "./examples/Deployments_Get.json"
          }
        }
      },
      "put": {
        "operationId": "Deployments_CreateOrUpdate",
        "tags": [
          "Deployments"
        ],
        "description": "Creates new or updates existing API deployment.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "apiName",
            "in": "path",
            "description": "The name of the API.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "deploymentName",
            "in": "path",
            "description": "The name of the API deployment.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Deployment"
            },
            "x-ms-client-name": "resource"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'Deployment' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/Deployment"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              }
            }
          },
          "201": {
            "description": "Resource 'Deployment' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/Deployment"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Deployments_CreateOrUpdate": {
            "$ref": "./examples/Deployments_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "operationId": "Deployments_Delete",
        "tags": [
          "Deployments"
        ],
        "description": "Deletes API deployment.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "apiName",
            "in": "path",
            "description": "The name of the API.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "deploymentName",
            "in": "path",
            "description": "The name of the API deployment.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Deployments_Delete": {
            "$ref": "./examples/Deployments_Delete.json"
          }
        }
      },
      "head": {
        "operationId": "Deployments_Head",
        "tags": [
          "Deployments"
        ],
        "description": "Checks if specified API deployment exists.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "apiName",
            "in": "path",
            "description": "The name of the API.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "deploymentName",
            "in": "path",
            "description": "The name of the API deployment.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Deployments_Head": {
            "$ref": "./examples/Deployments_Head.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/apis/{apiName}/versions": {
      "get": {
        "operationId": "ApiVersions_List",
        "tags": [
          "ApiVersions"
        ],
        "description": "Returns a collection of API versions.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "apiName",
            "in": "path",
            "description": "The name of the API.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "$ref": "#/parameters/OdataFilterParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ApiVersionListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ApiVersions_ListByApi": {
            "$ref": "./examples/ApiVersions_List.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/apis/{apiName}/versions/{versionName}": {
      "get": {
        "operationId": "ApiVersions_Get",
        "tags": [
          "ApiVersions"
        ],
        "description": "Returns details of the API version.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "apiName",
            "in": "path",
            "description": "The name of the API.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "versionName",
            "in": "path",
            "description": "The name of the API version.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ApiVersion"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ApiVersions_Get": {
            "$ref": "./examples/ApiVersions_Get.json"
          }
        }
      },
      "put": {
        "operationId": "ApiVersions_CreateOrUpdate",
        "tags": [
          "ApiVersions"
        ],
        "description": "Creates new or updates existing API version.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "apiName",
            "in": "path",
            "description": "The name of the API.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "versionName",
            "in": "path",
            "description": "The name of the API version.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiVersion"
            },
            "x-ms-client-name": "resource"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'ApiVersion' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/ApiVersion"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              }
            }
          },
          "201": {
            "description": "Resource 'ApiVersion' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/ApiVersion"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ApiVersions_CreateOrUpdate": {
            "$ref": "./examples/ApiVersions_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "operationId": "ApiVersions_Delete",
        "tags": [
          "ApiVersions"
        ],
        "description": "Deletes specified API version",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "apiName",
            "in": "path",
            "description": "The name of the API.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "versionName",
            "in": "path",
            "description": "The name of the API version.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ApiVersions_Delete": {
            "$ref": "./examples/ApiVersions_Delete.json"
          }
        }
      },
      "head": {
        "operationId": "ApiVersions_Head",
        "tags": [
          "ApiVersions"
        ],
        "description": "Checks if specified API version exists.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "apiName",
            "in": "path",
            "description": "The name of the API.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "versionName",
            "in": "path",
            "description": "The name of the API version.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ApiVersions_Head": {
            "$ref": "./examples/ApiVersions_Head.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/apis/{apiName}/versions/{versionName}/definitions": {
      "get": {
        "operationId": "ApiDefinitions_List",
        "tags": [
          "ApiDefinitions"
        ],
        "description": "Returns a collection of API definitions.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "apiName",
            "in": "path",
            "description": "The name of the API.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "versionName",
            "in": "path",
            "description": "The name of the API version.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "$ref": "#/parameters/OdataFilterParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ApiDefinitionListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ApiDefinitions_ListByApiVersion": {
            "$ref": "./examples/ApiDefinitions_List.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/apis/{apiName}/versions/{versionName}/definitions/{definitionName}": {
      "get": {
        "operationId": "ApiDefinitions_Get",
        "tags": [
          "ApiDefinitions"
        ],
        "description": "Returns details of the API definition.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "apiName",
            "in": "path",
            "description": "The name of the API.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "versionName",
            "in": "path",
            "description": "The name of the API version.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "definitionName",
            "in": "path",
            "description": "The name of the API definition.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ApiDefinition"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ApiDefinitions_Get": {
            "$ref": "./examples/ApiDefinitions_Get.json"
          }
        }
      },
      "put": {
        "operationId": "ApiDefinitions_CreateOrUpdate",
        "tags": [
          "ApiDefinitions"
        ],
        "description": "Creates new or updates existing API definition.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "apiName",
            "in": "path",
            "description": "The name of the API.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "versionName",
            "in": "path",
            "description": "The name of the API version.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "definitionName",
            "in": "path",
            "description": "The name of the API definition.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiDefinition"
            },
            "x-ms-client-name": "resource"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'ApiDefinition' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/ApiDefinition"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              }
            }
          },
          "201": {
            "description": "Resource 'ApiDefinition' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/ApiDefinition"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ApiDefinitions_CreateOrUpdate": {
            "$ref": "./examples/ApiDefinitions_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "operationId": "ApiDefinitions_Delete",
        "tags": [
          "ApiDefinitions"
        ],
        "description": "Deletes specified API definition.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "apiName",
            "in": "path",
            "description": "The name of the API.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "versionName",
            "in": "path",
            "description": "The name of the API version.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "definitionName",
            "in": "path",
            "description": "The name of the API definition.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ApiDefinitions_Delete": {
            "$ref": "./examples/ApiDefinitions_Delete.json"
          }
        }
      },
      "head": {
        "operationId": "ApiDefinitions_Head",
        "tags": [
          "ApiDefinitions"
        ],
        "description": "Checks if specified API definition exists.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "apiName",
            "in": "path",
            "description": "The name of the API.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "versionName",
            "in": "path",
            "description": "The name of the API version.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "definitionName",
            "in": "path",
            "description": "The name of the API definition.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ApiDefinitions_Head": {
            "$ref": "./examples/ApiDefinitions_Head.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/apis/{apiName}/versions/{versionName}/definitions/{definitionName}/exportSpecification": {
      "post": {
        "operationId": "ApiDefinitions_ExportSpecification",
        "tags": [
          "ApiDefinitions"
        ],
        "description": "Exports the API specification.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "apiName",
            "in": "path",
            "description": "The name of the API.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "versionName",
            "in": "path",
            "description": "The name of the API version.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "definitionName",
            "in": "path",
            "description": "The name of the API definition.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ApiSpecExportResult"
            }
          },
          "202": {
            "description": "Resource operation accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ApiDefinitions_ExportSpecification": {
            "$ref": "./examples/ApiDefinitions_ExportSpecification.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/apis/{apiName}/versions/{versionName}/definitions/{definitionName}/importSpecification": {
      "post": {
        "operationId": "ApiDefinitions_ImportSpecification",
        "tags": [
          "ApiDefinitions"
        ],
        "description": "Imports the API specification.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "apiName",
            "in": "path",
            "description": "The name of the API.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "versionName",
            "in": "path",
            "description": "The name of the API version.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "definitionName",
            "in": "path",
            "description": "The name of the API definition.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "The content of the action request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiSpecImportRequest"
            },
            "x-ms-client-name": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "The API specification was successfully imported."
          },
          "202": {
            "description": "Resource operation accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "ApiDefinitions_ImportSpecification": {
            "$ref": "./examples/ApiDefinitions_ImportSpecification.json"
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/environments": {
      "get": {
        "operationId": "Environments_List",
        "tags": [
          "Environments"
        ],
        "description": "Returns a collection of environments.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "$ref": "#/parameters/OdataFilterParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/EnvironmentListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Environments_ListByWorkspace": {
            "$ref": "./examples/Environments_List.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/environments/{environmentName}": {
      "get": {
        "operationId": "Environments_Get",
        "tags": [
          "Environments"
        ],
        "description": "Returns details of the environment.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "environmentName",
            "in": "path",
            "description": "The name of the environment.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/Environment"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Environments_Get": {
            "$ref": "./examples/Environments_Get.json"
          }
        }
      },
      "put": {
        "operationId": "Environments_CreateOrUpdate",
        "tags": [
          "Environments"
        ],
        "description": "Creates new or updates existing environment.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "environmentName",
            "in": "path",
            "description": "The name of the environment.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Environment"
            },
            "x-ms-client-name": "resource"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'Environment' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/Environment"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              }
            }
          },
          "201": {
            "description": "Resource 'Environment' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/Environment"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The entity tag for the response."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Environments_CreateOrUpdate": {
            "$ref": "./examples/Environments_CreateOrUpdate.json"
          }
        }
      },
      "delete": {
        "operationId": "Environments_Delete",
        "tags": [
          "Environments"
        ],
        "description": "Deletes the environment.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "environmentName",
            "in": "path",
            "description": "The name of the environment.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "204": {
            "description": "Resource does not exist."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Environments_Delete": {
            "$ref": "./examples/Environments_Delete.json"
          }
        }
      },
      "head": {
        "operationId": "Environments_Head",
        "tags": [
          "Environments"
        ],
        "description": "Checks if specified environment exists.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "name": "serviceName",
            "in": "path",
            "description": "The name of Azure API Center service.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "workspaceName",
            "in": "path",
            "description": "The name of the workspace.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          },
          {
            "name": "environmentName",
            "in": "path",
            "description": "The name of the environment.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "pattern": "^[a-zA-Z0-9-]{3,90}$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Environments_Head": {
            "$ref": "./examples/Environments_Head.json"
          }
        }
      }
    }
  },
  "parameters": {
    "OdataFilterParameter": {
      "name": "$filter",
      "in": "query",
      "description": "OData filter parameter.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "filter"
    },
    "ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1
    },
    "If-Match": {
      "name": "ifMatch",
      "in": "header",
      "description": "The If-Match header that makes a request conditional.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "If-None-Match": {
      "name": "ifNoneMatch",
      "in": "header",
      "description": "The If-None-Match header that makes a request conditional.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "LocationParameter": {
      "name": "location",
      "in": "path",
      "description": "The name of the Azure region.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method"
    },
    "ManagementGroupNameParameter": {
      "name": "managementGroupName",
      "in": "path",
      "description": "The name of the management group. The name is case insensitive.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 90,
      "x-ms-parameter-location": "method"
    },
    "OperationIdParameter": {
      "name": "operationId",
      "in": "path",
      "description": "The ID of an ongoing async operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method"
    },
    "ResourceGroupNameParameter": {
      "name": "resourceGroupName",
      "in": "path",
      "description": "The name of the resource group. The name is case insensitive.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 90,
      "x-ms-parameter-location": "method"
    },
    "ScopeParameter": {
      "name": "scope",
      "in": "path",
      "description": "The scope at which the operation is performed.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true
    },
    "SubscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "description": "The ID of the target subscription. The value must be an UUID.",
      "required": true,
      "type": "string",
      "format": "uuid"
    },
    "TenantIdParameter": {
      "name": "tenantId",
      "in": "path",
      "description": "The Azure tenant ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)",
      "required": true,
      "type": "string",
      "format": "uuid",
      "x-ms-parameter-location": "method"
    }
  },
  "definitions": {
    "ActionType": {
      "type": "string",
      "description": "The type of action",
      "enum": [
        "Internal"
      ],
      "x-ms-enum": {
        "name": "ActionType",
        "modelAsString": true,
        "values": [
          {
            "name": "Internal",
            "value": "Internal",
            "description": "an internal action"
          }
        ]
      }
    },
    "Api": {
      "type": "object",
      "description": "API entity.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ApiProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "ApiDefinition": {
      "type": "object",
      "description": "API definition entity.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ApiDefinitionProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "ApiDefinitionListResult": {
      "type": "object",
      "description": "The response of a ApiDefinition list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The ApiDefinition items on this page",
          "items": {
            "$ref": "#/definitions/ApiDefinition"
          },
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "readOnly": true
        }
      },
      "required": [
        "value"
      ]
    },
    "ApiDefinitionProperties": {
      "type": "object",
      "description": "API definition properties entity.",
      "properties": {
        "title": {
          "type": "string",
          "description": "API definition title.",
          "minLength": 1,
          "maxLength": 50
        },
        "description": {
          "type": "string",
          "description": "API definition description."
        },
        "specification": {
          "$ref": "#/definitions/ApiDefinitionPropertiesSpecification",
          "description": "API specification details.",
          "readOnly": true
        }
      },
      "required": [
        "title"
      ]
    },
    "ApiDefinitionPropertiesSpecification": {
      "type": "object",
      "description": "API specification details.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Specification name."
        },
        "version": {
          "type": "string",
          "description": "Specification version."
        }
      }
    },
    "ApiImportSuccess": {
      "type": "object",
      "description": "The API specification was successfully imported."
    },
    "ApiKind": {
      "type": "string",
      "description": "The kind of the API",
      "enum": [
        "rest",
        "graphql",
        "grpc",
        "soap",
        "webhook",
        "websocket"
      ],
      "x-ms-enum": {
        "name": "ApiKind",
        "modelAsString": true,
        "values": [
          {
            "name": "rest",
            "value": "rest",
            "description": "A Representational State Transfer Api"
          },
          {
            "name": "graphql",
            "value": "graphql",
            "description": "A Graph query language Api"
          },
          {
            "name": "grpc",
            "value": "grpc",
            "description": "A gRPC Api"
          },
          {
            "name": "soap",
            "value": "soap",
            "description": "A SOAP Api"
          },
          {
            "name": "webhook",
            "value": "webhook",
            "description": "Web Hook"
          },
          {
            "name": "websocket",
            "value": "websocket",
            "description": "Web Socket"
          }
        ]
      }
    },
    "ApiListResult": {
      "type": "object",
      "description": "The response of a Api list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Api items on this page",
          "items": {
            "$ref": "#/definitions/Api"
          },
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "readOnly": true
        }
      },
      "required": [
        "value"
      ]
    },
    "ApiProperties": {
      "type": "object",
      "description": "API properties.",
      "properties": {
        "title": {
          "type": "string",
          "description": "API title.",
          "minLength": 1,
          "maxLength": 50
        },
        "kind": {
          "$ref": "#/definitions/ApiKind",
          "description": "Kind of API. For example, REST or GraphQL."
        },
        "description": {
          "type": "string",
          "description": "Description of the API.",
          "maxLength": 1000
        },
        "summary": {
          "type": "string",
          "description": "Short description of the API.",
          "maxLength": 200
        },
        "lifecycleStage": {
          "$ref": "#/definitions/LifecycleStage",
          "description": "Current lifecycle stage of the API.",
          "readOnly": true
        },
        "termsOfService": {
          "$ref": "#/definitions/TermsOfService",
          "description": "Terms of service for the API."
        },
        "externalDocumentation": {
          "type": "array",
          "description": "The set of external documentation",
          "maxItems": 20,
          "items": {
            "$ref": "#/definitions/ExternalDocumentation"
          },
          "x-ms-identifiers": []
        },
        "contacts": {
          "type": "array",
          "description": "The set of contacts",
          "items": {
            "$ref": "#/definitions/Contact"
          },
          "x-ms-identifiers": []
        },
        "license": {
          "$ref": "#/definitions/License",
          "description": "The license information for the API."
        },
        "customProperties": {
          "$ref": "#/definitions/CustomProperties",
          "description": "The custom metadata defined for API catalog entities."
        }
      },
      "required": [
        "title",
        "kind"
      ]
    },
    "ApiSpecExportResult": {
      "type": "object",
      "description": "The API specification export result.",
      "properties": {
        "format": {
          "$ref": "#/definitions/ApiSpecExportResultFormat",
          "description": "The format of exported result"
        },
        "value": {
          "type": "string",
          "description": "The result of the export operation."
        }
      }
    },
    "ApiSpecExportResultFormat": {
      "type": "string",
      "description": "Result format for exported Api spec",
      "enum": [
        "inline",
        "link"
      ],
      "x-ms-enum": {
        "name": "ApiSpecExportResultFormat",
        "modelAsString": true,
        "values": [
          {
            "name": "inline",
            "value": "inline",
            "description": "The inlined content of a specification document."
          },
          {
            "name": "link",
            "value": "link",
            "description": "The link to the result of the export operation. The URL is valid for 5 minutes."
          }
        ]
      }
    },
    "ApiSpecImportRequest": {
      "type": "object",
      "description": "The API specification source entity properties.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Value of the API specification source."
        },
        "format": {
          "$ref": "#/definitions/ApiSpecImportSourceFormat",
          "description": "Format of the API specification source."
        },
        "specification": {
          "$ref": "#/definitions/ApiSpecImportRequestSpecification",
          "description": "API specification details."
        }
      }
    },
    "ApiSpecImportRequestSpecification": {
      "type": "object",
      "description": "API specification details.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Specification name."
        },
        "version": {
          "type": "string",
          "description": "Specification version."
        }
      }
    },
    "ApiSpecImportSourceFormat": {
      "type": "string",
      "description": "Source format for imported Api spec",
      "enum": [
        "inline",
        "link"
      ],
      "x-ms-enum": {
        "name": "ApiSpecImportSourceFormat",
        "modelAsString": true,
        "values": [
          {
            "name": "inline",
            "value": "inline",
            "description": "The inlined content of a specification document."
          },
          {
            "name": "link",
            "value": "link",
            "description": "The link to a specification document hosted on a publicly accessible internet\naddress."
          }
        ]
      }
    },
    "ApiVersion": {
      "type": "object",
      "description": "API version entity.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ApiVersionProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "ApiVersionListResult": {
      "type": "object",
      "description": "The response of a ApiVersion list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The ApiVersion items on this page",
          "items": {
            "$ref": "#/definitions/ApiVersion"
          },
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "readOnly": true
        }
      },
      "required": [
        "value"
      ]
    },
    "ApiVersionProperties": {
      "type": "object",
      "description": "API version properties entity.",
      "properties": {
        "title": {
          "type": "string",
          "description": "API version title.",
          "minLength": 1,
          "maxLength": 50
        },
        "lifecycleStage": {
          "$ref": "#/definitions/LifecycleStage",
          "description": "Current lifecycle stage of the API."
        }
      },
      "required": [
        "title",
        "lifecycleStage"
      ]
    },
    "Contact": {
      "type": "object",
      "description": "Contact information",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the contact.",
          "maxLength": 100
        },
        "url": {
          "type": "string",
          "format": "uri",
          "description": "URL for the contact.",
          "maxLength": 200
        },
        "email": {
          "type": "string",
          "description": "Email address of the contact.",
          "maxLength": 100
        }
      }
    },
    "CreatedByType": {
      "type": "string",
      "description": "How the resource was created",
      "enum": [
        "User",
        "Application",
        "ManagedIdentity",
        "Key"
      ],
      "x-ms-enum": {
        "name": "CreatedByType",
        "modelAsString": true,
        "values": [
          {
            "name": "User",
            "value": "User",
            "description": "Created by user"
          },
          {
            "name": "Application",
            "value": "Application",
            "description": "Created by Application"
          },
          {
            "name": "ManagedIdentity",
            "value": "ManagedIdentity",
            "description": "Created by Managed Identity"
          },
          {
            "name": "Key",
            "value": "Key",
            "description": "Created By Key"
          }
        ]
      }
    },
    "CustomProperties": {
      "type": "object",
      "title": "Custom Properties",
      "description": "The custom metadata defined for API catalog entities."
    },
    "Deployment": {
      "type": "object",
      "description": "API deployment entity.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/DeploymentProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "DeploymentListResult": {
      "type": "object",
      "description": "The response of a Deployment list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Deployment items on this page",
          "items": {
            "$ref": "#/definitions/Deployment"
          },
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "readOnly": true
        }
      },
      "required": [
        "value"
      ]
    },
    "DeploymentProperties": {
      "type": "object",
      "description": "API deployment entity properties.",
      "properties": {
        "title": {
          "type": "string",
          "description": "API deployment title",
          "minLength": 1,
          "maxLength": 50
        },
        "description": {
          "type": "string",
          "description": "Description of the deployment.",
          "maxLength": 500
        },
        "environmentId": {
          "type": "string",
          "description": "API center-scoped environment resource ID."
        },
        "definitionId": {
          "type": "string",
          "description": "API center-scoped definition resource ID."
        },
        "state": {
          "$ref": "#/definitions/DeploymentState",
          "description": "State of API deployment."
        },
        "server": {
          "$ref": "#/definitions/DeploymentServer",
          "description": "The deployment server"
        },
        "customProperties": {
          "$ref": "#/definitions/CustomProperties",
          "description": "The custom metadata defined for API catalog entities."
        }
      }
    },
    "DeploymentServer": {
      "type": "object",
      "description": "Server",
      "properties": {
        "runtimeUri": {
          "type": "array",
          "description": "Base runtime URLs for this deployment.",
          "items": {
            "$ref": "#/definitions/SmallString"
          }
        }
      }
    },
    "DeploymentState": {
      "type": "string",
      "description": "State of the Deployment",
      "enum": [
        "active",
        "inactive"
      ],
      "x-ms-enum": {
        "name": "DeploymentState",
        "modelAsString": true,
        "values": [
          {
            "name": "active",
            "value": "active",
            "description": "Active State"
          },
          {
            "name": "inactive",
            "value": "inactive",
            "description": "Inactive State"
          }
        ]
      }
    },
    "Environment": {
      "type": "object",
      "description": "Environment entity.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/EnvironmentProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "EnvironmentKind": {
      "type": "string",
      "description": "The kind of environment",
      "enum": [
        "development",
        "testing",
        "staging",
        "production"
      ],
      "x-ms-enum": {
        "name": "EnvironmentKind",
        "modelAsString": true,
        "values": [
          {
            "name": "development",
            "value": "development",
            "description": "Development environment"
          },
          {
            "name": "testing",
            "value": "testing",
            "description": "Testing environment"
          },
          {
            "name": "staging",
            "value": "staging",
            "description": "Staging environment"
          },
          {
            "name": "production",
            "value": "production",
            "description": "Production environment"
          }
        ]
      }
    },
    "EnvironmentListResult": {
      "type": "object",
      "description": "The response of a Environment list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Environment items on this page",
          "items": {
            "$ref": "#/definitions/Environment"
          },
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "readOnly": true
        }
      },
      "required": [
        "value"
      ]
    },
    "EnvironmentProperties": {
      "type": "object",
      "description": "Environment properties entity.",
      "properties": {
        "title": {
          "type": "string",
          "description": "Environment title.",
          "minLength": 1,
          "maxLength": 50
        },
        "description": {
          "type": "string",
          "description": "The environment description."
        },
        "kind": {
          "$ref": "#/definitions/EnvironmentKind",
          "description": "Environment kind."
        },
        "server": {
          "$ref": "#/definitions/EnvironmentServer",
          "description": "Server information of the environment."
        },
        "onboarding": {
          "$ref": "#/definitions/Onboarding",
          "description": "Environment onboarding information"
        },
        "customProperties": {
          "$ref": "#/definitions/CustomProperties",
          "description": "The custom metadata defined for API catalog entities."
        }
      },
      "required": [
        "title",
        "kind"
      ]
    },
    "EnvironmentServer": {
      "type": "object",
      "description": "Server information of the environment.",
      "properties": {
        "type": {
          "$ref": "#/definitions/EnvironmentServerType",
          "description": "Type of the server that represents the environment."
        },
        "managementPortalUri": {
          "type": "array",
          "description": "The location of the management portal",
          "maxItems": 1,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EnvironmentServerType": {
      "type": "string",
      "description": "The type of environment server",
      "enum": [
        "Azure API Management",
        "Azure compute service",
        "Apigee API Management",
        "AWS API Gateway",
        "Kong API Gateway",
        "Kubernetes",
        "MuleSoft API Management"
      ],
      "x-ms-enum": {
        "name": "EnvironmentServerType",
        "modelAsString": true,
        "values": [
          {
            "name": "Azure API Management",
            "value": "Azure API Management",
            "description": "Api Management Server"
          },
          {
            "name": "Azure compute service",
            "value": "Azure compute service",
            "description": "Compute server"
          },
          {
            "name": "Apigee API Management",
            "value": "Apigee API Management",
            "description": "Apigee server"
          },
          {
            "name": "AWS API Gateway",
            "value": "AWS API Gateway",
            "description": "AWS Api Gateway server"
          },
          {
            "name": "Kong API Gateway",
            "value": "Kong API Gateway",
            "description": "Kong API Gateway server"
          },
          {
            "name": "Kubernetes",
            "value": "Kubernetes",
            "description": "Kubernetes server"
          },
          {
            "name": "MuleSoft API Management",
            "value": "MuleSoft API Management",
            "description": "Mulesoft Api Management server"
          }
        ]
      }
    },
    "ExternalDocumentation": {
      "type": "object",
      "description": "Additional, external documentation for the API.",
      "properties": {
        "title": {
          "type": "string",
          "description": "Title of the documentation.",
          "maxLength": 50
        },
        "description": {
          "type": "string",
          "description": "Description of the documentation.",
          "maxLength": 500
        },
        "url": {
          "type": "string",
          "format": "uri",
          "description": "URL pointing to the documentation.",
          "maxLength": 200
        }
      },
      "required": [
        "url"
      ]
    },
    "License": {
      "type": "object",
      "description": "The license information for the API.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the license.",
          "maxLength": 100
        },
        "url": {
          "type": "string",
          "format": "uri",
          "description": "URL pointing to the license details. The URL field is mutually exclusive of the\nidentifier field.",
          "maxLength": 200
        },
        "identifier": {
          "type": "string",
          "format": "uri",
          "description": "SPDX license information for the API. The identifier field is mutually\nexclusive of the URL field.",
          "maxLength": 50
        }
      }
    },
    "LifecycleStage": {
      "type": "string",
      "description": "The stage of the Api development lifecycle",
      "enum": [
        "design",
        "development",
        "testing",
        "preview",
        "production",
        "deprecated",
        "retired"
      ],
      "x-ms-enum": {
        "name": "LifecycleStage",
        "modelAsString": true,
        "values": [
          {
            "name": "design",
            "value": "design",
            "description": "design stage"
          },
          {
            "name": "development",
            "value": "development",
            "description": "development stage"
          },
          {
            "name": "testing",
            "value": "testing",
            "description": "testing stage"
          },
          {
            "name": "preview",
            "value": "preview",
            "description": "In preview"
          },
          {
            "name": "production",
            "value": "production",
            "description": "In production"
          },
          {
            "name": "deprecated",
            "value": "deprecated",
            "description": "deprecated stage"
          },
          {
            "name": "retired",
            "value": "retired",
            "description": "Retired stage"
          }
        ]
      }
    },
    "ManagedServiceIdentityType": {
      "type": "string",
      "description": "The type of managed service identity",
      "enum": [
        "None",
        "SystemAssigned",
        "UserAssigned",
        "SystemAssigned,UserAssigned"
      ],
      "x-ms-enum": {
        "name": "ManagedServiceIdentityType",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "None",
            "description": "No identity"
          },
          {
            "name": "SystemAssigned",
            "value": "SystemAssigned",
            "description": "Assigned by the system"
          },
          {
            "name": "UserAssigned",
            "value": "UserAssigned",
            "description": "assigned by the user"
          },
          {
            "name": "SystemAssigned,UserAssigned",
            "value": "SystemAssigned,UserAssigned",
            "description": "Both system-assigned and user-assigned identities"
          }
        ]
      }
    },
    "MetadataAssignment": {
      "type": "object",
      "description": "Assignment metadata",
      "properties": {
        "entity": {
          "$ref": "#/definitions/MetadataAssignmentEntity",
          "description": "The entities this metadata schema component gets applied to."
        },
        "required": {
          "type": "boolean",
          "description": "Required assignment"
        },
        "deprecated": {
          "type": "boolean",
          "description": "Deprecated assignment"
        }
      }
    },
    "MetadataAssignmentEntity": {
      "type": "string",
      "description": "Assignment entity for Metadata",
      "enum": [
        "api",
        "environment",
        "deployment"
      ],
      "x-ms-enum": {
        "name": "MetadataAssignmentEntity",
        "modelAsString": true,
        "values": [
          {
            "name": "api",
            "value": "api",
            "description": "Assigned to API"
          },
          {
            "name": "environment",
            "value": "environment",
            "description": "Assigned to Environment"
          },
          {
            "name": "deployment",
            "value": "deployment",
            "description": "Assigned to Deployment"
          }
        ]
      }
    },
    "MetadataSchema": {
      "type": "object",
      "description": "Metadata schema entity. Used to define metadata for the entities in API catalog.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/MetadataSchemaProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "MetadataSchemaExportFormat": {
      "type": "string",
      "description": "The format for schema export",
      "enum": [
        "inline",
        "link"
      ],
      "x-ms-enum": {
        "name": "MetadataSchemaExportFormat",
        "modelAsString": true,
        "values": [
          {
            "name": "inline",
            "value": "inline",
            "description": "The inlined content of a schema document."
          },
          {
            "name": "link",
            "value": "link",
            "description": "The link to a schema document. The URL is valid for 5 minutes."
          }
        ]
      }
    },
    "MetadataSchemaExportRequest": {
      "type": "object",
      "description": "The metadata schema export request.",
      "properties": {
        "assignedTo": {
          "$ref": "#/definitions/MetadataAssignmentEntity",
          "description": "An entity the metadata schema is requested for."
        }
      }
    },
    "MetadataSchemaExportResult": {
      "type": "object",
      "description": "The metadata schema export result.",
      "properties": {
        "format": {
          "$ref": "#/definitions/MetadataSchemaExportFormat",
          "description": "The export format for the schema"
        },
        "value": {
          "type": "string",
          "description": "The result of the export operation."
        }
      }
    },
    "MetadataSchemaListResult": {
      "type": "object",
      "description": "The response of a MetadataSchema list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The MetadataSchema items on this page",
          "items": {
            "$ref": "#/definitions/MetadataSchema"
          },
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "readOnly": true
        }
      },
      "required": [
        "value"
      ]
    },
    "MetadataSchemaProperties": {
      "type": "object",
      "description": "Metadata schema properties.",
      "properties": {
        "schema": {
          "type": "string",
          "description": "The schema defining the type."
        },
        "assignedTo": {
          "type": "array",
          "description": "The assignees",
          "items": {
            "$ref": "#/definitions/MetadataAssignment"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "schema"
      ]
    },
    "Onboarding": {
      "type": "object",
      "description": "Onboarding information",
      "properties": {
        "instructions": {
          "type": "string",
          "description": "Onboarding guide."
        },
        "developerPortalUri": {
          "type": "array",
          "description": "The location of the development portal",
          "maxItems": 1,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Origin": {
      "type": "string",
      "description": "The expected types of origin",
      "enum": [
        "user",
        "system",
        "user,system"
      ],
      "x-ms-enum": {
        "name": "Origin",
        "modelAsString": true,
        "values": [
          {
            "name": "user",
            "value": "user",
            "description": "Origin with User"
          },
          {
            "name": "system",
            "value": "system",
            "description": "Origin with System"
          },
          {
            "name": "user,system",
            "value": "user,system",
            "description": "Origin with user and system"
          }
        ]
      }
    },
    "ProvisioningState": {
      "type": "string",
      "description": "The provisioning state of the resource",
      "enum": [
        "Succeeded",
        "Failed",
        "Canceled"
      ],
      "x-ms-enum": {
        "name": "ProvisioningState",
        "modelAsString": true,
        "values": [
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "Resource has been created."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "Resource creation failed."
          },
          {
            "name": "Canceled",
            "value": "Canceled",
            "description": "Resource creation was canceled."
          }
        ]
      },
      "readOnly": true
    },
    "Service": {
      "type": "object",
      "description": "The service entity.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ServiceProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true
        },
        "identity": {
          "$ref": "../../../../../common-types/resource-management/v5/managedidentity.json#/definitions/ManagedServiceIdentity",
          "description": "The managed service identities assigned to this resource."
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "ServiceListResult": {
      "type": "object",
      "description": "The response of a Service list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Service items on this page",
          "items": {
            "$ref": "#/definitions/Service"
          },
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "readOnly": true
        }
      },
      "required": [
        "value"
      ]
    },
    "ServiceProperties": {
      "type": "object",
      "description": "The properties of the service.",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "Provisioning state of the service.",
          "readOnly": true
        }
      }
    },
    "ServiceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the Service.",
      "properties": {
        "identity": {
          "$ref": "../../../../../common-types/resource-management/v5/managedidentity.json#/definitions/ManagedServiceIdentity",
          "description": "The managed service identities assigned to this resource."
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "SmallString": {
      "type": "string",
      "format": "uri",
      "description": "Used for restricted length uris",
      "maxLength": 200
    },
    "TermsOfService": {
      "type": "object",
      "description": "Terms of service for the API.",
      "properties": {
        "url": {
          "type": "string",
          "format": "uri",
          "description": "URL pointing to the terms of service.",
          "maxLength": 200
        }
      },
      "required": [
        "url"
      ]
    },
    "Workspace": {
      "type": "object",
      "description": "Workspace entity.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/WorkspaceProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/ProxyResource"
        }
      ]
    },
    "WorkspaceListResult": {
      "type": "object",
      "description": "The response of a Workspace list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Workspace items on this page",
          "items": {
            "$ref": "#/definitions/Workspace"
          },
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items",
          "readOnly": true
        }
      },
      "required": [
        "value"
      ]
    },
    "WorkspaceProperties": {
      "type": "object",
      "description": "Workspace properties.",
      "properties": {
        "title": {
          "type": "string",
          "description": "Workspace title.",
          "minLength": 1,
          "maxLength": 50
        },
        "description": {
          "type": "string",
          "description": "Workspace description."
        }
      },
      "required": [
        "title"
      ]
    },
    "AzureEntityResource": {
      "type": "object",
      "title": "Entity Resource",
      "description": "The resource model definition for an Azure Resource Manager resource with an etag.",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Resource Etag.",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "x-ms-client-name": "AzureEntityResource"
    },
    "CheckNameAvailabilityRequest": {
      "type": "object",
      "description": "The check availability request body.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the resource for which availability needs to be checked."
        },
        "type": {
          "type": "string",
          "description": "The resource type."
        }
      }
    },
    "CheckNameAvailabilityResponse": {
      "type": "object",
      "description": "The check availability result.",
      "properties": {
        "nameAvailable": {
          "type": "boolean",
          "description": "Indicates if the resource name is available."
        },
        "reason": {
          "type": "string",
          "description": "The reason why the given name is not available.",
          "enum": [
            "Invalid",
            "AlreadyExists"
          ],
          "x-ms-enum": {
            "name": "CheckNameAvailabilityReason",
            "modelAsString": true
          }
        },
        "message": {
          "type": "string",
          "description": "Detailed reason why the given name is available."
        }
      }
    },
    "ErrorAdditionalInfo": {
      "type": "object",
      "description": "The resource management error additional info.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The additional info type.",
          "readOnly": true
        },
        "info": {
          "type": "object",
          "description": "The additional info.",
          "readOnly": true
        }
      }
    },
    "ErrorDetail": {
      "type": "object",
      "description": "The error detail.",
      "properties": {
        "code": {
          "type": "string",
          "description": "The error code.",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "description": "The error message.",
          "readOnly": true
        },
        "target": {
          "type": "string",
          "description": "The error target.",
          "readOnly": true
        },
        "details": {
          "type": "array",
          "description": "The error details.",
          "items": {
            "$ref": "#/definitions/ErrorDetail"
          },
          "readOnly": true,
          "x-ms-identifiers": [
            "message",
            "target"
          ]
        },
        "additionalInfo": {
          "type": "array",
          "description": "The error additional info.",
          "items": {
            "$ref": "#/definitions/ErrorAdditionalInfo"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "title": "Error response",
      "description": "Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorDetail",
          "description": "The error object."
        }
      }
    },
    "Identity": {
      "type": "object",
      "description": "Identity for the resource.",
      "properties": {
        "principalId": {
          "type": "string",
          "format": "uuid",
          "description": "The principal ID of resource identity. The value must be an UUID.",
          "readOnly": true
        },
        "tenantId": {
          "type": "string",
          "format": "uuid",
          "description": "The tenant ID of resource. The value must be an UUID.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The identity type.",
          "enum": [
            "SystemAssigned"
          ],
          "x-ms-enum": {
            "name": "ResourceIdentityType",
            "modelAsString": false
          }
        }
      }
    },
    "KeyVaultProperties": {
      "type": "object",
      "properties": {
        "keyIdentifier": {
          "type": "string",
          "description": "Key vault uri to access the encryption key."
        },
        "identity": {
          "type": "string",
          "description": "The client ID of the identity which will be used to access key vault."
        }
      }
    },
    "Operation": {
      "type": "object",
      "title": "REST API Operation",
      "description": "Details of a REST API operation, returned from the Resource Provider Operations API",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the operation, as per Resource-Based Access Control (RBAC). Examples: \"Microsoft.Compute/virtualMachines/write\", \"Microsoft.Compute/virtualMachines/capture/action\"",
          "readOnly": true
        },
        "isDataAction": {
          "type": "boolean",
          "description": "Whether the operation applies to data-plane. This is \"true\" for data-plane operations and \"false\" for ARM/control-plane operations.",
          "readOnly": true
        },
        "display": {
          "type": "object",
          "description": "Localized display information for this particular operation.",
          "properties": {
            "provider": {
              "type": "string",
              "description": "The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring Insights\" or \"Microsoft Compute\".",
              "readOnly": true
            },
            "resource": {
              "type": "string",
              "description": "The localized friendly name of the resource type related to this operation. E.g. \"Virtual Machines\" or \"Job Schedule Collections\".",
              "readOnly": true
            },
            "operation": {
              "type": "string",
              "description": "The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create or Update Virtual Machine\", \"Restart Virtual Machine\".",
              "readOnly": true
            },
            "description": {
              "type": "string",
              "description": "The short, localized friendly description of the operation; suitable for tool tips and detailed views.",
              "readOnly": true
            }
          }
        },
        "origin": {
          "type": "string",
          "description": "The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is \"user,system\"",
          "enum": [
            "user",
            "system",
            "user,system"
          ],
          "x-ms-enum": {
            "name": "Origin",
            "modelAsString": true
          },
          "readOnly": true
        },
        "actionType": {
          "type": "string",
          "description": "Enum. Indicates the action type. \"Internal\" refers to actions that are for internal only APIs.",
          "enum": [
            "Internal"
          ],
          "x-ms-enum": {
            "name": "ActionType",
            "modelAsString": true
          },
          "readOnly": true
        }
      }
    },
    "OperationListResult": {
      "type": "object",
      "description": "A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results.",
      "properties": {
        "value": {
          "type": "array",
          "description": "List of operations supported by the resource provider",
          "items": {
            "$ref": "#/definitions/Operation"
          },
          "readOnly": true,
          "x-ms-identifiers": [
            "name"
          ]
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "URL to get the next set of operation list results (if there are any).",
          "readOnly": true
        }
      }
    },
    "OperationStatusResult": {
      "type": "object",
      "description": "The current status of an async operation.",
      "properties": {
        "id": {
          "type": "string",
          "format": "arm-id",
          "description": "Fully qualified ID for the async operation."
        },
        "resourceId": {
          "type": "string",
          "format": "arm-id",
          "description": "Fully qualified ID of the resource against which the original async operation was started.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Name of the async operation."
        },
        "status": {
          "type": "string",
          "description": "Operation status."
        },
        "percentComplete": {
          "type": "number",
          "description": "Percent of the operation that is complete.",
          "minimum": 0,
          "maximum": 100
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "The start time of the operation."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "The end time of the operation."
        },
        "operations": {
          "type": "array",
          "description": "The operations list.",
          "items": {
            "$ref": "#/definitions/OperationStatusResult"
          }
        },
        "error": {
          "$ref": "#/definitions/ErrorDetail",
          "description": "If present, details of the operation error."
        }
      },
      "required": [
        "status"
      ]
    },
    "Plan": {
      "type": "object",
      "description": "Plan for the resource.",
      "properties": {
        "name": {
          "type": "string",
          "description": "A user defined name of the 3rd Party Artifact that is being procured."
        },
        "publisher": {
          "type": "string",
          "description": "The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic"
        },
        "product": {
          "type": "string",
          "description": "The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. "
        },
        "promotionCode": {
          "type": "string",
          "description": "A publisher provided promotion code as provisioned in Data Market for the said product/artifact."
        },
        "version": {
          "type": "string",
          "description": "The version of the desired product/artifact."
        }
      },
      "required": [
        "name",
        "publisher",
        "product"
      ]
    },
    "ProxyResource": {
      "type": "object",
      "title": "Proxy Resource",
      "description": "The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "Resource": {
      "type": "object",
      "title": "Resource",
      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
      "properties": {
        "id": {
          "type": "string",
          "format": "arm-id",
          "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "$ref": "#/definitions/systemData",
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true
        }
      },
      "x-ms-azure-resource": true
    },
    "ResourceModelWithAllowedPropertySet": {
      "type": "object",
      "description": "The resource model definition containing the full set of allowed properties for a resource. Except properties bag, there cannot be a top level property outside of this set.",
      "properties": {
        "managedBy": {
          "type": "string",
          "description": "The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is removed from the template since it is managed by another resource.",
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "kind": {
          "type": "string",
          "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type. E.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.",
          "pattern": "^[-\\w\\._,\\(\\)]+$",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "etag": {
          "type": "string",
          "description": "The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. ",
          "readOnly": true
        },
        "identity": {
          "allOf": [
            {
              "$ref": "#/definitions/Identity"
            }
          ]
        },
        "sku": {
          "allOf": [
            {
              "$ref": "#/definitions/Sku"
            }
          ]
        },
        "plan": {
          "allOf": [
            {
              "$ref": "#/definitions/Plan"
            }
          ]
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TrackedResource"
        }
      ],
      "x-ms-azure-resource": true
    },
    "Sku": {
      "type": "object",
      "description": "The resource model definition representing SKU",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the SKU. E.g. P3. It is typically a letter+number code"
        },
        "tier": {
          "$ref": "#/definitions/SkuTier"
        },
        "size": {
          "type": "string",
          "description": "The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. "
        },
        "family": {
          "type": "string",
          "description": "If the service has different generations of hardware, for the same SKU, then that can be captured here."
        },
        "capacity": {
          "type": "integer",
          "format": "int32",
          "description": "If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted."
        }
      },
      "required": [
        "name"
      ]
    },
    "SkuTier": {
      "type": "string",
      "description": "This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.",
      "enum": [
        "Free",
        "Basic",
        "Standard",
        "Premium"
      ],
      "x-ms-enum": {
        "name": "SkuTier",
        "modelAsString": false
      }
    },
    "TrackedResource": {
      "type": "object",
      "title": "Tracked Resource",
      "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "location"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "encryptionProperties": {
      "type": "object",
      "description": "Configuration of key for data encryption",
      "properties": {
        "status": {
          "type": "string",
          "description": "Indicates whether or not the encryption is enabled for container registry.",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-ms-enum": {
            "name": "EncryptionStatus",
            "modelAsString": true
          }
        },
        "keyVaultProperties": {
          "$ref": "#/definitions/KeyVaultProperties",
          "description": "Key vault properties."
        }
      }
    },
    "locationData": {
      "type": "object",
      "description": "Metadata pertaining to the geographic location of the resource.",
      "properties": {
        "name": {
          "type": "string",
          "description": "A canonical name for the geographic or physical location.",
          "maxLength": 256
        },
        "city": {
          "type": "string",
          "description": "The city or locality where the resource is located."
        },
        "district": {
          "type": "string",
          "description": "The district, state, or province where the resource is located."
        },
        "countryOrRegion": {
          "type": "string",
          "description": "The country or region where the resource is located"
        }
      },
      "required": [
        "name"
      ]
    },
    "systemData": {
      "type": "object",
      "description": "Metadata pertaining to creation and last modification of the resource.",
      "properties": {
        "createdBy": {
          "type": "string",
          "description": "The identity that created the resource."
        },
        "createdByType": {
          "type": "string",
          "description": "The type of identity that created the resource.",
          "enum": [
            "User",
            "Application",
            "ManagedIdentity",
            "Key"
          ],
          "x-ms-enum": {
            "name": "createdByType",
            "modelAsString": true
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of resource creation (UTC)."
        },
        "lastModifiedBy": {
          "type": "string",
          "description": "The identity that last modified the resource."
        },
        "lastModifiedByType": {
          "type": "string",
          "description": "The type of identity that last modified the resource.",
          "enum": [
            "User",
            "Application",
            "ManagedIdentity",
            "Key"
          ],
          "x-ms-enum": {
            "name": "createdByType",
            "modelAsString": true
          }
        },
        "lastModifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of resource last modification (UTC)"
        }
      },
      "readOnly": true
    }
  }
}