{
  "openapi": "3.0.0",
  "info": {
    "title": "Microsoft.Insights",
    "version": "2024-02-01"
  },
  "components": {},
  "paths": {
    "/{resourceUri}/providers/microsoft.insights/metricNamespaces": {
      "get": {
        "tags": [
          "metricNamespaces"
        ],
        "operationId": "MetricNamespaces_List",
        "description": "Lists the metric namespaces for the resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceUriParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/StartTimeParameter"
          }
        ],
        "responses": {
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successful request to get the list of metric namespaces",
            "schema": {
              "$ref": "#/definitions/MetricNamespaceCollection"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        },
        "x-ms-examples": {
          "Get Metric Namespaces without filter": {
            "$ref": "./examples/GetMetricNamespaces.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Insights/metrics": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "operationId": "Metrics_ListAtSubscriptionScope",
        "description": "**Lists the metric data for a subscription**. This API used the [default ARM throttling limits](https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/request-limits-and-throttling).",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/RegionParameter"
          },
          {
            "$ref": "#/parameters/TimespanParameter"
          },
          {
            "$ref": "#/parameters/IntervalParameter"
          },
          {
            "$ref": "#/parameters/MetricNamesParameter"
          },
          {
            "$ref": "#/parameters/AggregationsParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          },
          {
            "$ref": "#/parameters/OrderByParameter"
          },
          {
            "$ref": "#/parameters/FilterParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionScopeResultTypeParameter"
          },
          {
            "$ref": "#/parameters/MetricNamespaceParameter"
          },
          {
            "$ref": "#/parameters/AutoAdjustTimegrain"
          },
          {
            "$ref": "#/parameters/ValidateDimensions"
          },
          {
            "$ref": "#/parameters/RollUpByParameter"
          }
        ],
        "responses": {
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../common-types/v2/commonMonitoringTypes.json#/definitions/ErrorContract"
            }
          },
          "200": {
            "description": "Successful request to get the list of metric values.",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          }
        },
        "x-ms-odata": "../../../../common-types/v2/commonMonitoringTypes.json#/definitions/MetadataValue",
        "x-ms-examples": {
          "Get subscription level metric data": {
            "$ref": "./examples/GetMultiResourceMetric.json"
          },
          "Get subscription level metric metadata": {
            "$ref": "./examples/GetMultiResourceMetricMetadata.json"
          }
        }
      },
      "post": {
        "tags": [
          "Metrics"
        ],
        "operationId": "Metrics_ListAtSubscriptionScopePost",
        "description": "**Lists the metric data for a subscription**. Parameters can be specified on either query params or the body. This API used the [default ARM throttling limits](https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/request-limits-and-throttling).",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/RegionParameter"
          },
          {
            "$ref": "#/parameters/TimespanParameter"
          },
          {
            "$ref": "#/parameters/IntervalParameter"
          },
          {
            "$ref": "#/parameters/MetricNamesParameter"
          },
          {
            "$ref": "#/parameters/AggregationsParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          },
          {
            "$ref": "#/parameters/OrderByParameter"
          },
          {
            "$ref": "#/parameters/FilterParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionScopeResultTypeParameter"
          },
          {
            "$ref": "#/parameters/MetricNamespaceParameter"
          },
          {
            "$ref": "#/parameters/AutoAdjustTimegrain"
          },
          {
            "$ref": "#/parameters/ValidateDimensions"
          },
          {
            "$ref": "#/parameters/RollUpByParameter"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Parameters serialized in the body",
            "schema": {
              "$ref": "#/definitions/SubscriptionScopeMetricsRequestBodyParameters"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../common-types/v2/commonMonitoringTypes.json#/definitions/ErrorContract"
            }
          },
          "200": {
            "description": "Successful request to get the list of metric values.",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          }
        },
        "x-ms-odata": "../../../../common-types/v2/commonMonitoringTypes.json#/definitions/MetadataValue",
        "x-ms-examples": {
          "Post request for subscription level metric data": {
            "$ref": "./examples/GetMultiResourceMetric.json"
          },
          "Post request for subscription level metric data using body params": {
            "$ref": "./examples/PostMultiResourceMetricBody.json"
          },
          "Post request for subscription level metric metadata": {
            "$ref": "./examples/GetMultiResourceMetricMetadata.json"
          }
        }
      }
    },
    "/{resourceUri}/providers/Microsoft.Insights/metrics": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "operationId": "Metrics_List",
        "description": "**Lists the metric values for a resource**. This API used the [default ARM throttling limits](https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/request-limits-and-throttling).",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceUriParameter"
          },
          {
            "$ref": "#/parameters/TimespanParameter"
          },
          {
            "$ref": "#/parameters/IntervalParameter"
          },
          {
            "$ref": "#/parameters/MetricNamesParameter"
          },
          {
            "$ref": "#/parameters/AggregationsParameter"
          },
          {
            "$ref": "#/parameters/TopParameter"
          },
          {
            "$ref": "#/parameters/OrderByParameter"
          },
          {
            "$ref": "#/parameters/FilterParameter"
          },
          {
            "$ref": "#/parameters/ResultTypeParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/MetricNamespaceParameter"
          },
          {
            "$ref": "#/parameters/AutoAdjustTimegrain"
          },
          {
            "$ref": "#/parameters/ValidateDimensions"
          },
          {
            "$ref": "#/parameters/RollUpByParameter"
          }
        ],
        "responses": {
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v1/types.json#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successful request to get the list of metric values.",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          }
        },
        "x-ms-odata": "../../../../common-types/v2/commonMonitoringTypes.json#/definitions/MetadataValue",
        "x-ms-examples": {
          "Get Metric for data": {
            "$ref": "./examples/GetMetric.json"
          },
          "Get Metric for metadata": {
            "$ref": "./examples/GetMetricMetadata.json"
          },
          "Get Metric with error": {
            "$ref": "./examples/GetMetricError.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Insights/metricDefinitions": {
      "get": {
        "tags": [
          "MetricDefinitions"
        ],
        "operationId": "MetricDefinitions_ListAtSubscriptionScope",
        "description": "Lists the metric definitions for the subscription.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/RegionParameter"
          },
          {
            "$ref": "#/parameters/MetricNamespaceParameter"
          }
        ],
        "responses": {
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../common-types/v2/commonMonitoringTypes.json#/definitions/ErrorContract"
            }
          },
          "200": {
            "description": "Successful request to get the list of metric definitions",
            "schema": {
              "$ref": "#/definitions/SubscriptionScopeMetricDefinitionCollection"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        },
        "x-ms-examples": {
          "Get Subscription level Metric Definitions without filter": {
            "$ref": "./examples/GetMultiResourceMetricDefinitions.json"
          }
        }
      }
    },
    "/{resourceUri}/providers/Microsoft.Insights/metricDefinitions": {
      "get": {
        "tags": [
          "MetricDefinitions"
        ],
        "operationId": "MetricDefinitions_List",
        "description": "Lists the metric definitions for the resource.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceUriParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/MetricNamespaceParameter"
          }
        ],
        "responses": {
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v1/types.json#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successful request to get the list of metric definitions",
            "schema": {
              "$ref": "#/definitions/MetricDefinitionCollection"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        },
        "x-ms-examples": {
          "Get Metric Definitions without filter": {
            "$ref": "./examples/GetMetricDefinitions.json"
          },
          "Get Application Insights Metric Definitions without filter": {
            "$ref": "./examples/GetMetricDefinitionsApplicationInsights.json"
          },
          "Get StorageCache Metric Definitions with metric class": {
            "$ref": "./examples/GetMetricDefinitionsMetricClass.json"
          }
        }
      }
    }
  },
  "parameters": {
    "ResourceUriParameter": {
      "name": "resourceUri",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The identifier of the resource.",
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true
    },
    "StartTimeParameter": {
      "name": "startTime",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "The ISO 8601 conform Date start time from which to query for metric namespaces.",
      "x-ms-parameter-location": "method"
    },
    "TimespanParameter": {
      "name": "timespan",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.",
      "x-ms-parameter-location": "method"
    },
    "IntervalParameter": {
      "name": "interval",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special case for 'FULL' value that returns single datapoint for entire time span requested.\n*Examples: PT15M, PT1H, P1D, FULL*",
      "x-ms-parameter-location": "method"
    },
    "MetricNamesParameter": {
      "name": "metricnames",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "The names of the metrics (comma separated) to retrieve. Limit 20 metrics.",
      "x-ms-parameter-location": "method"
    },
    "FilterParameter": {
      "name": "$filter",
      "in": "query",
      "type": "string",
      "description": "The **$filter** is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**$filter=A eq \u2018a1\u2019 and B eq \u2018b1\u2019 or B eq \u2018b2\u2019 and C eq \u2018*\u2019**<br>- Invalid variant:<br>**$filter=A eq \u2018a1\u2019 and B eq \u2018b1\u2019 and C eq \u2018*\u2019 or B = \u2018b2\u2019**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**$filter=A eq \u2018a1\u2019 and B eq \u2018b1\u2019 and C eq \u2018c1\u2019**<br>- Return all time series where A = a1<br>**$filter=A eq \u2018a1\u2019 and B eq \u2018*\u2019 and C eq \u2018*\u2019**.",
      "required": false,
      "x-ms-parameter-location": "method"
    },
    "SubscriptionScopeResultTypeParameter": {
      "name": "resultType",
      "in": "query",
      "type": "string",
      "enum": [
        "Data",
        "Metadata"
      ],
      "x-ms-enum": {
        "name": "MetricResultType",
        "modelAsString": true
      },
      "description": "Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details.",
      "x-ms-parameter-location": "method",
      "required": false
    },
    "ResultTypeParameter": {
      "name": "resultType",
      "in": "query",
      "type": "string",
      "enum": [
        "Data",
        "Metadata"
      ],
      "x-ms-enum": {
        "name": "ResultType",
        "modelAsString": false
      },
      "description": "Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details.",
      "x-ms-parameter-location": "method",
      "required": false
    },
    "AutoAdjustTimegrain": {
      "name": "AutoAdjustTimegrain",
      "in": "query",
      "required": false,
      "type": "boolean",
      "description": "When set to true, if the timespan passed in is not supported by this metric, the API will return the result using the closest supported timespan. When set to false, an error is returned for invalid timespan parameters. Defaults to false.",
      "x-ms-parameter-location": "method"
    },
    "ValidateDimensions": {
      "name": "ValidateDimensions",
      "in": "query",
      "required": false,
      "type": "boolean",
      "description": "When set to false, invalid filter parameter values will be ignored. When set to true, an error is returned for invalid filter parameters. Defaults to true.",
      "x-ms-parameter-location": "method"
    },
    "SubscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The ID of the target subscription.",
      "minLength": 1
    },
    "ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "The API version to use for this operation.",
      "minLength": 1
    },
    "ResourceGroupNameParameter": {
      "name": "resourceGroupName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of the resource group. The name is case insensitive.",
      "minLength": 1,
      "maxLength": 90,
      "x-ms-parameter-location": "method"
    },
    "OperationIdParameter": {
      "name": "operationId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The ID of an ongoing async operation.",
      "minLength": 1,
      "x-ms-parameter-location": "method"
    },
    "LocationParameter": {
      "name": "location",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of Azure region.",
      "minLength": 1,
      "x-ms-parameter-location": "method"
    },
    "RegionParameter": {
      "name": "region",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "The region where the metrics you want reside.",
      "x-ms-parameter-location": "method"
    },
    "MetricNamespaceParameter": {
      "name": "metricnamespace",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "Metric namespace where the metrics you want reside.",
      "x-ms-parameter-location": "method"
    },
    "AggregationsParameter": {
      "name": "aggregation",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "The list of aggregation types (comma separated) to retrieve.\n*Examples: average, minimum, maximum*",
      "x-ms-parameter-location": "method"
    },
    "TopParameter": {
      "name": "top",
      "in": "query",
      "required": false,
      "type": "integer",
      "format": "int32",
      "description": "The maximum number of records to retrieve per resource ID in the request.\nValid only if filter is specified.\nDefaults to 10.",
      "x-ms-parameter-location": "method"
    },
    "OrderByParameter": {
      "name": "orderby",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "The aggregation to use for sorting results and the direction of the sort.\nOnly one order can be specified.\n*Examples: sum asc*",
      "x-ms-parameter-location": "method"
    },
    "RollUpByParameter": {
      "name": "rollupby",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "Dimension name(s) to rollup results by. For example if you only want to see metric values with a filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries.",
      "x-ms-parameter-location": "method"
    }
  },
  "definitions": {
    "MetricNamespaceName": {
      "properties": {
        "metricNamespaceName": {
          "type": "string",
          "description": "The metric namespace name."
        }
      },
      "description": "The fully qualified metric namespace name."
    },
    "NamespaceClassification": {
      "type": "string",
      "description": "Kind of namespace",
      "enum": [
        "Platform",
        "Custom",
        "Qos"
      ],
      "x-ms-enum": {
        "name": "NamespaceClassification",
        "modelAsString": true
      }
    },
    "MetricNamespace": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the metric namespace."
        },
        "type": {
          "type": "string",
          "description": "The type of the namespace."
        },
        "name": {
          "type": "string",
          "description": "The escaped name of the namespace."
        },
        "classification": {
          "$ref": "#/definitions/NamespaceClassification",
          "description": "Kind of namespace"
        },
        "properties": {
          "$ref": "#/definitions/MetricNamespaceName",
          "description": "Properties which include the fully qualified namespace name."
        }
      },
      "description": "Metric namespace class specifies the metadata for a metric namespace."
    },
    "MetricNamespaceCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricNamespace"
          },
          "description": "The values for the metric namespaces."
        }
      },
      "required": [
        "value"
      ],
      "description": "Represents collection of metric namespaces."
    },
    "ErrorResponse": {
      "title": "Error response",
      "description": "Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).",
      "type": "object",
      "properties": {
        "error": {
          "description": "The error object.",
          "$ref": "#/definitions/ErrorDetail"
        }
      }
    },
    "SubscriptionScopeMetricsRequestBodyParameters": {
      "description": "Query parameters can also be specified in the body, specifying the same parameter in both the body and query parameters will result in an error.",
      "type": "object",
      "properties": {
        "timespan": {
          "description": "The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.",
          "type": "string"
        },
        "interval": {
          "description": "The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special case for 'FULL' value that returns single datapoint for entire time span requested.\n*Examples: PT15M, PT1H, P1D, FULL*",
          "type": "string"
        },
        "metricNames": {
          "description": "The names of the metrics (comma separated) to retrieve.",
          "type": "string"
        },
        "aggregation": {
          "description": "The list of aggregation types (comma separated) to retrieve.",
          "type": "string"
        },
        "filter": {
          "description": "The **$filter** is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**$filter=A eq \u2018a1\u2019 and B eq \u2018b1\u2019 or B eq \u2018b2\u2019 and C eq \u2018*\u2019**<br>- Invalid variant:<br>**$filter=A eq \u2018a1\u2019 and B eq \u2018b1\u2019 and C eq \u2018*\u2019 or B = \u2018b2\u2019**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**$filter=A eq \u2018a1\u2019 and B eq \u2018b1\u2019 and C eq \u2018c1\u2019**<br>- Return all time series where A = a1<br>**$filter=A eq \u2018a1\u2019 and B eq \u2018*\u2019 and C eq \u2018*\u2019**.",
          "type": "string"
        },
        "top": {
          "description": "The maximum number of records to retrieve.\nValid only if $filter is specified.\nDefaults to 10.",
          "type": "integer",
          "format": "int32"
        },
        "orderBy": {
          "description": "The aggregation to use for sorting results and the direction of the sort.\nOnly one order can be specified.\nExamples: sum asc.",
          "type": "string"
        },
        "rollUpBy": {
          "description": "Dimension name(s) to rollup results by. For example if you only want to see metric values with a filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries.",
          "type": "string"
        },
        "resultType": {
          "description": "Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details.",
          "type": "string",
          "enum": [
            "Data",
            "Metadata"
          ],
          "x-ms-enum": {
            "name": "MetricResultType",
            "modelAsString": true
          }
        },
        "metricNamespace": {
          "description": "Metric namespace where the metrics you want reside.",
          "type": "string"
        },
        "autoAdjustTimegrain": {
          "description": "When set to true, if the timespan passed in is not supported by this metric, the API will return the result using the closest supported timespan. When set to false, an error is returned for invalid timespan parameters. Defaults to false.",
          "type": "boolean"
        },
        "validateDimensions": {
          "description": "When set to false, invalid filter parameter values will be ignored. When set to true, an error is returned for invalid filter parameters. Defaults to true.",
          "type": "boolean"
        }
      }
    },
    "Response": {
      "type": "object",
      "description": "The response to a metrics query.",
      "properties": {
        "cost": {
          "type": "number",
          "format": "int32",
          "minimum": 0,
          "description": "The integer value representing the relative cost of the query."
        },
        "timespan": {
          "type": "string",
          "description": "The timespan for which the data was retrieved. Its value consists of two datetimes concatenated, separated by '/'.  This may be adjusted in the future and returned back from what was originally requested."
        },
        "interval": {
          "type": "string",
          "description": "The interval (window size) for which the metric data was returned in ISO 8601 duration format with a special case for 'FULL' value that returns single datapoint for entire time span requested (*Examples: PT15M, PT1H, P1D, FULL*). \nThis may be adjusted and different from what was originally requested if AutoAdjustTimegrain=true is specified. This is not present if a metadata request was made."
        },
        "namespace": {
          "type": "string",
          "description": "The namespace of the metrics being queried"
        },
        "resourceregion": {
          "type": "string",
          "description": "The region of the resource being queried for metrics."
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "../../../../common-types/v2/commonMonitoringTypes.json#/definitions/Metric"
          },
          "description": "The value of the collection."
        }
      },
      "required": [
        "timespan",
        "value"
      ]
    },
    "MetricAvailability": {
      "type": "object",
      "properties": {
        "timeGrain": {
          "type": "string",
          "format": "duration",
          "description": "The time grain specifies a supported aggregation interval for the metric. Expressed as a duration 'PT1M', 'P1D', etc."
        },
        "retention": {
          "type": "string",
          "format": "duration",
          "description": "The retention period for the metric at the specified timegrain.  Expressed as a duration 'PT1M', 'P1D', etc."
        }
      },
      "description": "Metric availability specifies the time grain (aggregation interval or frequency) and the retention period for that time grain."
    },
    "AggregationType": {
      "type": "string",
      "description": "The aggregation type of the metric.",
      "enum": [
        "None",
        "Average",
        "Count",
        "Minimum",
        "Maximum",
        "Total"
      ],
      "x-ms-enum": {
        "name": "AggregationType",
        "modelAsString": false
      }
    },
    "MetricAggregationType": {
      "type": "string",
      "description": "The aggregation type of the metric.",
      "enum": [
        "None",
        "Average",
        "Count",
        "Minimum",
        "Maximum",
        "Total"
      ],
      "x-ms-enum": {
        "name": "MetricAggregationType",
        "modelAsString": true
      }
    },
    "MetricClass": {
      "type": "string",
      "description": "The class of the metric.",
      "enum": [
        "Availability",
        "Transactions",
        "Errors",
        "Latency",
        "Saturation"
      ],
      "x-ms-enum": {
        "name": "MetricClass",
        "modelAsString": true
      }
    },
    "MetricDefinition": {
      "type": "object",
      "properties": {
        "isDimensionRequired": {
          "type": "boolean",
          "description": "Flag to indicate whether the dimension is required."
        },
        "resourceId": {
          "type": "string",
          "description": "The resource identifier of the resource that emitted the metric."
        },
        "namespace": {
          "type": "string",
          "description": "The namespace the metric belongs to."
        },
        "name": {
          "$ref": "../../../../common-types/v2/commonMonitoringTypes.json#/definitions/LocalizableString",
          "description": "The name and the display name of the metric, i.e. it is a localizable string."
        },
        "displayDescription": {
          "type": "string",
          "description": "Detailed description of this metric."
        },
        "category": {
          "type": "string",
          "description": "Custom category name for this metric."
        },
        "metricClass": {
          "$ref": "#/definitions/MetricClass",
          "description": "The class of the metric."
        },
        "unit": {
          "$ref": "../../../../common-types/v2/commonMonitoringTypes.json#/definitions/Unit",
          "description": "The unit of the metric."
        },
        "primaryAggregationType": {
          "$ref": "#/definitions/AggregationType",
          "description": "The primary aggregation type value defining how to use the values for display."
        },
        "supportedAggregationTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AggregationType"
          },
          "description": "The collection of what aggregation types are supported."
        },
        "metricAvailabilities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricAvailability"
          },
          "x-ms-identifiers": [
            "timeGrain"
          ],
          "description": "The collection of what aggregation intervals are available to be queried."
        },
        "id": {
          "type": "string",
          "description": "The resource identifier of the metric definition."
        },
        "dimensions": {
          "type": "array",
          "items": {
            "$ref": "../../../../common-types/v2/commonMonitoringTypes.json#/definitions/LocalizableString"
          },
          "x-ms-identifiers": [
            "value"
          ],
          "description": "The name and the display name of the dimension, i.e. it is a localizable string."
        }
      },
      "description": "Metric definition class specifies the metadata for a metric."
    },
    "MetricDefinitionCollection": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricDefinition"
          },
          "description": "The values for the metric definitions."
        }
      },
      "required": [
        "value"
      ],
      "description": "Represents collection of metric definitions."
    },
    "SubscriptionScopeMetricDefinition": {
      "type": "object",
      "description": "Metric definition class specifies the metadata for a metric.",
      "properties": {
        "isDimensionRequired": {
          "type": "boolean",
          "description": "Flag to indicate whether the dimension is required."
        },
        "resourceId": {
          "type": "string",
          "description": "The resource identifier of the resource that emitted the metric."
        },
        "namespace": {
          "type": "string",
          "description": "The namespace the metric belongs to."
        },
        "name": {
          "$ref": "../../../../common-types/v2/commonMonitoringTypes.json#/definitions/LocalizableString",
          "description": "The name and the display name of the metric, i.e. it is a localizable string."
        },
        "displayDescription": {
          "type": "string",
          "description": "Detailed description of this metric."
        },
        "category": {
          "type": "string",
          "description": "Custom category name for this metric."
        },
        "metricClass": {
          "$ref": "#/definitions/MetricClass",
          "description": "The class of the metric."
        },
        "unit": {
          "$ref": "../../../../common-types/v2/commonMonitoringTypes.json#/definitions/Unit",
          "description": "The unit of the metric."
        },
        "primaryAggregationType": {
          "$ref": "#/definitions/MetricAggregationType",
          "description": "The primary aggregation type value defining how to use the values for display."
        },
        "supportedAggregationTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricAggregationType"
          },
          "description": "The collection of what aggregation types are supported."
        },
        "metricAvailabilities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricAvailability"
          },
          "x-ms-identifiers": [
            "timeGrain"
          ],
          "description": "The collection of what aggregation intervals are available to be queried."
        },
        "id": {
          "type": "string",
          "description": "The resource identifier of the metric definition."
        },
        "dimensions": {
          "type": "array",
          "items": {
            "$ref": "../../../../common-types/v2/commonMonitoringTypes.json#/definitions/LocalizableString"
          },
          "x-ms-identifiers": [
            "value"
          ],
          "description": "The name and the display name of the dimension, i.e. it is a localizable string."
        }
      }
    },
    "SubscriptionScopeMetricDefinitionCollection": {
      "type": "object",
      "description": "Represents collection of metric definitions.",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscriptionScopeMetricDefinition"
          },
          "description": "The values for the metric definitions."
        }
      },
      "required": [
        "value"
      ]
    },
    "Resource": {
      "title": "Resource",
      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
      "type": "object",
      "properties": {
        "id": {
          "readOnly": true,
          "type": "string",
          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "The name of the resource"
        },
        "type": {
          "readOnly": true,
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\""
        }
      },
      "x-ms-azure-resource": true
    },
    "AzureEntityResource": {
      "x-ms-client-name": "AzureEntityResource",
      "title": "Entity Resource",
      "description": "The resource model definition for an Azure Resource Manager resource with an etag.",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "readOnly": true,
          "description": "Resource Etag."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "TrackedResource": {
      "title": "Tracked Resource",
      "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
      "type": "object",
      "properties": {
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ],
          "description": "Resource tags."
        },
        "location": {
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "description": "The geo-location where the resource lives"
        }
      },
      "required": [
        "location"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "ProxyResource": {
      "title": "Proxy Resource",
      "description": "The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "ResourceModelWithAllowedPropertySet": {
      "description": "The resource model definition containing the full set of allowed properties for a resource. Except properties bag, there cannot be a top level property outside of this set.",
      "type": "object",
      "properties": {
        "id": {
          "readOnly": true,
          "type": "string",
          "x-ms-mutability": [
            "read"
          ],
          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "The name of the resource"
        },
        "type": {
          "readOnly": true,
          "type": "string",
          "x-ms-mutability": [
            "read"
          ],
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\""
        },
        "location": {
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "description": "The geo-location where the resource lives"
        },
        "managedBy": {
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ],
          "description": "The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is removed from the template since it is managed by another resource."
        },
        "kind": {
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.",
          "pattern": "^[-\\w\\._,\\(\\)]+$"
        },
        "etag": {
          "readOnly": true,
          "type": "string",
          "description": "The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. "
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ],
          "description": "Resource tags."
        },
        "identity": {
          "allOf": [
            {
              "$ref": "#/definitions/Identity"
            }
          ]
        },
        "sku": {
          "allOf": [
            {
              "$ref": "#/definitions/Sku"
            }
          ]
        },
        "plan": {
          "allOf": [
            {
              "$ref": "#/definitions/Plan"
            }
          ]
        }
      },
      "x-ms-azure-resource": true
    },
    "Sku": {
      "description": "The resource model definition representing SKU",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the SKU. Ex - P3. It is typically a letter+number code"
        },
        "tier": {
          "type": "string",
          "enum": [
            "Free",
            "Basic",
            "Standard",
            "Premium"
          ],
          "x-ms-enum": {
            "name": "SkuTier",
            "modelAsString": false
          },
          "description": "This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT."
        },
        "size": {
          "type": "string",
          "description": "The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. "
        },
        "family": {
          "type": "string",
          "description": "If the service has different generations of hardware, for the same SKU, then that can be captured here."
        },
        "capacity": {
          "type": "integer",
          "format": "int32",
          "description": "If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted."
        }
      },
      "required": [
        "name"
      ]
    },
    "Identity": {
      "description": "Identity for the resource.",
      "type": "object",
      "properties": {
        "principalId": {
          "readOnly": true,
          "type": "string",
          "description": "The principal ID of resource identity."
        },
        "tenantId": {
          "readOnly": true,
          "type": "string",
          "description": "The tenant ID of resource."
        },
        "type": {
          "type": "string",
          "description": "The identity type.",
          "enum": [
            "SystemAssigned"
          ],
          "x-ms-enum": {
            "name": "ResourceIdentityType",
            "modelAsString": false
          }
        }
      }
    },
    "Plan": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A user defined name of the 3rd Party Artifact that is being procured."
        },
        "publisher": {
          "type": "string",
          "description": "The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic"
        },
        "product": {
          "type": "string",
          "description": "The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. "
        },
        "promotionCode": {
          "type": "string",
          "description": "A publisher provided promotion code as provisioned in Data Market for the said product/artifact."
        },
        "version": {
          "type": "string",
          "description": "The version of the desired product/artifact."
        }
      },
      "description": "Plan for the resource.",
      "required": [
        "name",
        "publisher",
        "product"
      ]
    },
    "ErrorDetail": {
      "description": "The error detail.",
      "type": "object",
      "properties": {
        "code": {
          "readOnly": true,
          "type": "string",
          "description": "The error code."
        },
        "message": {
          "readOnly": true,
          "type": "string",
          "description": "The error message."
        },
        "target": {
          "readOnly": true,
          "type": "string",
          "description": "The error target."
        },
        "details": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorDetail"
          },
          "x-ms-identifiers": [
            "message",
            "target"
          ],
          "description": "The error details."
        },
        "additionalInfo": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorAdditionalInfo"
          },
          "x-ms-identifiers": [],
          "description": "The error additional info."
        }
      }
    },
    "ErrorAdditionalInfo": {
      "type": "object",
      "properties": {
        "type": {
          "readOnly": true,
          "type": "string",
          "description": "The additional info type."
        },
        "info": {
          "readOnly": true,
          "type": "object",
          "description": "The additional info."
        }
      },
      "description": "The resource management error additional info."
    },
    "Operation": {
      "title": "REST API Operation",
      "description": "Details of a REST API operation, returned from the Resource Provider Operations API",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the operation, as per Resource-Based Access Control (RBAC). Examples: \"Microsoft.Compute/virtualMachines/write\", \"Microsoft.Compute/virtualMachines/capture/action\"",
          "type": "string",
          "readOnly": true
        },
        "isDataAction": {
          "description": "Whether the operation applies to data-plane. This is \"true\" for data-plane operations and \"false\" for ARM/control-plane operations.",
          "type": "boolean",
          "readOnly": true
        },
        "display": {
          "description": "Localized display information for this particular operation.",
          "type": "object",
          "properties": {
            "provider": {
              "description": "The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring Insights\" or \"Microsoft Compute\".",
              "type": "string",
              "readOnly": true
            },
            "resource": {
              "description": "The localized friendly name of the resource type related to this operation. E.g. \"Virtual Machines\" or \"Job Schedule Collections\".",
              "type": "string",
              "readOnly": true
            },
            "operation": {
              "description": "The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create or Update Virtual Machine\", \"Restart Virtual Machine\".",
              "type": "string",
              "readOnly": true
            },
            "description": {
              "description": "The short, localized friendly description of the operation; suitable for tool tips and detailed views.",
              "type": "string",
              "readOnly": true
            }
          }
        },
        "origin": {
          "description": "The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is \"user,system\"",
          "type": "string",
          "readOnly": true,
          "enum": [
            "user",
            "system",
            "user,system"
          ],
          "x-ms-enum": {
            "name": "Origin",
            "modelAsString": true
          }
        },
        "actionType": {
          "description": "Enum. Indicates the action type. \"Internal\" refers to actions that are for internal only APIs.",
          "type": "string",
          "readOnly": true,
          "enum": [
            "Internal"
          ],
          "x-ms-enum": {
            "name": "ActionType",
            "modelAsString": true
          }
        }
      }
    },
    "OperationListResult": {
      "description": "A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results.",
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Operation"
          },
          "x-ms-identifiers": [
            "name"
          ],
          "description": "List of operations supported by the resource provider",
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "description": "URL to get the next set of operation list results (if there are any).",
          "readOnly": true
        }
      }
    },
    "OperationStatusResult": {
      "description": "The current status of an async operation.",
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "id": {
          "description": "Fully qualified ID for the async operation.",
          "type": "string"
        },
        "name": {
          "description": "Name of the async operation.",
          "type": "string"
        },
        "status": {
          "description": "Operation status.",
          "type": "string"
        },
        "percentComplete": {
          "description": "Percent of the operation that is complete.",
          "type": "number",
          "minimum": 0,
          "maximum": 100
        },
        "startTime": {
          "description": "The start time of the operation.",
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "description": "The end time of the operation.",
          "type": "string",
          "format": "date-time"
        },
        "operations": {
          "description": "The operations list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationStatusResult"
          }
        },
        "error": {
          "description": "If present, details of the operation error.",
          "$ref": "#/definitions/ErrorDetail"
        }
      }
    },
    "locationData": {
      "description": "Metadata pertaining to the geographic location of the resource.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 256,
          "description": "A canonical name for the geographic or physical location."
        },
        "city": {
          "type": "string",
          "description": "The city or locality where the resource is located."
        },
        "district": {
          "type": "string",
          "description": "The district, state, or province where the resource is located."
        },
        "countryOrRegion": {
          "type": "string",
          "description": "The country or region where the resource is located"
        }
      },
      "required": [
        "name"
      ]
    },
    "systemData": {
      "description": "Metadata pertaining to creation and last modification of the resource.",
      "type": "object",
      "readOnly": true,
      "properties": {
        "createdBy": {
          "type": "string",
          "description": "The identity that created the resource."
        },
        "createdByType": {
          "type": "string",
          "description": "The type of identity that created the resource.",
          "enum": [
            "User",
            "Application",
            "ManagedIdentity",
            "Key"
          ],
          "x-ms-enum": {
            "name": "createdByType",
            "modelAsString": true
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of resource creation (UTC)."
        },
        "lastModifiedBy": {
          "type": "string",
          "description": "The identity that last modified the resource."
        },
        "lastModifiedByType": {
          "type": "string",
          "description": "The type of identity that last modified the resource.",
          "enum": [
            "User",
            "Application",
            "ManagedIdentity",
            "Key"
          ],
          "x-ms-enum": {
            "name": "createdByType",
            "modelAsString": true
          }
        },
        "lastModifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of resource last modification (UTC)"
        }
      }
    },
    "encryptionProperties": {
      "description": "Configuration of key for data encryption",
      "type": "object",
      "properties": {
        "status": {
          "description": "Indicates whether or not the encryption is enabled for container registry.",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "EncryptionStatus",
            "modelAsString": true
          }
        },
        "keyVaultProperties": {
          "$ref": "#/definitions/KeyVaultProperties",
          "description": "Key vault properties."
        }
      }
    },
    "KeyVaultProperties": {
      "type": "object",
      "properties": {
        "keyIdentifier": {
          "description": "Key vault uri to access the encryption key.",
          "type": "string"
        },
        "identity": {
          "description": "The client ID of the identity which will be used to access key vault.",
          "type": "string"
        }
      }
    },
    "CheckNameAvailabilityRequest": {
      "description": "The check availability request body.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the resource for which availability needs to be checked.",
          "type": "string"
        },
        "type": {
          "description": "The resource type.",
          "type": "string"
        }
      }
    },
    "CheckNameAvailabilityResponse": {
      "description": "The check availability result.",
      "type": "object",
      "properties": {
        "nameAvailable": {
          "description": "Indicates if the resource name is available.",
          "type": "boolean"
        },
        "reason": {
          "description": "The reason why the given name is not available.",
          "type": "string",
          "enum": [
            "Invalid",
            "AlreadyExists"
          ],
          "x-ms-enum": {
            "name": "CheckNameAvailabilityReason",
            "modelAsString": true
          }
        },
        "message": {
          "description": "Detailed reason why the given name is available.",
          "type": "string"
        }
      }
    },
    "LocalizableString": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string",
          "description": "The invariant value."
        },
        "localizedValue": {
          "type": "string",
          "description": "The display name."
        }
      },
      "description": "The localizable string class."
    },
    "MetricValue": {
      "type": "object",
      "required": [
        "timeStamp"
      ],
      "properties": {
        "timeStamp": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp for the metric value in ISO 8601 format."
        },
        "average": {
          "type": "number",
          "format": "double",
          "description": "The average value in the time range."
        },
        "minimum": {
          "type": "number",
          "format": "double",
          "description": "The least value in the time range."
        },
        "maximum": {
          "type": "number",
          "format": "double",
          "description": "The greatest value in the time range."
        },
        "total": {
          "type": "number",
          "format": "double",
          "description": "The sum of all of the values in the time range."
        },
        "count": {
          "type": "number",
          "format": "double",
          "description": "The number of samples in the time range. Can be used to determine the number of values that contributed to the average value."
        }
      },
      "description": "Represents a metric value."
    },
    "MetadataValue": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/LocalizableString",
          "description": "The name of the metadata."
        },
        "value": {
          "type": "string",
          "description": "The value of the metadata."
        }
      },
      "description": "Represents a metric metadata value."
    },
    "Unit": {
      "type": "string",
      "description": "The unit of the metric.",
      "enum": [
        "Count",
        "Bytes",
        "Seconds",
        "CountPerSecond",
        "BytesPerSecond",
        "Percent",
        "MilliSeconds",
        "ByteSeconds",
        "Unspecified",
        "Cores",
        "MilliCores",
        "NanoCores",
        "BitsPerSecond"
      ],
      "x-ms-enum": {
        "name": "MetricUnit",
        "modelAsString": true,
        "values": [
          {
            "value": "Count",
            "description": "Unit of raw quantity."
          },
          {
            "value": "Bytes",
            "description": "Unit of memory in bytes."
          },
          {
            "value": "Seconds",
            "description": "Unit of time in seconds."
          },
          {
            "value": "CountPerSecond",
            "description": "Rate unit of raw quantity per second."
          },
          {
            "value": "BytesPerSecond",
            "description": "Rate unit of memory in bytes per second."
          },
          {
            "value": "Percent",
            "description": "Percentage unit."
          },
          {
            "value": "MilliSeconds",
            "description": "Unit of time in 1/1000th of a second."
          },
          {
            "value": "ByteSeconds",
            "description": "Unit of data transfer or storage. It is the size of the data in bytes multiplied by the time it takes to transfer or store the data in seconds."
          },
          {
            "value": "Unspecified",
            "description": "No specified unit."
          },
          {
            "value": "Cores",
            "description": "Unit of processing power."
          },
          {
            "value": "MilliCores",
            "description": "Unit of processing power in 1/1000th of a CPU core."
          },
          {
            "value": "NanoCores",
            "description": "Unit of processing power in one billionth of a CPU core."
          },
          {
            "value": "BitsPerSecond",
            "description": "Rate unit of binary digits per second."
          }
        ]
      }
    },
    "TimeSeriesElement": {
      "type": "object",
      "properties": {
        "metadatavalues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataValue"
          },
          "x-ms-identifiers": [
            "name"
          ],
          "description": "The metadata values returned if $filter was specified in the call."
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricValue"
          },
          "x-ms-identifiers": [
            "timeStamp"
          ],
          "description": "An array of data points representing the metric values.  This is only returned if a result type of data is specified."
        }
      },
      "description": "A time series result type. The discriminator value is always TimeSeries in this case."
    },
    "Metric": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The metric Id."
        },
        "type": {
          "type": "string",
          "description": "The resource type of the metric resource."
        },
        "name": {
          "$ref": "#/definitions/LocalizableString",
          "description": "The name and the display name of the metric, i.e. it is localizable string."
        },
        "displayDescription": {
          "type": "string",
          "description": "Detailed description of this metric."
        },
        "errorCode": {
          "type": "string",
          "description": "'Success' or the error details on query failures for this metric."
        },
        "errorMessage": {
          "type": "string",
          "description": "Error message encountered querying this specific metric."
        },
        "unit": {
          "$ref": "#/definitions/Unit",
          "description": "The unit of the metric."
        },
        "timeseries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeSeriesElement"
          },
          "x-ms-identifiers": [],
          "description": "The time series returned when a data query is performed."
        }
      },
      "required": [
        "id",
        "type",
        "name",
        "unit",
        "timeseries"
      ],
      "description": "The result data of a query."
    },
    "ErrorContract": {
      "title": "Error Response",
      "description": "Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.)",
      "type": "object",
      "properties": {
        "error": {
          "description": "The error object.",
          "$ref": "../../../common-types/resource-management/v1/types.json#/definitions/ErrorResponse"
        }
      }
    }
  }
}