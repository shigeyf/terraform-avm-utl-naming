{
  "openapi": "3.0.0",
  "info": {
    "title": "Microsoft.PolicyInsights",
    "version": "2024-10-01"
  },
  "components": {},
  "paths": {
    "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults": {
      "post": {
        "operationId": "PolicyStates_ListQueryResultsForManagementGroup",
        "description": "Queries policy states for the resources under the management group.",
        "parameters": [
          {
            "$ref": "#/parameters/policyStatesResourceParameter"
          },
          {
            "$ref": "#/parameters/managementGroupsNamespaceParameter"
          },
          {
            "$ref": "#/parameters/managementGroupNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/orderByParameter"
          },
          {
            "$ref": "#/parameters/selectParameter"
          },
          {
            "$ref": "#/parameters/fromParameter"
          },
          {
            "$ref": "#/parameters/toParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          },
          {
            "$ref": "#/parameters/applyParameter"
          },
          {
            "$ref": "#/parameters/skipTokenParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Query results.",
            "schema": {
              "$ref": "#/definitions/PolicyStatesQueryResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink",
          "operationName": "PolicyStates_NextLink"
        },
        "x-ms-examples": {
          "Query latest at management group scope": {
            "$ref": "./examples/PolicyStates_QueryManagementGroupScope.json"
          },
          "Query latest at management group scope with next link": {
            "$ref": "./examples/PolicyStates_QueryManagementGroupScopeNextLink.json"
          }
        }
      }
    },
    "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize": {
      "post": {
        "operationId": "PolicyStates_SummarizeForManagementGroup",
        "description": "Summarizes policy states for the resources under the management group.",
        "parameters": [
          {
            "$ref": "#/parameters/policyStatesSummaryResourceParameter"
          },
          {
            "$ref": "#/parameters/managementGroupsNamespaceParameter"
          },
          {
            "$ref": "#/parameters/managementGroupNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/fromParameter"
          },
          {
            "$ref": "#/parameters/toParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Summarize results.",
            "schema": {
              "$ref": "#/definitions/SummarizeResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-examples": {
          "Summarize at management group scope": {
            "$ref": "./examples/PolicyStates_SummarizeManagementGroupScope.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults": {
      "post": {
        "operationId": "PolicyStates_ListQueryResultsForSubscription",
        "description": "Queries policy states for the resources under the subscription.",
        "parameters": [
          {
            "$ref": "#/parameters/policyStatesResourceParameter"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/orderByParameter"
          },
          {
            "$ref": "#/parameters/selectParameter"
          },
          {
            "$ref": "#/parameters/fromParameter"
          },
          {
            "$ref": "#/parameters/toParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          },
          {
            "$ref": "#/parameters/applyParameter"
          },
          {
            "$ref": "#/parameters/skipTokenParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Query results.",
            "schema": {
              "$ref": "#/definitions/PolicyStatesQueryResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink",
          "operationName": "PolicyStates_NextLink"
        },
        "x-ms-examples": {
          "Query latest at subscription scope": {
            "$ref": "./examples/PolicyStates_QuerySubscriptionScope.json"
          },
          "Query latest at subscription scope with next link": {
            "$ref": "./examples/PolicyStates_QuerySubscriptionScopeNextLink.json"
          },
          "Time range; sort, select and limit": {
            "$ref": "./examples/PolicyStates_TimeRangeSortSelectTop.json"
          },
          "Filter and group with aggregate": {
            "$ref": "./examples/PolicyStates_FilterAndGroupByWithAggregate.json"
          },
          "Filter and group without aggregate": {
            "$ref": "./examples/PolicyStates_FilterAndGroupByWithoutAggregate.json"
          },
          "Filter and aggregate only": {
            "$ref": "./examples/PolicyStates_FilterAndAggregateOnly.json"
          },
          "Filter and multiple groups": {
            "$ref": "./examples/PolicyStates_FilterAndMultipleGroups.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize": {
      "post": {
        "operationId": "PolicyStates_SummarizeForSubscription",
        "description": "Summarizes policy states for the resources under the subscription.",
        "parameters": [
          {
            "$ref": "#/parameters/policyStatesSummaryResourceParameter"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/fromParameter"
          },
          {
            "$ref": "#/parameters/toParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Summarize results.",
            "schema": {
              "$ref": "#/definitions/SummarizeResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-examples": {
          "Summarize at subscription scope": {
            "$ref": "./examples/PolicyStates_SummarizeSubscriptionScope.json"
          },
          "Summarize at subscription scope for a policy definition group": {
            "$ref": "./examples/PolicyStates_SummarizeSubscriptionScopeForPolicyGroup.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults": {
      "post": {
        "operationId": "PolicyStates_ListQueryResultsForResourceGroup",
        "description": "Queries policy states for the resources under the resource group.",
        "parameters": [
          {
            "$ref": "#/parameters/policyStatesResourceParameter"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/orderByParameter"
          },
          {
            "$ref": "#/parameters/selectParameter"
          },
          {
            "$ref": "#/parameters/fromParameter"
          },
          {
            "$ref": "#/parameters/toParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          },
          {
            "$ref": "#/parameters/applyParameter"
          },
          {
            "$ref": "#/parameters/skipTokenParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Query results.",
            "schema": {
              "$ref": "#/definitions/PolicyStatesQueryResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink",
          "operationName": "PolicyStates_NextLink"
        },
        "x-ms-examples": {
          "Query latest at resource group scope": {
            "$ref": "./examples/PolicyStates_QueryResourceGroupScope.json"
          },
          "Query latest at resource group scope with next link": {
            "$ref": "./examples/PolicyStates_QueryResourceGroupScopeNextLink.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize": {
      "post": {
        "operationId": "PolicyStates_SummarizeForResourceGroup",
        "description": "Summarizes policy states for the resources under the resource group.",
        "parameters": [
          {
            "$ref": "#/parameters/policyStatesSummaryResourceParameter"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/fromParameter"
          },
          {
            "$ref": "#/parameters/toParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Summarize results.",
            "schema": {
              "$ref": "#/definitions/SummarizeResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-examples": {
          "Summarize at resource group scope": {
            "$ref": "./examples/PolicyStates_SummarizeResourceGroupScope.json"
          }
        }
      }
    },
    "/{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults": {
      "post": {
        "operationId": "PolicyStates_ListQueryResultsForResource",
        "description": "Queries policy states for the resource.",
        "parameters": [
          {
            "$ref": "#/parameters/policyStatesResourceParameter"
          },
          {
            "$ref": "#/parameters/resourceIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/orderByParameter"
          },
          {
            "$ref": "#/parameters/selectParameter"
          },
          {
            "$ref": "#/parameters/fromParameter"
          },
          {
            "$ref": "#/parameters/toParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          },
          {
            "$ref": "#/parameters/applyParameter"
          },
          {
            "$ref": "#/parameters/expandParameter"
          },
          {
            "$ref": "#/parameters/skipTokenParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Query results.",
            "schema": {
              "$ref": "#/definitions/PolicyStatesQueryResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink",
          "operationName": "PolicyStates_NextLink"
        },
        "x-ms-examples": {
          "Query all policy states at resource scope": {
            "$ref": "./examples/PolicyStates_QueryResourceScope.json"
          },
          "Query all policy states at resource scope with next link": {
            "$ref": "./examples/PolicyStates_QueryResourceScopeNextLink.json"
          },
          "Query all policy states at subscription level resource scope": {
            "$ref": "./examples/PolicyStates_QuerySubscriptionLevelResourceScope.json"
          },
          "Query all policy states at nested resource scope": {
            "$ref": "./examples/PolicyStates_QueryNestedResourceScope.json"
          },
          "Query all policy states at subscription level nested resource scope": {
            "$ref": "./examples/PolicyStates_QuerySubscriptionLevelNestedResourceScope.json"
          },
          "Query all policy states at resource scope and expand policyEvaluationDetails": {
            "$ref": "./examples/PolicyStates_QueryResourceScopeExpandPolicyEvaluationDetails.json"
          },
          "Query component policy compliance state at resource scope filtered by given assignment.": {
            "$ref": "./examples/PolicyStates_QueryResourceScopeExpandComponents.json"
          },
          "Query component policy compliance state count grouped by state type at resource scope filtered by given assignment.": {
            "$ref": "./examples/PolicyStates_QueryResourceScopeExpandComponentsGroupByWithAggregate.json"
          }
        }
      }
    },
    "/{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize": {
      "post": {
        "operationId": "PolicyStates_SummarizeForResource",
        "description": "Summarizes policy states for the resource.",
        "parameters": [
          {
            "$ref": "#/parameters/policyStatesSummaryResourceParameter"
          },
          {
            "$ref": "#/parameters/resourceIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/fromParameter"
          },
          {
            "$ref": "#/parameters/toParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Summarize results.",
            "schema": {
              "$ref": "#/definitions/SummarizeResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-examples": {
          "Summarize at resource scope": {
            "$ref": "./examples/PolicyStates_SummarizeResourceScope.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/latest/triggerEvaluation": {
      "post": {
        "operationId": "PolicyStates_TriggerSubscriptionEvaluation",
        "description": "Triggers a policy evaluation scan for all the resources under the subscription",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The scan is done."
          },
          "202": {
            "description": "The scan was successfully triggered."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-examples": {
          "Trigger evaluations for all resources in a subscription": {
            "$ref": "./examples/PolicyStates_TriggerSubscriptionEvaluation.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/latest/triggerEvaluation": {
      "post": {
        "operationId": "PolicyStates_TriggerResourceGroupEvaluation",
        "description": "Triggers a policy evaluation scan for all the resources under the resource group.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The scan is done."
          },
          "202": {
            "description": "The scan was successfully triggered."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-examples": {
          "Trigger evaluations for all resources in a resource group": {
            "$ref": "./examples/PolicyStates_TriggerResourceGroupEvaluation.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults": {
      "post": {
        "operationId": "PolicyStates_ListQueryResultsForPolicySetDefinition",
        "description": "Queries policy states for the subscription level policy set definition.",
        "parameters": [
          {
            "$ref": "#/parameters/policyStatesResourceParameter"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/authorizationNamespaceParameter"
          },
          {
            "$ref": "#/parameters/policySetDefinitionNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/orderByParameter"
          },
          {
            "$ref": "#/parameters/selectParameter"
          },
          {
            "$ref": "#/parameters/fromParameter"
          },
          {
            "$ref": "#/parameters/toParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          },
          {
            "$ref": "#/parameters/applyParameter"
          },
          {
            "$ref": "#/parameters/skipTokenParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Query results.",
            "schema": {
              "$ref": "#/definitions/PolicyStatesQueryResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink",
          "operationName": "PolicyStates_NextLink"
        },
        "x-ms-examples": {
          "Query latest at subscription level policy set definition scope": {
            "$ref": "./examples/PolicyStates_QuerySubscriptionLevelPolicySetDefinitionScope.json"
          },
          "Query latest at subscription level policy set definition scope with next link": {
            "$ref": "./examples/PolicyStates_QuerySubscriptionLevelPolicySetDefinitionScopeNextLink.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize": {
      "post": {
        "operationId": "PolicyStates_SummarizeForPolicySetDefinition",
        "description": "Summarizes policy states for the subscription level policy set definition.",
        "parameters": [
          {
            "$ref": "#/parameters/policyStatesSummaryResourceParameter"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/authorizationNamespaceParameter"
          },
          {
            "$ref": "#/parameters/policySetDefinitionNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/fromParameter"
          },
          {
            "$ref": "#/parameters/toParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Summarize results.",
            "schema": {
              "$ref": "#/definitions/SummarizeResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-examples": {
          "Summarize at policy set definition scope": {
            "$ref": "./examples/PolicyStates_SummarizeSubscriptionLevelPolicySetDefinitionScope.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults": {
      "post": {
        "operationId": "PolicyStates_ListQueryResultsForPolicyDefinition",
        "description": "Queries policy states for the subscription level policy definition.",
        "parameters": [
          {
            "$ref": "#/parameters/policyStatesResourceParameter"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/authorizationNamespaceParameter"
          },
          {
            "$ref": "#/parameters/policyDefinitionNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/orderByParameter"
          },
          {
            "$ref": "#/parameters/selectParameter"
          },
          {
            "$ref": "#/parameters/fromParameter"
          },
          {
            "$ref": "#/parameters/toParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          },
          {
            "$ref": "#/parameters/applyParameter"
          },
          {
            "$ref": "#/parameters/skipTokenParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Query results.",
            "schema": {
              "$ref": "#/definitions/PolicyStatesQueryResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink",
          "operationName": "PolicyStates_NextLink"
        },
        "x-ms-examples": {
          "Query latest at subscription level policy definition scope": {
            "$ref": "./examples/PolicyStates_QuerySubscriptionLevelPolicyDefinitionScope.json"
          },
          "Query latest at subscription level policy definition scope with next link": {
            "$ref": "./examples/PolicyStates_QuerySubscriptionLevelPolicyDefinitionScopeNextLink.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize": {
      "post": {
        "operationId": "PolicyStates_SummarizeForPolicyDefinition",
        "description": "Summarizes policy states for the subscription level policy definition.",
        "parameters": [
          {
            "$ref": "#/parameters/policyStatesSummaryResourceParameter"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/authorizationNamespaceParameter"
          },
          {
            "$ref": "#/parameters/policyDefinitionNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/fromParameter"
          },
          {
            "$ref": "#/parameters/toParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Summarize results.",
            "schema": {
              "$ref": "#/definitions/SummarizeResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-examples": {
          "Summarize at policy definition scope": {
            "$ref": "./examples/PolicyStates_SummarizeSubscriptionLevelPolicyDefinitionScope.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults": {
      "post": {
        "operationId": "PolicyStates_ListQueryResultsForSubscriptionLevelPolicyAssignment",
        "description": "Queries policy states for the subscription level policy assignment.",
        "parameters": [
          {
            "$ref": "#/parameters/policyStatesResourceParameter"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/authorizationNamespaceParameter"
          },
          {
            "$ref": "#/parameters/policyAssignmentNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/orderByParameter"
          },
          {
            "$ref": "#/parameters/selectParameter"
          },
          {
            "$ref": "#/parameters/fromParameter"
          },
          {
            "$ref": "#/parameters/toParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          },
          {
            "$ref": "#/parameters/applyParameter"
          },
          {
            "$ref": "#/parameters/skipTokenParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Query results.",
            "schema": {
              "$ref": "#/definitions/PolicyStatesQueryResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink",
          "operationName": "PolicyStates_NextLink"
        },
        "x-ms-examples": {
          "Query latest at subscription level policy assignment scope": {
            "$ref": "./examples/PolicyStates_QuerySubscriptionLevelPolicyAssignmentScope.json"
          },
          "Query latest at subscription level policy assignment scope with next link": {
            "$ref": "./examples/PolicyStates_QuerySubscriptionLevelPolicyAssignmentScopeNextLink.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize": {
      "post": {
        "operationId": "PolicyStates_SummarizeForSubscriptionLevelPolicyAssignment",
        "description": "Summarizes policy states for the subscription level policy assignment.",
        "parameters": [
          {
            "$ref": "#/parameters/policyStatesSummaryResourceParameter"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/authorizationNamespaceParameter"
          },
          {
            "$ref": "#/parameters/policyAssignmentNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/fromParameter"
          },
          {
            "$ref": "#/parameters/toParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Summarize results.",
            "schema": {
              "$ref": "#/definitions/SummarizeResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-examples": {
          "Summarize at policy assignment scope": {
            "$ref": "./examples/PolicyStates_SummarizeSubscriptionLevelPolicyAssignmentScope.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults": {
      "post": {
        "operationId": "PolicyStates_ListQueryResultsForResourceGroupLevelPolicyAssignment",
        "description": "Queries policy states for the resource group level policy assignment.",
        "parameters": [
          {
            "$ref": "#/parameters/policyStatesResourceParameter"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/authorizationNamespaceParameter"
          },
          {
            "$ref": "#/parameters/policyAssignmentNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/orderByParameter"
          },
          {
            "$ref": "#/parameters/selectParameter"
          },
          {
            "$ref": "#/parameters/fromParameter"
          },
          {
            "$ref": "#/parameters/toParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          },
          {
            "$ref": "#/parameters/applyParameter"
          },
          {
            "$ref": "#/parameters/skipTokenParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Query results.",
            "schema": {
              "$ref": "#/definitions/PolicyStatesQueryResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink",
          "operationName": "PolicyStates_NextLink"
        },
        "x-ms-examples": {
          "Query latest at resource group level policy assignment scope": {
            "$ref": "./examples/PolicyStates_QueryResourceGroupLevelPolicyAssignmentScope.json"
          },
          "Query latest at resource group level policy assignment scope with next link": {
            "$ref": "./examples/PolicyStates_QueryResourceGroupLevelPolicyAssignmentScopeNextLink.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize": {
      "post": {
        "operationId": "PolicyStates_SummarizeForResourceGroupLevelPolicyAssignment",
        "description": "Summarizes policy states for the resource group level policy assignment.",
        "parameters": [
          {
            "$ref": "#/parameters/policyStatesSummaryResourceParameter"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/authorizationNamespaceParameter"
          },
          {
            "$ref": "#/parameters/policyAssignmentNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/fromParameter"
          },
          {
            "$ref": "#/parameters/toParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Summarize results.",
            "schema": {
              "$ref": "#/definitions/SummarizeResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-examples": {
          "Summarize at policy assignment scope": {
            "$ref": "./examples/PolicyStates_SummarizeResourceGroupLevelPolicyAssignmentScope.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/componentPolicyStates/{componentPolicyStatesResource}/queryResults": {
      "post": {
        "operationId": "ComponentPolicyStates_ListQueryResultsForSubscription",
        "description": "Queries component policy states under subscription scope.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/componentPolicyStatesResource"
          },
          {
            "$ref": "#/parameters/apiVersion"
          },
          {
            "$ref": "#/parameters/top"
          },
          {
            "$ref": "#/parameters/orderBy"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/from"
          },
          {
            "$ref": "#/parameters/to"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/apply"
          }
        ],
        "responses": {
          "200": {
            "description": "Query results.",
            "schema": {
              "$ref": "#/definitions/ComponentPolicyStatesQueryResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../stable/2024-10-01/policyMetadata.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Query latest component policy states at subscription scope": {
            "$ref": "./examples/ComponentPolicyStates_QuerySubscriptionScope.json"
          },
          "Query latest component policy compliance state count grouped by component type at subscription scope filtered by given assignment.": {
            "$ref": "./examples/ComponentPolicyStates_QuerySubscriptionScopeGroupByComponentTypeWithAggregate.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/componentPolicyStates/{componentPolicyStatesResource}/queryResults": {
      "post": {
        "operationId": "ComponentPolicyStates_ListQueryResultsForResourceGroup",
        "description": "Queries component policy states under resource group scope.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "$ref": "#/parameters/componentPolicyStatesResource"
          },
          {
            "$ref": "#/parameters/apiVersion"
          },
          {
            "$ref": "#/parameters/top"
          },
          {
            "$ref": "#/parameters/orderBy"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/from"
          },
          {
            "$ref": "#/parameters/to"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/apply"
          }
        ],
        "responses": {
          "200": {
            "description": "Query results.",
            "schema": {
              "$ref": "#/definitions/ComponentPolicyStatesQueryResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../stable/2024-10-01/policyMetadata.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Query latest component policy states at resource group scope": {
            "$ref": "./examples/ComponentPolicyStates_QueryResourceGroupScope.json"
          },
          "Query latest component policy compliance state count grouped by component type at resource group scope filtered by given assignment.": {
            "$ref": "./examples/ComponentPolicyStates_QueryResourceGroupScopeGroupByComponentTypeWithAggregate.json"
          }
        }
      }
    },
    "/{resourceId}/providers/Microsoft.PolicyInsights/componentPolicyStates/{componentPolicyStatesResource}/queryResults": {
      "post": {
        "operationId": "ComponentPolicyStates_ListQueryResultsForResource",
        "description": "Queries component policy states for the resource.",
        "parameters": [
          {
            "$ref": "#/parameters/resourceId"
          },
          {
            "$ref": "#/parameters/componentPolicyStatesResource"
          },
          {
            "$ref": "#/parameters/apiVersion"
          },
          {
            "$ref": "#/parameters/top"
          },
          {
            "$ref": "#/parameters/orderBy"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/from"
          },
          {
            "$ref": "#/parameters/to"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/apply"
          },
          {
            "$ref": "#/parameters/componentPolicyStatesExpand"
          }
        ],
        "responses": {
          "200": {
            "description": "Query results.",
            "schema": {
              "$ref": "#/definitions/ComponentPolicyStatesQueryResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../stable/2024-10-01/policyMetadata.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Query latest component policy states at resource scope": {
            "$ref": "./examples/ComponentPolicyStates_QueryResourceScope.json"
          },
          "Query latest component policy states at resource scope and expand policyEvaluationDetails": {
            "$ref": "./examples/ComponentPolicyStates_QueryResourceScopeExpandPolicyEvaluationDetails.json"
          },
          "Query latest component policy compliance state count grouped by component type at resource scope filtered by given assignment.": {
            "$ref": "./examples/ComponentPolicyStates_QueryResourceScopeGroupByComponentTypeWithAggregate.json"
          },
          "Query latest component policy states at nested resource scope": {
            "$ref": "./examples/ComponentPolicyStates_QueryNestedResourceScope.json"
          },
          "Query latest component policy compliance state at resource scope filtered by given component id.": {
            "$ref": "./examples/ComponentPolicyStates_QueryResourceScopeFilterByComponentId.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/componentPolicyStates/{componentPolicyStatesResource}/queryResults": {
      "post": {
        "operationId": "ComponentPolicyStates_ListQueryResultsForPolicyDefinition",
        "description": "Queries component policy states for the subscription level policy definition.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/authorizationNamespace"
          },
          {
            "$ref": "#/parameters/policyDefinitionName"
          },
          {
            "$ref": "#/parameters/componentPolicyStatesResource"
          },
          {
            "$ref": "#/parameters/apiVersion"
          },
          {
            "$ref": "#/parameters/top"
          },
          {
            "$ref": "#/parameters/orderBy"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/from"
          },
          {
            "$ref": "#/parameters/to"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/apply"
          }
        ],
        "responses": {
          "200": {
            "description": "Query results.",
            "schema": {
              "$ref": "#/definitions/ComponentPolicyStatesQueryResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../stable/2024-10-01/policyMetadata.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Query latest component policy states at subscription level policy definition scope": {
            "$ref": "./examples/ComponentPolicyStates_QuerySubscriptionLevelPolicyDefinitionScope.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/componentPolicyStates/{componentPolicyStatesResource}/queryResults": {
      "post": {
        "operationId": "ComponentPolicyStates_ListQueryResultsForSubscriptionLevelPolicyAssignment",
        "description": "Queries component policy states for the subscription level policy assignment.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/authorizationNamespace"
          },
          {
            "$ref": "#/parameters/policyAssignmentName"
          },
          {
            "$ref": "#/parameters/componentPolicyStatesResource"
          },
          {
            "$ref": "#/parameters/apiVersion"
          },
          {
            "$ref": "#/parameters/top"
          },
          {
            "$ref": "#/parameters/orderBy"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/from"
          },
          {
            "$ref": "#/parameters/to"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/apply"
          }
        ],
        "responses": {
          "200": {
            "description": "Query results.",
            "schema": {
              "$ref": "#/definitions/ComponentPolicyStatesQueryResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../stable/2024-10-01/policyMetadata.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Query latest at subscription level policy assignment scope": {
            "$ref": "./examples/ComponentPolicyStates_QuerySubscriptionLevelPolicyAssignmentScope.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/componentPolicyStates/{componentPolicyStatesResource}/queryResults": {
      "post": {
        "operationId": "ComponentPolicyStates_ListQueryResultsForResourceGroupLevelPolicyAssignment",
        "description": "Queries component policy states for the resource group level policy assignment.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionId"
          },
          {
            "$ref": "#/parameters/resourceGroupName"
          },
          {
            "$ref": "#/parameters/authorizationNamespace"
          },
          {
            "$ref": "#/parameters/policyAssignmentName"
          },
          {
            "$ref": "#/parameters/componentPolicyStatesResource"
          },
          {
            "$ref": "#/parameters/apiVersion"
          },
          {
            "$ref": "#/parameters/top"
          },
          {
            "$ref": "#/parameters/orderBy"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/from"
          },
          {
            "$ref": "#/parameters/to"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/apply"
          }
        ],
        "responses": {
          "200": {
            "description": "Query results.",
            "schema": {
              "$ref": "#/definitions/ComponentPolicyStatesQueryResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../stable/2024-10-01/policyMetadata.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Query latest at resource group level policy assignment scope": {
            "$ref": "./examples/ComponentPolicyStates_QueryResourceGroupLevelPolicyAssignmentScope.json"
          }
        }
      }
    },
    "/providers/Microsoft.PolicyInsights/operations": {
      "get": {
        "operationId": "Operations_List",
        "description": "Lists available operations.",
        "parameters": [
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of available operations.",
            "schema": {
              "$ref": "#/definitions/OperationsListResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../stable/2019-10-01/operations.json#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-examples": {
          "List operations": {
            "$ref": "./examples/Operations_ListOperations.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/checkPolicyRestrictions": {
      "post": {
        "operationId": "PolicyRestrictions_CheckAtSubscriptionScope",
        "description": "Checks what restrictions Azure Policy will place on a resource within a subscription.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckRestrictionsRequest"
            },
            "description": "The check policy restrictions parameters."
          }
        ],
        "responses": {
          "200": {
            "description": "The restrictions that will be placed on the resource by Azure Policy.",
            "schema": {
              "$ref": "#/definitions/CheckRestrictionsResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../stable/2024-10-01/policyMetadata.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Check policy restrictions at subscription scope": {
            "$ref": "./examples/PolicyRestrictions_CheckAtSubscriptionScope.json"
          },
          "Check policy restrictions at subscription scope including audit effect": {
            "$ref": "./examples/PolicyRestrictions_CheckAtSubscriptionScopeIncludeAuditEffect.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/checkPolicyRestrictions": {
      "post": {
        "operationId": "PolicyRestrictions_CheckAtResourceGroupScope",
        "description": "Checks what restrictions Azure Policy will place on a resource within a resource group. Use this when the resource group the resource will be created in is already known.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckRestrictionsRequest"
            },
            "description": "The check policy restrictions parameters."
          }
        ],
        "responses": {
          "200": {
            "description": "The restrictions that will be placed on the resource by Azure Policy.",
            "schema": {
              "$ref": "#/definitions/CheckRestrictionsResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../stable/2024-10-01/policyMetadata.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Check policy restrictions at resource group scope": {
            "$ref": "./examples/PolicyRestrictions_CheckAtResourceGroupScope.json"
          },
          "Check policy restrictions at resource group scope including audit effect": {
            "$ref": "./examples/PolicyRestrictions_CheckAtResourceGroupScopeIncludeAuditEffect.json"
          }
        }
      }
    },
    "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/checkPolicyRestrictions": {
      "post": {
        "operationId": "PolicyRestrictions_CheckAtManagementGroupScope",
        "description": "Checks what restrictions Azure Policy will place on resources within a management group.",
        "parameters": [
          {
            "$ref": "#/parameters/managementGroupsNamespaceParameter"
          },
          {
            "$ref": "#/parameters/managementGroupIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckManagementGroupRestrictionsRequest"
            },
            "description": "The check policy restrictions parameters."
          }
        ],
        "responses": {
          "200": {
            "description": "The restrictions that will be placed on the resource by Azure Policy.",
            "schema": {
              "$ref": "#/definitions/CheckRestrictionsResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../stable/2024-10-01/policyMetadata.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Check policy restrictions at management group scope": {
            "$ref": "./examples/PolicyRestrictions_CheckAtManagementGroupScope.json"
          }
        }
      }
    },
    "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments": {
      "post": {
        "operationId": "Remediations_ListDeploymentsAtManagementGroup",
        "description": "Gets all deployments for a remediation at management group scope.",
        "parameters": [
          {
            "$ref": "#/parameters/managementGroupsNamespaceParameter"
          },
          {
            "$ref": "#/parameters/managementGroupIdParameter"
          },
          {
            "$ref": "#/parameters/remediationNameParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved remediation deployments.",
            "schema": {
              "$ref": "#/definitions/RemediationDeploymentsListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "List deployments for a remediation at management group scope": {
            "$ref": "./examples/Remediations_ListDeploymentsManagementGroupScope.json"
          }
        }
      }
    },
    "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel": {
      "post": {
        "operationId": "Remediations_CancelAtManagementGroup",
        "description": "Cancels a remediation at management group scope.",
        "parameters": [
          {
            "$ref": "#/parameters/managementGroupsNamespaceParameter"
          },
          {
            "$ref": "#/parameters/managementGroupIdParameter"
          },
          {
            "$ref": "#/parameters/remediationNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The remediation that was canceled.",
            "schema": {
              "$ref": "#/definitions/Remediation"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Cancel a remediation at management group scope": {
            "$ref": "./examples/Remediations_CancelManagementGroupScope.json"
          }
        }
      }
    },
    "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations": {
      "get": {
        "operationId": "Remediations_ListForManagementGroup",
        "description": "Gets all remediations for the management group.",
        "parameters": [
          {
            "$ref": "#/parameters/managementGroupsNamespaceParameter"
          },
          {
            "$ref": "#/parameters/managementGroupIdParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved remediations.",
            "schema": {
              "$ref": "#/definitions/RemediationListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "List remediations at management group scope": {
            "$ref": "./examples/Remediations_ListManagementGroupScope.json"
          },
          "List remediations at management group scope with query parameters": {
            "$ref": "./examples/Remediations_ListManagementGroupScope_WithQuery.json"
          }
        }
      }
    },
    "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}": {
      "put": {
        "operationId": "Remediations_CreateOrUpdateAtManagementGroup",
        "description": "Creates or updates a remediation at management group scope.",
        "parameters": [
          {
            "$ref": "#/parameters/managementGroupsNamespaceParameter"
          },
          {
            "$ref": "#/parameters/managementGroupIdParameter"
          },
          {
            "$ref": "#/parameters/remediationNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Remediation"
            },
            "description": "The remediation parameters."
          }
        ],
        "responses": {
          "200": {
            "description": "The updated remediation.",
            "schema": {
              "$ref": "#/definitions/Remediation"
            }
          },
          "201": {
            "description": "The created remediation.",
            "schema": {
              "$ref": "#/definitions/Remediation"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Create remediation at management group scope": {
            "$ref": "./examples/Remediations_CreateManagementGroupScope.json"
          }
        }
      },
      "get": {
        "operationId": "Remediations_GetAtManagementGroup",
        "description": "Gets an existing remediation at management group scope.",
        "parameters": [
          {
            "$ref": "#/parameters/managementGroupsNamespaceParameter"
          },
          {
            "$ref": "#/parameters/managementGroupIdParameter"
          },
          {
            "$ref": "#/parameters/remediationNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved remediation.",
            "schema": {
              "$ref": "#/definitions/Remediation"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get remediation at management group scope": {
            "$ref": "./examples/Remediations_GetManagementGroupScope.json"
          }
        }
      },
      "delete": {
        "operationId": "Remediations_DeleteAtManagementGroup",
        "description": "Deletes an existing remediation at management group scope.",
        "parameters": [
          {
            "$ref": "#/parameters/managementGroupsNamespaceParameter"
          },
          {
            "$ref": "#/parameters/managementGroupIdParameter"
          },
          {
            "$ref": "#/parameters/remediationNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The deleted remediation.",
            "schema": {
              "$ref": "#/definitions/Remediation"
            }
          },
          "204": {
            "description": "The remediation did not exist."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Delete remediation at management group scope": {
            "$ref": "./examples/Remediations_DeleteManagementGroupScope.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments": {
      "post": {
        "operationId": "Remediations_ListDeploymentsAtSubscription",
        "description": "Gets all deployments for a remediation at subscription scope.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/remediationNameParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved remediation deployments.",
            "schema": {
              "$ref": "#/definitions/RemediationDeploymentsListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "List deployments for a remediation at subscription scope": {
            "$ref": "./examples/Remediations_ListDeploymentsSubscriptionScope.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel": {
      "post": {
        "operationId": "Remediations_CancelAtSubscription",
        "description": "Cancels a remediation at subscription scope.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/remediationNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The remediation that was canceled.",
            "schema": {
              "$ref": "#/definitions/Remediation"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Cancel a remediation at subscription scope": {
            "$ref": "./examples/Remediations_CancelSubscriptionScope.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations": {
      "get": {
        "operationId": "Remediations_ListForSubscription",
        "description": "Gets all remediations for the subscription.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved remediations.",
            "schema": {
              "$ref": "#/definitions/RemediationListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "List remediations at subscription scope": {
            "$ref": "./examples/Remediations_ListSubscriptionScope.json"
          },
          "List remediations at subscription scope with query parameters": {
            "$ref": "./examples/Remediations_ListSubscriptionScope_WithQuery.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}": {
      "put": {
        "operationId": "Remediations_CreateOrUpdateAtSubscription",
        "description": "Creates or updates a remediation at subscription scope.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/remediationNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Remediation"
            },
            "description": "The remediation parameters."
          }
        ],
        "responses": {
          "200": {
            "description": "The updated remediation.",
            "schema": {
              "$ref": "#/definitions/Remediation"
            }
          },
          "201": {
            "description": "The created remediation.",
            "schema": {
              "$ref": "#/definitions/Remediation"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Create remediation at subscription scope": {
            "$ref": "./examples/Remediations_CreateSubscriptionScope.json"
          },
          "Create remediation at subscription scope with all properties": {
            "$ref": "./examples/Remediations_CreateSubscriptionScope_AllProperties.json"
          },
          "Create remediation at subscription scope with resourceIds filter": {
            "$ref": "./examples/Remediations_CreateSubscriptionScope_ResourceIdsFilter.json"
          }
        }
      },
      "get": {
        "operationId": "Remediations_GetAtSubscription",
        "description": "Gets an existing remediation at subscription scope.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/remediationNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved remediation.",
            "schema": {
              "$ref": "#/definitions/Remediation"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get remediation at subscription scope": {
            "$ref": "./examples/Remediations_GetSubscriptionScope.json"
          }
        }
      },
      "delete": {
        "operationId": "Remediations_DeleteAtSubscription",
        "description": "Deletes an existing remediation at subscription scope.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/remediationNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The deleted remediation.",
            "schema": {
              "$ref": "#/definitions/Remediation"
            }
          },
          "204": {
            "description": "The remediation did not exist."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Delete remediation at subscription scope": {
            "$ref": "./examples/Remediations_DeleteSubscriptionScope.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments": {
      "post": {
        "operationId": "Remediations_ListDeploymentsAtResourceGroup",
        "description": "Gets all deployments for a remediation at resource group scope.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/remediationNameParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved remediation deployments.",
            "schema": {
              "$ref": "#/definitions/RemediationDeploymentsListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "List deployments for a remediation at resource group scope": {
            "$ref": "./examples/Remediations_ListDeploymentsResourceGroupScope.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel": {
      "post": {
        "operationId": "Remediations_CancelAtResourceGroup",
        "description": "Cancels a remediation at resource group scope.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/remediationNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The remediation that was canceled.",
            "schema": {
              "$ref": "#/definitions/Remediation"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Cancel a remediation at resource group scope": {
            "$ref": "./examples/Remediations_CancelResourceGroupScope.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations": {
      "get": {
        "operationId": "Remediations_ListForResourceGroup",
        "description": "Gets all remediations for the subscription.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved remediations.",
            "schema": {
              "$ref": "#/definitions/RemediationListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "List remediations at resource group scope": {
            "$ref": "./examples/Remediations_ListResourceGroupScope.json"
          },
          "List remediations at resource group scope with query parameters": {
            "$ref": "./examples/Remediations_ListResourceGroupScope_WithQuery.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}": {
      "put": {
        "operationId": "Remediations_CreateOrUpdateAtResourceGroup",
        "description": "Creates or updates a remediation at resource group scope.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/remediationNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Remediation"
            },
            "description": "The remediation parameters."
          }
        ],
        "responses": {
          "200": {
            "description": "The updated remediation.",
            "schema": {
              "$ref": "#/definitions/Remediation"
            }
          },
          "201": {
            "description": "The created remediation.",
            "schema": {
              "$ref": "#/definitions/Remediation"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Create remediation at resource group scope": {
            "$ref": "./examples/Remediations_CreateResourceGroupScope.json"
          }
        }
      },
      "get": {
        "operationId": "Remediations_GetAtResourceGroup",
        "description": "Gets an existing remediation at resource group scope.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/remediationNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved remediation.",
            "schema": {
              "$ref": "#/definitions/Remediation"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get remediation at resource group scope": {
            "$ref": "./examples/Remediations_GetResourceGroupScope.json"
          }
        }
      },
      "delete": {
        "operationId": "Remediations_DeleteAtResourceGroup",
        "description": "Deletes an existing remediation at resource group scope.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/remediationNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The deleted remediation.",
            "schema": {
              "$ref": "#/definitions/Remediation"
            }
          },
          "204": {
            "description": "The remediation did not exist."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Delete remediation at resource group scope": {
            "$ref": "./examples/Remediations_DeleteResourceGroupScope.json"
          }
        }
      }
    },
    "/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments": {
      "post": {
        "operationId": "Remediations_ListDeploymentsAtResource",
        "description": "Gets all deployments for a remediation at resource scope.",
        "parameters": [
          {
            "$ref": "#/parameters/resourceIdParameter"
          },
          {
            "$ref": "#/parameters/remediationNameParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved remediation deployments.",
            "schema": {
              "$ref": "#/definitions/RemediationDeploymentsListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "List deployments for a remediation at individual resource scope": {
            "$ref": "./examples/Remediations_ListDeploymentsResourceScope.json"
          }
        }
      }
    },
    "/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel": {
      "post": {
        "operationId": "Remediations_CancelAtResource",
        "description": "Cancel a remediation at resource scope.",
        "parameters": [
          {
            "$ref": "#/parameters/resourceIdParameter"
          },
          {
            "$ref": "#/parameters/remediationNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The remediation that was canceled.",
            "schema": {
              "$ref": "#/definitions/Remediation"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Cancel a remediation at individual resource scope": {
            "$ref": "./examples/Remediations_CancelResourceScope.json"
          }
        }
      }
    },
    "/{resourceId}/providers/Microsoft.PolicyInsights/remediations": {
      "get": {
        "operationId": "Remediations_ListForResource",
        "description": "Gets all remediations for a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/resourceIdParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved remediations.",
            "schema": {
              "$ref": "#/definitions/RemediationListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "List remediations at individual resource scope": {
            "$ref": "./examples/Remediations_ListResourceScope.json"
          },
          "List remediations at individual resource scope with query parameters": {
            "$ref": "./examples/Remediations_ListResourceScope_WithQuery.json"
          }
        }
      }
    },
    "/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}": {
      "put": {
        "operationId": "Remediations_CreateOrUpdateAtResource",
        "description": "Creates or updates a remediation at resource scope.",
        "parameters": [
          {
            "$ref": "#/parameters/resourceIdParameter"
          },
          {
            "$ref": "#/parameters/remediationNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Remediation"
            },
            "description": "The remediation parameters."
          }
        ],
        "responses": {
          "200": {
            "description": "The updated remediation.",
            "schema": {
              "$ref": "#/definitions/Remediation"
            }
          },
          "201": {
            "description": "The created remediation.",
            "schema": {
              "$ref": "#/definitions/Remediation"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Create remediation at individual resource scope": {
            "$ref": "./examples/Remediations_CreateResourceScope.json"
          }
        }
      },
      "get": {
        "operationId": "Remediations_GetAtResource",
        "description": "Gets an existing remediation at resource scope.",
        "parameters": [
          {
            "$ref": "#/parameters/resourceIdParameter"
          },
          {
            "$ref": "#/parameters/remediationNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved remediation.",
            "schema": {
              "$ref": "#/definitions/Remediation"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get remediation at individual resource scope": {
            "$ref": "./examples/Remediations_GetResourceScope.json"
          }
        }
      },
      "delete": {
        "operationId": "Remediations_DeleteAtResource",
        "description": "Deletes an existing remediation at individual resource scope.",
        "parameters": [
          {
            "$ref": "#/parameters/resourceIdParameter"
          },
          {
            "$ref": "#/parameters/remediationNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The deleted remediation.",
            "schema": {
              "$ref": "#/definitions/Remediation"
            }
          },
          "204": {
            "description": "The remediation did not exist."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Delete remediation at individual resource scope": {
            "$ref": "./examples/Remediations_DeleteResourceScope.json"
          }
        }
      }
    },
    "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults": {
      "post": {
        "operationId": "PolicyEvents_ListQueryResultsForManagementGroup",
        "description": "Queries policy events for the resources under the management group.",
        "parameters": [
          {
            "$ref": "#/parameters/policyEventsResourceParameter"
          },
          {
            "$ref": "#/parameters/managementGroupsNamespaceParameter"
          },
          {
            "$ref": "#/parameters/managementGroupNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/orderByParameter"
          },
          {
            "$ref": "#/parameters/selectParameter"
          },
          {
            "$ref": "#/parameters/fromParameter"
          },
          {
            "$ref": "#/parameters/toParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          },
          {
            "$ref": "#/parameters/applyParameter"
          },
          {
            "$ref": "#/parameters/skipTokenParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Query results.",
            "schema": {
              "$ref": "#/definitions/PolicyEventsQueryResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink",
          "operationName": "PolicyEvents_NextLink"
        },
        "x-ms-examples": {
          "Query at management group scope": {
            "$ref": "./examples/PolicyEvents_QueryManagementGroupScope.json"
          },
          "Query at management group scope with next link": {
            "$ref": "./examples/PolicyEvents_QueryManagementGroupScopeNextLink.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults": {
      "post": {
        "operationId": "PolicyEvents_ListQueryResultsForSubscription",
        "description": "Queries policy events for the resources under the subscription.",
        "parameters": [
          {
            "$ref": "#/parameters/policyEventsResourceParameter"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/orderByParameter"
          },
          {
            "$ref": "#/parameters/selectParameter"
          },
          {
            "$ref": "#/parameters/fromParameter"
          },
          {
            "$ref": "#/parameters/toParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          },
          {
            "$ref": "#/parameters/applyParameter"
          },
          {
            "$ref": "#/parameters/skipTokenParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Query results.",
            "schema": {
              "$ref": "#/definitions/PolicyEventsQueryResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink",
          "operationName": "PolicyEvents_NextLink"
        },
        "x-ms-examples": {
          "Query at subscription scope": {
            "$ref": "./examples/PolicyEvents_QuerySubscriptionScope.json"
          },
          "Query at subscription scope with next link": {
            "$ref": "./examples/PolicyEvents_QuerySubscriptionScopeNextLink.json"
          },
          "Time range; sort, select and limit": {
            "$ref": "./examples/PolicyEvents_TimeRangeSortSelectTop.json"
          },
          "Filter and group with aggregate": {
            "$ref": "./examples/PolicyEvents_FilterAndGroupByWithAggregate.json"
          },
          "Filter and group without aggregate": {
            "$ref": "./examples/PolicyEvents_FilterAndGroupByWithoutAggregate.json"
          },
          "Filter and aggregate only": {
            "$ref": "./examples/PolicyEvents_FilterAndAggregateOnly.json"
          },
          "Filter and multiple groups": {
            "$ref": "./examples/PolicyEvents_FilterAndMultipleGroups.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults": {
      "post": {
        "operationId": "PolicyEvents_ListQueryResultsForResourceGroup",
        "description": "Queries policy events for the resources under the resource group.",
        "parameters": [
          {
            "$ref": "#/parameters/policyEventsResourceParameter"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/orderByParameter"
          },
          {
            "$ref": "#/parameters/selectParameter"
          },
          {
            "$ref": "#/parameters/fromParameter"
          },
          {
            "$ref": "#/parameters/toParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          },
          {
            "$ref": "#/parameters/applyParameter"
          },
          {
            "$ref": "#/parameters/skipTokenParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Query results.",
            "schema": {
              "$ref": "#/definitions/PolicyEventsQueryResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink",
          "operationName": "PolicyEvents_NextLink"
        },
        "x-ms-examples": {
          "Query at resource group scope": {
            "$ref": "./examples/PolicyEvents_QueryResourceGroupScope.json"
          },
          "Query at resource group scope with next link": {
            "$ref": "./examples/PolicyEvents_QueryResourceGroupScopeNextLink.json"
          }
        }
      }
    },
    "/{resourceId}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults": {
      "post": {
        "operationId": "PolicyEvents_ListQueryResultsForResource",
        "description": "Queries policy events for the resource.",
        "parameters": [
          {
            "$ref": "#/parameters/policyEventsResourceParameter"
          },
          {
            "$ref": "#/parameters/resourceIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/orderByParameter"
          },
          {
            "$ref": "#/parameters/selectParameter"
          },
          {
            "$ref": "#/parameters/fromParameter"
          },
          {
            "$ref": "#/parameters/toParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          },
          {
            "$ref": "#/parameters/applyParameter"
          },
          {
            "$ref": "#/parameters/expandParameter"
          },
          {
            "$ref": "#/parameters/skipTokenParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Query results.",
            "schema": {
              "$ref": "#/definitions/PolicyEventsQueryResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink",
          "operationName": "PolicyEvents_NextLink"
        },
        "x-ms-examples": {
          "Query at resource scope": {
            "$ref": "./examples/PolicyEvents_QueryResourceScope.json"
          },
          "Query at resource scope with next link": {
            "$ref": "./examples/PolicyEvents_QueryResourceScopeNextLink.json"
          },
          "Query at subscription level resource scope": {
            "$ref": "./examples/PolicyEvents_QuerySubscriptionLevelResourceScope.json"
          },
          "Query at nested resource scope": {
            "$ref": "./examples/PolicyEvents_QueryNestedResourceScope.json"
          },
          "Query at subscription level nested resource scope": {
            "$ref": "./examples/PolicyEvents_QuerySubscriptionLevelNestedResourceScope.json"
          },
          "Query components policy events for resource scope filtered by given assignment.": {
            "$ref": "./examples/PolicyEvents_QueryResourceScopeExpandComponents.json"
          },
          "Query components policy events count grouped by user and action type for resource scope filtered by given assignment.": {
            "$ref": "./examples/PolicyEvents_QueryResourceScopeExpandComponentsGroupByWithAggregate.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults": {
      "post": {
        "operationId": "PolicyEvents_ListQueryResultsForPolicySetDefinition",
        "description": "Queries policy events for the subscription level policy set definition.",
        "parameters": [
          {
            "$ref": "#/parameters/policyEventsResourceParameter"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/authorizationNamespaceParameter"
          },
          {
            "$ref": "#/parameters/policySetDefinitionNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/orderByParameter"
          },
          {
            "$ref": "#/parameters/selectParameter"
          },
          {
            "$ref": "#/parameters/fromParameter"
          },
          {
            "$ref": "#/parameters/toParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          },
          {
            "$ref": "#/parameters/applyParameter"
          },
          {
            "$ref": "#/parameters/skipTokenParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Query results.",
            "schema": {
              "$ref": "#/definitions/PolicyEventsQueryResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink",
          "operationName": "PolicyEvents_NextLink"
        },
        "x-ms-examples": {
          "Query at subscription level policy set definition scope": {
            "$ref": "./examples/PolicyEvents_QuerySubscriptionLevelPolicySetDefinitionScope.json"
          },
          "Query at subscription level policy set definition scope with next link": {
            "$ref": "./examples/PolicyEvents_QuerySubscriptionLevelPolicySetDefinitionScopeNextLink.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults": {
      "post": {
        "operationId": "PolicyEvents_ListQueryResultsForPolicyDefinition",
        "description": "Queries policy events for the subscription level policy definition.",
        "parameters": [
          {
            "$ref": "#/parameters/policyEventsResourceParameter"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/authorizationNamespaceParameter"
          },
          {
            "$ref": "#/parameters/policyDefinitionNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/orderByParameter"
          },
          {
            "$ref": "#/parameters/selectParameter"
          },
          {
            "$ref": "#/parameters/fromParameter"
          },
          {
            "$ref": "#/parameters/toParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          },
          {
            "$ref": "#/parameters/applyParameter"
          },
          {
            "$ref": "#/parameters/skipTokenParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Query results.",
            "schema": {
              "$ref": "#/definitions/PolicyEventsQueryResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink",
          "operationName": "PolicyEvents_NextLink"
        },
        "x-ms-examples": {
          "Query at subscription level policy definition scope": {
            "$ref": "./examples/PolicyEvents_QuerySubscriptionLevelPolicyDefinitionScope.json"
          },
          "Query at subscription level policy definition scope with next link": {
            "$ref": "./examples/PolicyEvents_QuerySubscriptionLevelPolicyDefinitionScopeNextLink.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults": {
      "post": {
        "operationId": "PolicyEvents_ListQueryResultsForSubscriptionLevelPolicyAssignment",
        "description": "Queries policy events for the subscription level policy assignment.",
        "parameters": [
          {
            "$ref": "#/parameters/policyEventsResourceParameter"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/authorizationNamespaceParameter"
          },
          {
            "$ref": "#/parameters/policyAssignmentNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/orderByParameter"
          },
          {
            "$ref": "#/parameters/selectParameter"
          },
          {
            "$ref": "#/parameters/fromParameter"
          },
          {
            "$ref": "#/parameters/toParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          },
          {
            "$ref": "#/parameters/applyParameter"
          },
          {
            "$ref": "#/parameters/skipTokenParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Query results.",
            "schema": {
              "$ref": "#/definitions/PolicyEventsQueryResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink",
          "operationName": "PolicyEvents_NextLink"
        },
        "x-ms-examples": {
          "Query at subscription level policy assignment scope": {
            "$ref": "./examples/PolicyEvents_QuerySubscriptionLevelPolicyAssignmentScope.json"
          },
          "Query at subscription level policy assignment scope with next link": {
            "$ref": "./examples/PolicyEvents_QuerySubscriptionLevelPolicyAssignmentScopeNextLink.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults": {
      "post": {
        "operationId": "PolicyEvents_ListQueryResultsForResourceGroupLevelPolicyAssignment",
        "description": "Queries policy events for the resource group level policy assignment.",
        "parameters": [
          {
            "$ref": "#/parameters/policyEventsResourceParameter"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/authorizationNamespaceParameter"
          },
          {
            "$ref": "#/parameters/policyAssignmentNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/orderByParameter"
          },
          {
            "$ref": "#/parameters/selectParameter"
          },
          {
            "$ref": "#/parameters/fromParameter"
          },
          {
            "$ref": "#/parameters/toParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          },
          {
            "$ref": "#/parameters/applyParameter"
          },
          {
            "$ref": "#/parameters/skipTokenParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Query results.",
            "schema": {
              "$ref": "#/definitions/PolicyEventsQueryResults"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/QueryFailure"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink",
          "operationName": "PolicyEvents_NextLink"
        },
        "x-ms-examples": {
          "Query at resource group level policy assignment scope": {
            "$ref": "./examples/PolicyEvents_QueryResourceGroupLevelPolicyAssignmentScope.json"
          },
          "Query at resource group level policy assignment scope with next link": {
            "$ref": "./examples/PolicyEvents_QueryResourceGroupLevelPolicyAssignmentScopeNextLink.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/attestations": {
      "get": {
        "operationId": "Attestations_ListForSubscription",
        "description": "Gets all attestations for the subscription.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved attestations.",
            "schema": {
              "$ref": "#/definitions/AttestationListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "List attestations at subscription scope": {
            "$ref": "./examples/Attestations_ListSubscriptionScope.json"
          },
          "List attestations at subscription scope with query parameters": {
            "$ref": "./examples/Attestations_ListSubscriptionScope_WithQuery.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}": {
      "put": {
        "operationId": "Attestations_CreateOrUpdateAtSubscription",
        "description": "Creates or updates an attestation at subscription scope.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/attestationNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Attestation"
            },
            "description": "The attestation parameters."
          }
        ],
        "responses": {
          "200": {
            "description": "The updated attestation.",
            "schema": {
              "$ref": "#/definitions/Attestation"
            }
          },
          "201": {
            "description": "The created attestation.",
            "schema": {
              "$ref": "#/definitions/Attestation"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Create attestation at subscription scope": {
            "$ref": "./examples/Attestations_CreateSubscriptionScope.json"
          },
          "Create attestation at subscription scope with all properties": {
            "$ref": "./examples/Attestations_CreateSubscriptionScope_AllProperties.json"
          }
        }
      },
      "get": {
        "operationId": "Attestations_GetAtSubscription",
        "description": "Gets an existing attestation at subscription scope.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/attestationNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved attestation.",
            "schema": {
              "$ref": "#/definitions/Attestation"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get attestation at subscription scope": {
            "$ref": "./examples/Attestations_GetSubscriptionScope.json"
          }
        }
      },
      "delete": {
        "operationId": "Attestations_DeleteAtSubscription",
        "description": "Deletes an existing attestation at subscription scope.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/attestationNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The attestation was successfully deleted."
          },
          "204": {
            "description": "The attestation did not exist."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Delete attestation at subscription scope": {
            "$ref": "./examples/Attestations_DeleteSubscriptionScope.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/attestations": {
      "get": {
        "operationId": "Attestations_ListForResourceGroup",
        "description": "Gets all attestations for the resource group.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved attestations.",
            "schema": {
              "$ref": "#/definitions/AttestationListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "List attestations at resource group scope": {
            "$ref": "./examples/Attestations_ListResourceGroupScope.json"
          },
          "List attestations at resource group scope with query parameters": {
            "$ref": "./examples/Attestations_ListResourceGroupScope_WithQuery.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/attestations/{attestationName}": {
      "put": {
        "operationId": "Attestations_CreateOrUpdateAtResourceGroup",
        "description": "Creates or updates an attestation at resource group scope.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/attestationNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Attestation"
            },
            "description": "The attestation parameters."
          }
        ],
        "responses": {
          "200": {
            "description": "The updated attestation.",
            "schema": {
              "$ref": "#/definitions/Attestation"
            }
          },
          "201": {
            "description": "The created attestation.",
            "schema": {
              "$ref": "#/definitions/Attestation"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Create attestation at resource group scope": {
            "$ref": "./examples/Attestations_CreateResourceGroupScope.json"
          }
        }
      },
      "get": {
        "operationId": "Attestations_GetAtResourceGroup",
        "description": "Gets an existing attestation at resource group scope.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/attestationNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved attestation.",
            "schema": {
              "$ref": "#/definitions/Attestation"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get attestation at resource group scope": {
            "$ref": "./examples/Attestations_GetResourceGroupScope.json"
          }
        }
      },
      "delete": {
        "operationId": "Attestations_DeleteAtResourceGroup",
        "description": "Deletes an existing attestation at resource group scope.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/attestationNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The attestation was successfully deleted."
          },
          "204": {
            "description": "The attestation did not exist."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Delete attestation at resource group scope": {
            "$ref": "./examples/Attestations_DeleteResourceGroupScope.json"
          }
        }
      }
    },
    "/{resourceId}/providers/Microsoft.PolicyInsights/attestations": {
      "get": {
        "operationId": "Attestations_ListForResource",
        "description": "Gets all attestations for a resource.",
        "parameters": [
          {
            "$ref": "#/parameters/resourceIdParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          },
          {
            "$ref": "#/parameters/filterParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved attestations.",
            "schema": {
              "$ref": "#/definitions/AttestationListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "List attestations at individual resource scope": {
            "$ref": "./examples/Attestations_ListResourceScope.json"
          },
          "List attestations at individual resource scope with query parameters": {
            "$ref": "./examples/Attestations_ListResourceScope_WithQuery.json"
          }
        }
      }
    },
    "/{resourceId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}": {
      "put": {
        "operationId": "Attestations_CreateOrUpdateAtResource",
        "description": "Creates or updates an attestation at resource scope.",
        "parameters": [
          {
            "$ref": "#/parameters/resourceIdParameter"
          },
          {
            "$ref": "#/parameters/attestationNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Attestation"
            },
            "description": "The attestation parameters."
          }
        ],
        "responses": {
          "200": {
            "description": "The updated attestation.",
            "schema": {
              "$ref": "#/definitions/Attestation"
            }
          },
          "201": {
            "description": "The created attestation.",
            "schema": {
              "$ref": "#/definitions/Attestation"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-examples": {
          "Create attestation at individual resource scope": {
            "$ref": "./examples/Attestations_CreateResourceScope.json"
          }
        }
      },
      "get": {
        "operationId": "Attestations_GetAtResource",
        "description": "Gets an existing attestation at resource scope.",
        "parameters": [
          {
            "$ref": "#/parameters/resourceIdParameter"
          },
          {
            "$ref": "#/parameters/attestationNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved attestation.",
            "schema": {
              "$ref": "#/definitions/Attestation"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get attestation at individual resource scope": {
            "$ref": "./examples/Attestations_GetResourceScope.json"
          }
        }
      },
      "delete": {
        "operationId": "Attestations_DeleteAtResource",
        "description": "Deletes an existing attestation at individual resource scope.",
        "parameters": [
          {
            "$ref": "#/parameters/resourceIdParameter"
          },
          {
            "$ref": "#/parameters/attestationNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The attestation was successfully deleted."
          },
          "204": {
            "description": "The attestation did not exist."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Delete attestation at individual resource scope": {
            "$ref": "./examples/Attestations_DeleteResourceScope.json"
          }
        }
      }
    },
    "/providers/Microsoft.PolicyInsights/policyMetadata/{resourceName}": {
      "get": {
        "operationId": "PolicyMetadata_GetResource",
        "description": "Get policy metadata resource.",
        "parameters": [
          {
            "$ref": "#/parameters/resourceNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Policy metadata resource definition.",
            "schema": {
              "$ref": "#/definitions/PolicyMetadata"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get a single policy metadata resource": {
            "$ref": "./examples/PolicyMetadata_GetResource.json"
          }
        }
      }
    },
    "/providers/Microsoft.PolicyInsights/policyMetadata": {
      "get": {
        "operationId": "PolicyMetadata_List",
        "description": "Get a list of the policy metadata resources.",
        "parameters": [
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "$ref": "#/parameters/topParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Policy metadata resource collection.",
            "schema": {
              "$ref": "#/definitions/PolicyMetadataCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Get collection of policy metadata resources": {
            "$ref": "./examples/PolicyMetadata_List.json"
          },
          "Get collection of policy metadata resources using top query parameter": {
            "$ref": "./examples/PolicyMetadata_List_WithTop.json"
          }
        }
      }
    }
  },
  "parameters": {
    "policyStatesResourceParameter": {
      "name": "policyStatesResource",
      "in": "path",
      "required": true,
      "type": "string",
      "enum": [
        "default",
        "latest"
      ],
      "x-ms-enum": {
        "name": "PolicyStatesResource",
        "modelAsString": true
      },
      "description": "The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).",
      "x-ms-parameter-location": "method"
    },
    "policyStatesSummaryResourceParameter": {
      "name": "policyStatesSummaryResource",
      "in": "path",
      "required": true,
      "type": "string",
      "enum": [
        "latest"
      ],
      "x-ms-enum": {
        "name": "PolicyStatesSummaryResourceType",
        "modelAsString": true
      },
      "description": "The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.",
      "x-ms-parameter-location": "method"
    },
    "managementGroupsNamespaceParameter": {
      "name": "managementGroupsNamespace",
      "in": "path",
      "required": true,
      "type": "string",
      "enum": [
        "Microsoft.Management"
      ],
      "x-ms-enum": {
        "name": "ManagementGroupsNamespaceType",
        "modelAsString": false
      },
      "description": "The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed.",
      "x-ms-parameter-location": "method"
    },
    "managementGroupNameParameter": {
      "name": "managementGroupName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Management group name.",
      "x-ms-parameter-location": "method"
    },
    "subscriptionId": {
      "name": "subscriptionId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Microsoft Azure subscription ID.",
      "x-ms-parameter-location": "method"
    },
    "resourceGroupNameParameter": {
      "name": "resourceGroupName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Resource group name.",
      "x-ms-parameter-location": "method"
    },
    "resourceIdParameter": {
      "name": "resourceId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Resource ID.",
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true
    },
    "authorizationNamespaceParameter": {
      "name": "authorizationNamespace",
      "in": "path",
      "required": true,
      "type": "string",
      "enum": [
        "Microsoft.Authorization"
      ],
      "x-ms-enum": {
        "name": "AuthorizationNamespaceType",
        "modelAsString": false
      },
      "description": "The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.",
      "x-ms-parameter-location": "method"
    },
    "policySetDefinitionNameParameter": {
      "name": "policySetDefinitionName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Policy set definition name.",
      "x-ms-parameter-location": "method"
    },
    "policyDefinitionNameParameter": {
      "name": "policyDefinitionName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Policy definition name.",
      "x-ms-parameter-location": "method"
    },
    "policyAssignmentNameParameter": {
      "name": "policyAssignmentName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Policy assignment name.",
      "x-ms-parameter-location": "method"
    },
    "scopeParameter": {
      "name": "scope",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "A valid scope, i.e. management group, subscription, resource group, or resource ID. Scope used has no effect on metadata returned.",
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true
    },
    "apiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "Client Api Version.",
      "x-ms-parameter-location": "client"
    },
    "topParameter": {
      "name": "$top",
      "in": "query",
      "required": false,
      "type": "integer",
      "format": "int32",
      "minimum": 0,
      "description": "Maximum number of records to return.",
      "x-ms-parameter-location": "method",
      "x-ms-parameter-grouping": {
        "name": "QueryOptions"
      },
      "x-ms-client-name": "Top"
    },
    "orderByParameter": {
      "name": "$orderby",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".",
      "x-ms-parameter-location": "method",
      "x-ms-parameter-grouping": {
        "name": "QueryOptions"
      },
      "x-ms-client-name": "OrderBy"
    },
    "selectParameter": {
      "name": "$select",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".",
      "x-ms-parameter-location": "method",
      "x-ms-parameter-grouping": {
        "name": "QueryOptions"
      },
      "x-ms-client-name": "Select"
    },
    "fromParameter": {
      "name": "$from",
      "in": "query",
      "required": false,
      "type": "string",
      "format": "date-time",
      "description": "ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).",
      "x-ms-parameter-location": "method",
      "x-ms-parameter-grouping": {
        "name": "QueryOptions"
      },
      "x-ms-client-name": "From"
    },
    "toParameter": {
      "name": "$to",
      "in": "query",
      "required": false,
      "type": "string",
      "format": "date-time",
      "description": "ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.",
      "x-ms-parameter-location": "method",
      "x-ms-parameter-grouping": {
        "name": "QueryOptions"
      },
      "x-ms-client-name": "To"
    },
    "filterParameter": {
      "name": "$filter",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "OData filter expression.",
      "x-ms-parameter-location": "method",
      "x-ms-parameter-grouping": {
        "name": "QueryOptions"
      },
      "x-ms-client-name": "Filter"
    },
    "applyParameter": {
      "name": "$apply",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "OData apply expression for aggregations.",
      "x-ms-parameter-location": "method",
      "x-ms-parameter-grouping": {
        "name": "QueryOptions"
      },
      "x-ms-client-name": "Apply"
    },
    "expandParameter": {
      "name": "$expand",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "The $expand query parameter. For example, to expand components use $expand=components",
      "x-ms-parameter-location": "method",
      "x-ms-parameter-grouping": {
        "name": "QueryOptions"
      },
      "x-ms-client-name": "Expand"
    },
    "skipTokenParameter": {
      "name": "$skiptoken",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "Skiptoken is only provided if a previous response returned a partial result as a part of nextLink element.",
      "x-ms-parameter-location": "method",
      "x-ms-parameter-grouping": {
        "name": "QueryOptions"
      },
      "x-ms-client-name": "SkipToken"
    },
    "componentPolicyStatesResource": {
      "name": "componentPolicyStatesResource",
      "in": "path",
      "required": true,
      "type": "string",
      "enum": [
        "latest"
      ],
      "x-ms-enum": {
        "name": "ComponentPolicyStatesResource",
        "modelAsString": true
      },
      "description": "The virtual resource under ComponentPolicyStates resource type. In a given time range, 'latest' represents the latest component policy state(s).",
      "x-ms-parameter-location": "method"
    },
    "resourceGroupName": {
      "name": "resourceGroupName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Resource group name.",
      "x-ms-parameter-location": "method"
    },
    "resourceId": {
      "name": "resourceId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Resource ID.",
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true
    },
    "authorizationNamespace": {
      "name": "authorizationNamespace",
      "in": "path",
      "required": true,
      "type": "string",
      "enum": [
        "Microsoft.Authorization"
      ],
      "x-ms-enum": {
        "name": "AuthorizationNamespaceType",
        "modelAsString": false
      },
      "description": "The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.",
      "x-ms-parameter-location": "method"
    },
    "policyDefinitionName": {
      "name": "policyDefinitionName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Policy definition name.",
      "pattern": "^[^<>%&:\\\\?/#]*$",
      "minLength": 1,
      "maxLength": 64,
      "x-ms-parameter-location": "method"
    },
    "policyAssignmentName": {
      "name": "policyAssignmentName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Policy assignment name.",
      "pattern": "^[^<>%&:\\\\?/#]*$",
      "minLength": 1,
      "maxLength": 64,
      "x-ms-parameter-location": "method"
    },
    "apiVersion": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "Client Api Version.",
      "x-ms-parameter-location": "client"
    },
    "top": {
      "name": "$top",
      "in": "query",
      "required": false,
      "type": "integer",
      "format": "int32",
      "minimum": 0,
      "description": "Maximum number of records to return.",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "Top"
    },
    "orderBy": {
      "name": "$orderby",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "OrderBy"
    },
    "select": {
      "name": "$select",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "Select"
    },
    "from": {
      "name": "$from",
      "in": "query",
      "required": false,
      "type": "string",
      "format": "date-time",
      "description": "ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "From"
    },
    "to": {
      "name": "$to",
      "in": "query",
      "required": false,
      "type": "string",
      "format": "date-time",
      "description": "ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "To"
    },
    "filter": {
      "name": "$filter",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "OData filter expression.",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "Filter"
    },
    "apply": {
      "name": "$apply",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "OData apply expression for aggregations.",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "Apply"
    },
    "componentPolicyStatesExpand": {
      "name": "$expand",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "The $expand query parameter.",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "Expand"
    },
    "managementGroupIdParameter": {
      "name": "managementGroupId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Management group ID.",
      "x-ms-parameter-location": "method"
    },
    "remediationNameParameter": {
      "name": "remediationName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of the remediation.",
      "x-ms-parameter-location": "method"
    },
    "subscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Microsoft Azure subscription ID.",
      "x-ms-parameter-location": "method"
    },
    "policyEventsResourceParameter": {
      "name": "policyEventsResource",
      "in": "path",
      "required": true,
      "type": "string",
      "enum": [
        "default"
      ],
      "x-ms-enum": {
        "name": "PolicyEventsResourceType",
        "modelAsString": true
      },
      "description": "The name of the virtual resource under PolicyEvents resource type; only \"default\" is allowed.",
      "x-ms-parameter-location": "method"
    },
    "attestationNameParameter": {
      "name": "attestationName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of the attestation.",
      "x-ms-parameter-location": "method"
    },
    "resourceNameParameter": {
      "name": "resourceName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of the policy metadata resource.",
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true
    },
    "SubscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The ID of the target subscription.",
      "minLength": 1
    },
    "ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "The API version to use for this operation.",
      "minLength": 1
    },
    "ResourceGroupNameParameter": {
      "name": "resourceGroupName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of the resource group. The name is case insensitive.",
      "minLength": 1,
      "maxLength": 90,
      "x-ms-parameter-location": "method"
    },
    "OperationIdParameter": {
      "name": "operationId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The ID of an ongoing async operation.",
      "minLength": 1,
      "x-ms-parameter-location": "method"
    },
    "LocationParameter": {
      "name": "location",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of Azure region.",
      "minLength": 1,
      "x-ms-parameter-location": "method"
    }
  },
  "definitions": {
    "PolicyStatesQueryResults": {
      "description": "Query results.",
      "properties": {
        "@odata.context": {
          "description": "OData context string; used by OData clients to resolve type information based on metadata.",
          "type": "string"
        },
        "@odata.count": {
          "description": "OData entity count; represents the number of policy state records returned.",
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "@odata.nextLink": {
          "description": "Odata next link; URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "Query results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyState"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "PolicyState": {
      "type": "object",
      "description": "Policy state record.",
      "properties": {
        "@odata.id": {
          "description": "OData entity ID; always set to null since policy state records do not have an entity ID.",
          "type": "string"
        },
        "@odata.context": {
          "description": "OData context string; used by OData clients to resolve type information based on metadata.",
          "type": "string"
        },
        "timestamp": {
          "description": "Timestamp for the policy state record.",
          "type": "string",
          "format": "date-time"
        },
        "resourceId": {
          "description": "Resource ID.",
          "type": "string"
        },
        "policyAssignmentId": {
          "description": "Policy assignment ID.",
          "type": "string"
        },
        "policyDefinitionId": {
          "description": "Policy definition ID.",
          "type": "string"
        },
        "effectiveParameters": {
          "description": "Effective parameters for the policy assignment.",
          "type": "string"
        },
        "isCompliant": {
          "description": "Flag which states whether the resource is compliant against the policy assignment it was evaluated against. This property is deprecated; please use ComplianceState instead.",
          "type": "boolean"
        },
        "subscriptionId": {
          "description": "Subscription ID.",
          "type": "string"
        },
        "resourceType": {
          "description": "Resource type.",
          "type": "string"
        },
        "resourceLocation": {
          "description": "Resource location.",
          "type": "string"
        },
        "resourceGroup": {
          "description": "Resource group name.",
          "type": "string"
        },
        "resourceTags": {
          "description": "List of resource tags.",
          "type": "string"
        },
        "policyAssignmentName": {
          "description": "Policy assignment name.",
          "type": "string"
        },
        "policyAssignmentOwner": {
          "description": "Policy assignment owner.",
          "type": "string"
        },
        "policyAssignmentParameters": {
          "description": "Policy assignment parameters.",
          "type": "string"
        },
        "policyAssignmentScope": {
          "description": "Policy assignment scope.",
          "type": "string"
        },
        "policyDefinitionName": {
          "description": "Policy definition name.",
          "type": "string"
        },
        "policyDefinitionAction": {
          "description": "Policy definition action, i.e. effect.",
          "type": "string"
        },
        "policyDefinitionCategory": {
          "description": "Policy definition category.",
          "type": "string"
        },
        "policySetDefinitionId": {
          "description": "Policy set definition ID, if the policy assignment is for a policy set.",
          "type": "string"
        },
        "policySetDefinitionName": {
          "description": "Policy set definition name, if the policy assignment is for a policy set.",
          "type": "string"
        },
        "policySetDefinitionOwner": {
          "description": "Policy set definition owner, if the policy assignment is for a policy set.",
          "type": "string"
        },
        "policySetDefinitionCategory": {
          "description": "Policy set definition category, if the policy assignment is for a policy set.",
          "type": "string"
        },
        "policySetDefinitionParameters": {
          "description": "Policy set definition parameters, if the policy assignment is for a policy set.",
          "type": "string"
        },
        "managementGroupIds": {
          "description": "Comma separated list of management group IDs, which represent the hierarchy of the management groups the resource is under.",
          "type": "string"
        },
        "policyDefinitionReferenceId": {
          "description": "Reference ID for the policy definition inside the policy set, if the policy assignment is for a policy set.",
          "type": "string"
        },
        "complianceState": {
          "description": "Compliance state of the resource.",
          "type": "string"
        },
        "policyEvaluationDetails": {
          "description": "Policy evaluation details.",
          "type": "object",
          "$ref": "#/definitions/PolicyEvaluationDetails"
        },
        "policyDefinitionGroupNames": {
          "description": "Policy definition group names.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "components": {
          "description": "Components state compliance records populated only when URL contains $expand=components clause.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentStateDetails"
          }
        },
        "policyDefinitionVersion": {
          "description": "Evaluated policy definition version.",
          "type": "string",
          "readOnly": true
        },
        "policySetDefinitionVersion": {
          "description": "Evaluated policy set definition version.",
          "type": "string",
          "readOnly": true
        },
        "policyAssignmentVersion": {
          "description": "Evaluated policy assignment version.",
          "type": "string",
          "readOnly": true
        }
      },
      "additionalProperties": {
        "description": "The list of key/value pairs for the additional properties, in the format 'key':'value' where key = the field name, and value = the field value. By default this is not populated"
      }
    },
    "PolicyEvaluationDetails": {
      "type": "object",
      "description": "Policy evaluation details.",
      "properties": {
        "evaluatedExpressions": {
          "description": "Details of the evaluated expressions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExpressionEvaluationDetails"
          },
          "x-ms-identifiers": []
        },
        "ifNotExistsDetails": {
          "description": "Evaluation details of IfNotExists effect.",
          "type": "object",
          "$ref": "#/definitions/IfNotExistsEvaluationDetails"
        }
      }
    },
    "ComponentStateDetails": {
      "type": "object",
      "description": "Component state details.",
      "properties": {
        "id": {
          "description": "Component Id.",
          "type": "string"
        },
        "type": {
          "description": "Component type.",
          "type": "string"
        },
        "name": {
          "description": "Component name.",
          "type": "string"
        },
        "timestamp": {
          "description": "Component compliance evaluation timestamp.",
          "type": "string",
          "format": "date-time"
        },
        "complianceState": {
          "description": "Component compliance state.",
          "type": "string"
        }
      },
      "additionalProperties": {
        "description": "The list of key/value pairs for the additional properties, in the format 'key':'value' where key = the field name, and value = the field value. By default this is not populated"
      }
    },
    "ExpressionEvaluationDetails": {
      "type": "object",
      "description": "Evaluation details of policy language expressions.",
      "properties": {
        "result": {
          "description": "Evaluation result.",
          "type": "string"
        },
        "expression": {
          "description": "Expression evaluated.",
          "type": "string"
        },
        "expressionKind": {
          "description": "The kind of expression that was evaluated.",
          "type": "string",
          "readOnly": true
        },
        "path": {
          "description": "Property path if the expression is a field or an alias.",
          "type": "string"
        },
        "expressionValue": {
          "description": "Value of the expression.",
          "type": "object"
        },
        "targetValue": {
          "description": "Target value to be compared with the expression value.",
          "type": "object"
        },
        "operator": {
          "description": "Operator to compare the expression value and the target value.",
          "type": "string"
        }
      }
    },
    "IfNotExistsEvaluationDetails": {
      "type": "object",
      "description": "Evaluation details of IfNotExists effect.",
      "properties": {
        "resourceId": {
          "description": "ID of the last evaluated resource for IfNotExists effect.",
          "type": "string"
        },
        "totalResources": {
          "description": "Total number of resources to which the existence condition is applicable.",
          "type": "integer"
        }
      }
    },
    "SummarizeResults": {
      "description": "Summarize action results.",
      "properties": {
        "@odata.context": {
          "description": "OData context string; used by OData clients to resolve type information based on metadata.",
          "type": "string"
        },
        "@odata.count": {
          "description": "OData entity count; represents the number of summaries returned; always set to 1.",
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 1
        },
        "value": {
          "description": "Summarize action results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Summary"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "Summary": {
      "description": "Summary results.",
      "properties": {
        "@odata.id": {
          "description": "OData entity ID; always set to null since summaries do not have an entity ID.",
          "type": "string"
        },
        "@odata.context": {
          "description": "OData context string; used by OData clients to resolve type information based on metadata.",
          "type": "string"
        },
        "results": {
          "description": "Compliance summary for all policy assignments.",
          "$ref": "#/definitions/SummaryResults"
        },
        "policyAssignments": {
          "description": "Policy assignments summary.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyAssignmentSummary"
          },
          "x-ms-identifiers": [
            "policyAssignmentId"
          ]
        }
      }
    },
    "SummaryResults": {
      "description": "Compliance summary on a particular summary level.",
      "properties": {
        "queryResultsUri": {
          "description": "HTTP POST URI for queryResults action on Microsoft.PolicyInsights to retrieve raw results for the compliance summary. This property will not be available by default in future API versions, but could be queried explicitly.",
          "type": "string"
        },
        "nonCompliantResources": {
          "description": "Number of non-compliant resources.",
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "nonCompliantPolicies": {
          "description": "Number of non-compliant policies.",
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "resourceDetails": {
          "description": "The resources summary at this level.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComplianceDetail"
          },
          "x-ms-identifiers": []
        },
        "policyDetails": {
          "description": "The policy artifact summary at this level. For query scope level, it represents policy assignment summary. For policy assignment level, it represents policy definitions summary.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComplianceDetail"
          },
          "x-ms-identifiers": []
        },
        "policyGroupDetails": {
          "description": "The policy definition group summary at this level.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComplianceDetail"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "ComplianceDetail": {
      "description": "The compliance state rollup.",
      "properties": {
        "complianceState": {
          "description": "The compliance state.",
          "type": "string"
        },
        "count": {
          "description": "Summarized count value for this compliance state.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PolicyAssignmentSummary": {
      "description": "Policy assignment summary.",
      "properties": {
        "policyAssignmentId": {
          "description": "Policy assignment ID.",
          "type": "string"
        },
        "policySetDefinitionId": {
          "description": "Policy set definition ID, if the policy assignment is for a policy set.",
          "type": "string"
        },
        "results": {
          "description": "Compliance summary for the policy assignment.",
          "$ref": "#/definitions/SummaryResults"
        },
        "policyDefinitions": {
          "description": "Policy definitions summary.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyDefinitionSummary"
          },
          "x-ms-identifiers": [
            "policyDefinitionId"
          ]
        },
        "policyGroups": {
          "description": "Policy definition group summary.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyGroupSummary"
          },
          "x-ms-identifiers": [
            "policyGroupName"
          ]
        }
      }
    },
    "PolicyDefinitionSummary": {
      "description": "Policy definition summary.",
      "properties": {
        "policyDefinitionId": {
          "description": "Policy definition ID.",
          "type": "string"
        },
        "policyDefinitionReferenceId": {
          "description": "Policy definition reference ID.",
          "type": "string"
        },
        "policyDefinitionGroupNames": {
          "description": "Policy definition group names.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "effect": {
          "description": "Policy effect, i.e. policy definition action.",
          "type": "string"
        },
        "results": {
          "description": "Compliance summary for the policy definition.",
          "$ref": "#/definitions/SummaryResults"
        }
      }
    },
    "PolicyGroupSummary": {
      "description": "Policy definition group summary.",
      "properties": {
        "policyGroupName": {
          "description": "Policy group name.",
          "type": "string"
        },
        "results": {
          "description": "Compliance summary for the policy definition group.",
          "$ref": "#/definitions/SummaryResults"
        }
      }
    },
    "QueryFailure": {
      "description": "Error response.",
      "properties": {
        "error": {
          "description": "Error definition.",
          "properties": {
            "code": {
              "description": "Service specific error code which serves as the substatus for the HTTP error code.",
              "type": "string",
              "readOnly": true
            },
            "message": {
              "description": "Description of the error.",
              "type": "string",
              "readOnly": true
            }
          }
        }
      }
    },
    "MetadataDocument": {
      "description": "Metadata XML document.",
      "type": "string"
    },
    "ComponentPolicyStatesQueryResults": {
      "type": "object",
      "description": "Query results.",
      "properties": {
        "@odata.context": {
          "description": "OData context string; used by OData clients to resolve type information based on metadata.",
          "type": "string"
        },
        "@odata.count": {
          "description": "OData entity count; represents the number of policy state records returned.",
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "value": {
          "description": "Query results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentPolicyState"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "ComponentPolicyState": {
      "type": "object",
      "description": "Component Policy State record.",
      "properties": {
        "@odata.id": {
          "description": "OData entity ID; always set to null since component policy state records do not have an entity ID.",
          "type": "string",
          "readOnly": true
        },
        "@odata.context": {
          "description": "OData context string; used by OData clients to resolve type information based on metadata.",
          "type": "string",
          "readOnly": true
        },
        "timestamp": {
          "description": "Timestamp for the component policy state record.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "componentId": {
          "description": "Component Id.",
          "type": "string",
          "readOnly": true
        },
        "componentType": {
          "description": "Component type.",
          "type": "string",
          "readOnly": true
        },
        "componentName": {
          "description": "Component name.",
          "type": "string",
          "readOnly": true
        },
        "resourceId": {
          "description": "Resource ID.",
          "type": "string",
          "readOnly": true
        },
        "policyAssignmentId": {
          "description": "Policy assignment ID.",
          "type": "string",
          "readOnly": true
        },
        "policyDefinitionId": {
          "description": "Policy definition ID.",
          "type": "string",
          "readOnly": true
        },
        "subscriptionId": {
          "description": "Subscription ID.",
          "type": "string",
          "readOnly": true
        },
        "resourceType": {
          "description": "Resource type.",
          "type": "string",
          "readOnly": true
        },
        "resourceLocation": {
          "description": "Resource location.",
          "type": "string",
          "readOnly": true
        },
        "resourceGroup": {
          "description": "Resource group name.",
          "type": "string",
          "readOnly": true
        },
        "policyAssignmentName": {
          "description": "Policy assignment name.",
          "type": "string",
          "readOnly": true
        },
        "policyAssignmentOwner": {
          "description": "Policy assignment owner.",
          "type": "string",
          "readOnly": true
        },
        "policyAssignmentParameters": {
          "description": "Policy assignment parameters.",
          "type": "string",
          "readOnly": true
        },
        "policyAssignmentScope": {
          "description": "Policy assignment scope.",
          "type": "string",
          "readOnly": true
        },
        "policyDefinitionName": {
          "description": "Policy definition name.",
          "type": "string",
          "readOnly": true
        },
        "policyDefinitionAction": {
          "description": "Policy definition action, i.e. effect.",
          "type": "string",
          "readOnly": true
        },
        "policyDefinitionCategory": {
          "description": "Policy definition category.",
          "type": "string",
          "readOnly": true
        },
        "policySetDefinitionId": {
          "description": "Policy set definition ID, if the policy assignment is for a policy set.",
          "type": "string",
          "readOnly": true
        },
        "policySetDefinitionName": {
          "description": "Policy set definition name, if the policy assignment is for a policy set.",
          "type": "string",
          "readOnly": true
        },
        "policySetDefinitionOwner": {
          "description": "Policy set definition owner, if the policy assignment is for a policy set.",
          "type": "string",
          "readOnly": true
        },
        "policySetDefinitionCategory": {
          "description": "Policy set definition category, if the policy assignment is for a policy set.",
          "type": "string",
          "readOnly": true
        },
        "policySetDefinitionParameters": {
          "description": "Policy set definition parameters, if the policy assignment is for a policy set.",
          "type": "string",
          "readOnly": true
        },
        "policyDefinitionReferenceId": {
          "description": "Reference ID for the policy definition inside the policy set, if the policy assignment is for a policy set.",
          "type": "string",
          "readOnly": true
        },
        "complianceState": {
          "description": "Compliance state of the resource.",
          "type": "string",
          "readOnly": true
        },
        "policyEvaluationDetails": {
          "description": "Policy evaluation details. This is only included in the response if the request contains $expand=PolicyEvaluationDetails.",
          "type": "object",
          "$ref": "#/definitions/ComponentPolicyEvaluationDetails"
        },
        "policyDefinitionGroupNames": {
          "description": "Policy definition group names.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "policyDefinitionVersion": {
          "description": "Evaluated policy definition version.",
          "type": "string",
          "readOnly": true
        },
        "policySetDefinitionVersion": {
          "description": "Evaluated policy set definition version.",
          "type": "string",
          "readOnly": true
        },
        "policyAssignmentVersion": {
          "description": "Evaluated policy assignment version.",
          "type": "string",
          "readOnly": true
        }
      },
      "additionalProperties": {
        "description": "The list of key/value pairs for the additional properties, in the format 'key':'value' where key = the field name, and value = the field value. By default this is not populated"
      }
    },
    "ComponentPolicyEvaluationDetails": {
      "type": "object",
      "description": "Policy evaluation details.",
      "properties": {
        "evaluatedExpressions": {
          "description": "Details of the evaluated expressions.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ComponentExpressionEvaluationDetails"
          },
          "x-ms-identifiers": []
        },
        "reason": {
          "description": "Additional textual reason for the evaluation outcome.",
          "type": "string"
        }
      }
    },
    "ComponentExpressionEvaluationDetails": {
      "type": "object",
      "description": "Evaluation details of policy language expressions.",
      "properties": {
        "result": {
          "description": "Evaluation result.",
          "type": "string"
        },
        "expression": {
          "description": "Expression evaluated.",
          "type": "string",
          "readOnly": true
        },
        "expressionKind": {
          "description": "The kind of expression that was evaluated.",
          "type": "string",
          "readOnly": true
        },
        "path": {
          "description": "Property path if the expression is a field or an alias.",
          "type": "string",
          "readOnly": true
        },
        "expressionValue": {
          "description": "Value of the expression.",
          "type": "object",
          "readOnly": true
        },
        "targetValue": {
          "description": "Target value to be compared with the expression value.",
          "type": "object",
          "readOnly": true
        },
        "operator": {
          "description": "Operator to compare the expression value and the target value.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "OperationsListResults": {
      "description": "List of available operations.",
      "type": "object",
      "properties": {
        "@odata.count": {
          "description": "OData entity count; represents the number of operations returned.",
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "value": {
          "description": "List of available operations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Operation"
          },
          "x-ms-identifiers": [
            "name"
          ]
        }
      }
    },
    "Operation": {
      "title": "REST API Operation",
      "description": "Details of a REST API operation, returned from the Resource Provider Operations API",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the operation, as per Resource-Based Access Control (RBAC). Examples: \"Microsoft.Compute/virtualMachines/write\", \"Microsoft.Compute/virtualMachines/capture/action\"",
          "type": "string",
          "readOnly": true
        },
        "isDataAction": {
          "description": "Whether the operation applies to data-plane. This is \"true\" for data-plane operations and \"false\" for ARM/control-plane operations.",
          "type": "boolean",
          "readOnly": true
        },
        "display": {
          "description": "Localized display information for this particular operation.",
          "type": "object",
          "properties": {
            "provider": {
              "description": "The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring Insights\" or \"Microsoft Compute\".",
              "type": "string",
              "readOnly": true
            },
            "resource": {
              "description": "The localized friendly name of the resource type related to this operation. E.g. \"Virtual Machines\" or \"Job Schedule Collections\".",
              "type": "string",
              "readOnly": true
            },
            "operation": {
              "description": "The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create or Update Virtual Machine\", \"Restart Virtual Machine\".",
              "type": "string",
              "readOnly": true
            },
            "description": {
              "description": "The short, localized friendly description of the operation; suitable for tool tips and detailed views.",
              "type": "string",
              "readOnly": true
            }
          }
        },
        "origin": {
          "description": "The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is \"user,system\"",
          "type": "string",
          "readOnly": true,
          "enum": [
            "user",
            "system",
            "user,system"
          ],
          "x-ms-enum": {
            "name": "Origin",
            "modelAsString": true
          }
        },
        "actionType": {
          "description": "Enum. Indicates the action type. \"Internal\" refers to actions that are for internal only APIs.",
          "type": "string",
          "readOnly": true,
          "enum": [
            "Internal"
          ],
          "x-ms-enum": {
            "name": "ActionType",
            "modelAsString": true
          }
        }
      }
    },
    "CheckRestrictionsRequest": {
      "description": "The check policy restrictions parameters describing the resource that is being evaluated.",
      "properties": {
        "resourceDetails": {
          "description": "The information about the resource that will be evaluated.",
          "$ref": "#/definitions/CheckRestrictionsResourceDetails"
        },
        "pendingFields": {
          "description": "The list of fields and values that should be evaluated for potential restrictions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PendingField"
          }
        },
        "includeAuditEffect": {
          "description": "Whether to include policies with the 'audit' effect in the results. Defaults to false.",
          "type": "boolean",
          "default": false
        }
      },
      "required": [
        "resourceDetails"
      ]
    },
    "CheckManagementGroupRestrictionsRequest": {
      "type": "object",
      "description": "The check policy restrictions parameters describing the resource that is being evaluated.",
      "properties": {
        "resourceDetails": {
          "description": "The information about the resource that will be evaluated.",
          "$ref": "#/definitions/CheckRestrictionsResourceDetails"
        },
        "pendingFields": {
          "description": "The list of fields and values that should be evaluated for potential restrictions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PendingField"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "CheckRestrictionsResourceDetails": {
      "description": "The information about the resource that will be evaluated.",
      "properties": {
        "resourceContent": {
          "description": "The resource content. This should include whatever properties are already known and can be a partial set of all resource properties.",
          "type": "object"
        },
        "apiVersion": {
          "description": "The api-version of the resource content.",
          "type": "string"
        },
        "scope": {
          "description": "The scope where the resource is being created. For example, if the resource is a child resource this would be the parent resource's resource ID.",
          "type": "string"
        }
      },
      "required": [
        "resourceContent"
      ]
    },
    "PendingField": {
      "description": "A field that should be evaluated against Azure Policy to determine restrictions.",
      "properties": {
        "field": {
          "description": "The name of the field. This can be a top-level property like 'name' or 'type' or an Azure Policy field alias.",
          "type": "string"
        },
        "values": {
          "description": "The list of potential values for the field that should be evaluated against Azure Policy.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "field"
      ]
    },
    "CheckRestrictionsResult": {
      "description": "The result of a check policy restrictions evaluation on a resource.",
      "properties": {
        "fieldRestrictions": {
          "description": "The restrictions that will be placed on various fields in the resource by policy.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldRestrictions"
          },
          "readOnly": true
        },
        "contentEvaluationResult": {
          "description": "Evaluation results for the provided partial resource content.",
          "properties": {
            "policyEvaluations": {
              "description": "Policy evaluation results against the given resource content. This will indicate if the partial content that was provided will be denied as-is.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/PolicyEvaluationResult"
              }
            }
          },
          "readOnly": true
        }
      }
    },
    "FieldRestrictions": {
      "description": "The restrictions that will be placed on a field in the resource by policy.",
      "properties": {
        "field": {
          "description": "The name of the field. This can be a top-level property like 'name' or 'type' or an Azure Policy field alias.",
          "type": "string",
          "readOnly": true
        },
        "restrictions": {
          "description": "The restrictions placed on that field by policy.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldRestriction"
          }
        }
      }
    },
    "FieldRestriction": {
      "description": "The restrictions on a field imposed by a specific policy.",
      "properties": {
        "result": {
          "description": "The type of restriction that is imposed on the field.",
          "type": "string",
          "enum": [
            "Required",
            "Removed",
            "Deny",
            "Audit"
          ],
          "x-ms-enum": {
            "name": "FieldRestrictionResult",
            "modelAsString": true,
            "values": [
              {
                "value": "Required",
                "description": "The field and/or values are required by policy."
              },
              {
                "value": "Removed",
                "description": "The field will be removed by policy."
              },
              {
                "value": "Deny",
                "description": "The field and/or values will be denied by policy."
              },
              {
                "value": "Audit",
                "description": "The field and/or values will be audited by policy."
              }
            ]
          },
          "readOnly": true
        },
        "defaultValue": {
          "description": "The value that policy will set for the field if the user does not provide a value.",
          "type": "string",
          "readOnly": true
        },
        "values": {
          "description": "The values that policy either requires or denies for the field.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "policy": {
          "description": "The details of the policy that is causing the field restriction.",
          "$ref": "#/definitions/PolicyReference",
          "readOnly": true
        },
        "policyEffect": {
          "description": "The effect of the policy that is causing the field restriction. http://aka.ms/policyeffects",
          "type": "string",
          "readOnly": true
        },
        "reason": {
          "description": "The reason for the restriction.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "PolicyEvaluationResult": {
      "description": "The result of a non-compliant policy evaluation against the given resource content.",
      "properties": {
        "policyInfo": {
          "description": "The details of the policy that was evaluated.",
          "$ref": "#/definitions/PolicyReference",
          "readOnly": true
        },
        "evaluationResult": {
          "description": "The result of the policy evaluation against the resource. This will typically be 'NonCompliant' but may contain other values if errors were encountered.",
          "type": "string",
          "readOnly": true
        },
        "evaluationDetails": {
          "description": "The detailed results of the policy expressions and values that were evaluated.",
          "$ref": "#/definitions/CheckRestrictionEvaluationDetails",
          "readOnly": true
        },
        "effectDetails": {
          "description": "The details of the effect that was applied to the resource.",
          "$ref": "#/definitions/PolicyEffectDetails",
          "readOnly": true
        }
      }
    },
    "PolicyReference": {
      "description": "Resource identifiers for a policy.",
      "properties": {
        "policyDefinitionId": {
          "description": "The resource identifier of the policy definition.",
          "type": "string",
          "readOnly": true
        },
        "policySetDefinitionId": {
          "description": "The resource identifier of the policy set definition.",
          "type": "string",
          "readOnly": true
        },
        "policyDefinitionReferenceId": {
          "description": "The reference identifier of a specific policy definition within a policy set definition.",
          "type": "string",
          "readOnly": true
        },
        "policyAssignmentId": {
          "description": "The resource identifier of the policy assignment.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "PolicyEffectDetails": {
      "type": "object",
      "description": "The details of the effect that was applied to the resource.",
      "properties": {
        "policyEffect": {
          "description": "The effect that was applied to the resource. http://aka.ms/policyeffects",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "CheckRestrictionEvaluationDetails": {
      "type": "object",
      "description": "Policy evaluation details.",
      "properties": {
        "evaluatedExpressions": {
          "description": "Details of the evaluated expressions.",
          "type": "array",
          "items": {
            "$ref": "../../stable/2024-10-01/policyStates.json#/definitions/ExpressionEvaluationDetails"
          },
          "x-ms-identifiers": []
        },
        "ifNotExistsDetails": {
          "description": "Evaluation details of IfNotExists effect.",
          "type": "object",
          "$ref": "../../stable/2024-10-01/policyStates.json#/definitions/IfNotExistsEvaluationDetails"
        },
        "reason": {
          "description": "The reason for the evaluation result.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "RemediationListResult": {
      "description": "List of remediations.",
      "properties": {
        "value": {
          "description": "Array of remediation definitions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Remediation"
          },
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to get the next set of results.",
          "readOnly": true
        }
      }
    },
    "RemediationDeploymentsListResult": {
      "description": "List of deployments for a remediation.",
      "properties": {
        "value": {
          "description": "Array of deployments for the remediation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RemediationDeployment"
          },
          "x-ms-identifiers": [
            "remediatedResourceId"
          ],
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to get the next set of results.",
          "readOnly": true
        }
      }
    },
    "RemediationDeployment": {
      "description": "Details of a single deployment created by the remediation.",
      "properties": {
        "remediatedResourceId": {
          "type": "string",
          "description": "Resource ID of the resource that is being remediated by the deployment.",
          "readOnly": true
        },
        "deploymentId": {
          "type": "string",
          "description": "Resource ID of the template deployment that will remediate the resource.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "Status of the remediation deployment.",
          "readOnly": true
        },
        "resourceLocation": {
          "type": "string",
          "description": "Location of the resource that is being remediated.",
          "readOnly": true
        },
        "error": {
          "$ref": "#/definitions/ErrorDefinition",
          "description": "Error encountered while remediated the resource.",
          "readOnly": true
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "description": "The time at which the remediation was created.",
          "readOnly": true
        },
        "lastUpdatedOn": {
          "type": "string",
          "format": "date-time",
          "description": "The time at which the remediation deployment was last updated.",
          "readOnly": true
        }
      }
    },
    "Remediation": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/RemediationProperties",
          "description": "Properties for the remediation."
        },
        "id": {
          "type": "string",
          "description": "The ID of the remediation.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the remediation.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the remediation.",
          "readOnly": true
        },
        "systemData": {
          "readOnly": true,
          "type": "object",
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "$ref": "../../../../../common-types/resource-management/v1/types.json#/definitions/systemData"
        }
      },
      "description": "The remediation definition.",
      "x-ms-azure-resource": true
    },
    "RemediationProperties": {
      "properties": {
        "policyAssignmentId": {
          "type": "string",
          "description": "The resource ID of the policy assignment that should be remediated."
        },
        "policyDefinitionReferenceId": {
          "type": "string",
          "description": "The policy definition reference ID of the individual definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition."
        },
        "resourceDiscoveryMode": {
          "type": "string",
          "enum": [
            "ExistingNonCompliant",
            "ReEvaluateCompliance"
          ],
          "x-ms-enum": {
            "name": "ResourceDiscoveryMode",
            "modelAsString": true,
            "values": [
              {
                "value": "ExistingNonCompliant",
                "description": "Remediate resources that are already known to be non-compliant."
              },
              {
                "value": "ReEvaluateCompliance",
                "description": "Re-evaluate the compliance state of resources and then remediate the resources found to be non-compliant. The resourceIds filter cannot be used in this mode."
              }
            ]
          },
          "description": "The way resources to remediate are discovered. Defaults to ExistingNonCompliant if not specified."
        },
        "provisioningState": {
          "type": "string",
          "description": "The status of the remediation. This refers to the entire remediation task, not individual deployments. Allowed values are Evaluating, Canceled, Cancelling, Failed, Complete, or Succeeded.",
          "readOnly": true
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "description": "The time at which the remediation was created.",
          "readOnly": true
        },
        "lastUpdatedOn": {
          "type": "string",
          "format": "date-time",
          "description": "The time at which the remediation was last updated.",
          "readOnly": true
        },
        "filters": {
          "$ref": "#/definitions/RemediationFilters",
          "description": "The filters that will be applied to determine which resources to remediate."
        },
        "deploymentStatus": {
          "$ref": "#/definitions/RemediationDeploymentSummary",
          "description": "The deployment status summary for all deployments created by the remediation.",
          "readOnly": true
        },
        "statusMessage": {
          "type": "string",
          "description": "The remediation status message. Provides additional details regarding the state of the remediation.",
          "readOnly": true
        },
        "correlationId": {
          "type": "string",
          "description": "The remediation correlation Id. Can be used to find events related to the remediation in the activity log.",
          "readOnly": true
        },
        "resourceCount": {
          "type": "integer",
          "format": "int32",
          "description": "Determines the max number of resources that can be remediated by the remediation job. If not provided, the default resource count is used."
        },
        "parallelDeployments": {
          "type": "integer",
          "format": "int32",
          "description": "Determines how many resources to remediate at any given time. Can be used to increase or reduce the pace of the remediation. If not provided, the default parallel deployments value is used."
        },
        "failureThreshold": {
          "type": "object",
          "properties": {
            "percentage": {
              "type": "number",
              "format": "float",
              "description": "A number between 0.0 to 1.0 representing the percentage failure threshold. The remediation will fail if the percentage of failed remediation operations (i.e. failed deployments) exceeds this threshold."
            }
          },
          "description": "The remediation failure threshold settings"
        }
      },
      "description": "The remediation properties."
    },
    "RemediationFilters": {
      "properties": {
        "locations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The resource locations that will be remediated."
        },
        "resourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The IDs of the resources that will be remediated. Can specify at most 100 IDs. This filter cannot be used when ReEvaluateCompliance is set to ReEvaluateCompliance, and cannot be empty if provided."
        }
      },
      "description": "The filters that will be applied to determine which resources to remediate."
    },
    "RemediationDeploymentSummary": {
      "properties": {
        "totalDeployments": {
          "type": "integer",
          "description": "The number of deployments required by the remediation.",
          "readOnly": true
        },
        "successfulDeployments": {
          "type": "integer",
          "description": "The number of deployments required by the remediation that have succeeded.",
          "readOnly": true
        },
        "failedDeployments": {
          "type": "integer",
          "description": "The number of deployments required by the remediation that have failed.",
          "readOnly": true
        }
      },
      "description": "The deployment status summary for all deployments created by the remediation."
    },
    "ErrorResponse": {
      "title": "Error Response",
      "description": "Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.)",
      "type": "object",
      "properties": {
        "code": {
          "readOnly": true,
          "type": "string",
          "description": "The error code."
        },
        "message": {
          "readOnly": true,
          "type": "string",
          "description": "The error message."
        },
        "target": {
          "readOnly": true,
          "type": "string",
          "description": "The error target."
        },
        "details": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorResponse"
          },
          "x-ms-identifiers": [
            "message",
            "target"
          ],
          "description": "The error details."
        },
        "additionalInfo": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorAdditionalInfo"
          },
          "x-ms-identifiers": [],
          "description": "The error additional info."
        }
      }
    },
    "ErrorDefinition": {
      "description": "Error definition.",
      "properties": {
        "code": {
          "description": "Service specific error code which serves as the substatus for the HTTP error code.",
          "type": "string",
          "readOnly": true
        },
        "message": {
          "description": "Description of the error.",
          "type": "string",
          "readOnly": true
        },
        "target": {
          "description": "The target of the error.",
          "type": "string",
          "readOnly": true
        },
        "details": {
          "description": "Internal error details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorDefinition"
          },
          "x-ms-identifiers": [],
          "readOnly": true
        },
        "additionalInfo": {
          "description": "Additional scenario specific error details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TypedErrorInfo"
          },
          "x-ms-identifiers": [],
          "readOnly": true
        }
      }
    },
    "TypedErrorInfo": {
      "description": "Scenario specific error details.",
      "properties": {
        "type": {
          "description": "The type of included error details.",
          "type": "string",
          "readOnly": true
        },
        "info": {
          "description": "The scenario specific error details.",
          "readOnly": true
        }
      }
    },
    "PolicyEventsQueryResults": {
      "description": "Query results.",
      "properties": {
        "@odata.context": {
          "description": "OData context string; used by OData clients to resolve type information based on metadata.",
          "type": "string"
        },
        "@odata.count": {
          "description": "OData entity count; represents the number of policy event records returned.",
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "@odata.nextLink": {
          "description": "Odata next link; URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "Query results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyEvent"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "PolicyEvent": {
      "type": "object",
      "description": "Policy event record.",
      "properties": {
        "@odata.id": {
          "description": "OData entity ID; always set to null since policy event records do not have an entity ID.",
          "type": "string"
        },
        "@odata.context": {
          "description": "OData context string; used by OData clients to resolve type information based on metadata.",
          "type": "string"
        },
        "timestamp": {
          "description": "Timestamp for the policy event record.",
          "type": "string",
          "format": "date-time"
        },
        "resourceId": {
          "description": "Resource ID.",
          "type": "string"
        },
        "policyAssignmentId": {
          "description": "Policy assignment ID.",
          "type": "string"
        },
        "policyDefinitionId": {
          "description": "Policy definition ID.",
          "type": "string"
        },
        "effectiveParameters": {
          "description": "Effective parameters for the policy assignment.",
          "type": "string"
        },
        "isCompliant": {
          "description": "Flag which states whether the resource is compliant against the policy assignment it was evaluated against.",
          "type": "boolean"
        },
        "subscriptionId": {
          "description": "Subscription ID.",
          "type": "string"
        },
        "resourceType": {
          "description": "Resource type.",
          "type": "string"
        },
        "resourceLocation": {
          "description": "Resource location.",
          "type": "string"
        },
        "resourceGroup": {
          "description": "Resource group name.",
          "type": "string"
        },
        "resourceTags": {
          "description": "List of resource tags.",
          "type": "string"
        },
        "policyAssignmentName": {
          "description": "Policy assignment name.",
          "type": "string"
        },
        "policyAssignmentOwner": {
          "description": "Policy assignment owner.",
          "type": "string"
        },
        "policyAssignmentParameters": {
          "description": "Policy assignment parameters.",
          "type": "string"
        },
        "policyAssignmentScope": {
          "description": "Policy assignment scope.",
          "type": "string"
        },
        "policyDefinitionName": {
          "description": "Policy definition name.",
          "type": "string"
        },
        "policyDefinitionAction": {
          "description": "Policy definition action, i.e. effect.",
          "type": "string"
        },
        "policyDefinitionCategory": {
          "description": "Policy definition category.",
          "type": "string"
        },
        "policySetDefinitionId": {
          "description": "Policy set definition ID, if the policy assignment is for a policy set.",
          "type": "string"
        },
        "policySetDefinitionName": {
          "description": "Policy set definition name, if the policy assignment is for a policy set.",
          "type": "string"
        },
        "policySetDefinitionOwner": {
          "description": "Policy set definition owner, if the policy assignment is for a policy set.",
          "type": "string"
        },
        "policySetDefinitionCategory": {
          "description": "Policy set definition category, if the policy assignment is for a policy set.",
          "type": "string"
        },
        "policySetDefinitionParameters": {
          "description": "Policy set definition parameters, if the policy assignment is for a policy set.",
          "type": "string"
        },
        "managementGroupIds": {
          "description": "Comma separated list of management group IDs, which represent the hierarchy of the management groups the resource is under.",
          "type": "string"
        },
        "policyDefinitionReferenceId": {
          "description": "Reference ID for the policy definition inside the policy set, if the policy assignment is for a policy set.",
          "type": "string"
        },
        "complianceState": {
          "description": "Compliance state of the resource.",
          "type": "string"
        },
        "tenantId": {
          "description": "Tenant ID for the policy event record.",
          "type": "string"
        },
        "principalOid": {
          "description": "Principal object ID for the user who initiated the resource operation that triggered the policy event.",
          "type": "string"
        },
        "components": {
          "description": "Components events records populated only when URL contains $expand=components clause.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentEventDetails"
          }
        }
      },
      "additionalProperties": {
        "description": "The list of key/value pairs for the additional properties, in the format 'key':'value' where key = the field name, and value = the field value. By default this is not populated"
      }
    },
    "ComponentEventDetails": {
      "type": "object",
      "description": "Component event details.",
      "properties": {
        "id": {
          "description": "Component Id.",
          "type": "string"
        },
        "type": {
          "description": "Component type.",
          "type": "string"
        },
        "name": {
          "description": "Component name.",
          "type": "string"
        },
        "timestamp": {
          "description": "Timestamp for component policy event record.",
          "type": "string",
          "format": "date-time"
        },
        "tenantId": {
          "description": "Tenant ID for the policy event record.",
          "type": "string"
        },
        "principalOid": {
          "description": "Principal object ID for the user who initiated the resource component operation that triggered the policy event.",
          "type": "string"
        },
        "policyDefinitionAction": {
          "description": "Policy definition action, i.e. effect.",
          "type": "string"
        }
      },
      "additionalProperties": {
        "description": "The list of key/value pairs for the additional properties, in the format 'key':'value' where key = the field name, and value = the field value. By default this is not populated"
      }
    },
    "AttestationListResult": {
      "description": "List of attestations.",
      "properties": {
        "value": {
          "description": "Array of attestation definitions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attestation"
          },
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to get the next set of results.",
          "readOnly": true
        }
      }
    },
    "Attestation": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/AttestationProperties",
          "description": "Properties for the attestation."
        },
        "systemData": {
          "readOnly": true,
          "type": "object",
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "$ref": "../../../../../common-types/resource-management/v1/types.json#/definitions/systemData"
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v1/types.json#/definitions/Resource"
        }
      ],
      "required": [
        "properties"
      ],
      "description": "An attestation resource."
    },
    "AttestationProperties": {
      "properties": {
        "policyAssignmentId": {
          "type": "string",
          "description": "The resource ID of the policy assignment that the attestation is setting the state for."
        },
        "policyDefinitionReferenceId": {
          "type": "string",
          "description": "The policy definition reference ID from a policy set definition that the attestation is setting the state for. If the policy assignment assigns a policy set definition the attestation can choose a definition within the set definition with this property or omit this and set the state for the entire set definition."
        },
        "complianceState": {
          "type": "string",
          "enum": [
            "Compliant",
            "NonCompliant",
            "Unknown"
          ],
          "x-ms-enum": {
            "name": "ComplianceState",
            "modelAsString": true,
            "values": [
              {
                "value": "Compliant",
                "description": "The resource is in compliance with the policy."
              },
              {
                "value": "NonCompliant",
                "description": "The resource is not in compliance with the policy."
              },
              {
                "value": "Unknown",
                "description": "The compliance state of the resource is not known."
              }
            ]
          },
          "description": "The compliance state that should be set on the resource."
        },
        "expiresOn": {
          "type": "string",
          "format": "date-time",
          "description": "The time the compliance state should expire."
        },
        "owner": {
          "type": "string",
          "description": "The person responsible for setting the state of the resource. This value is typically an Azure Active Directory object ID."
        },
        "comments": {
          "type": "string",
          "description": "Comments describing why this attestation was created."
        },
        "evidence": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttestationEvidence"
          },
          "x-ms-identifiers": [],
          "description": "The evidence supporting the compliance state set in this attestation."
        },
        "provisioningState": {
          "type": "string",
          "description": "The status of the attestation.",
          "readOnly": true
        },
        "lastComplianceStateChangeAt": {
          "type": "string",
          "format": "date-time",
          "description": "The time the compliance state was last changed in this attestation.",
          "readOnly": true
        },
        "assessmentDate": {
          "type": "string",
          "format": "date-time",
          "description": "The time the evidence was assessed"
        },
        "metadata": {
          "type": "object",
          "description": "Additional metadata for this attestation"
        }
      },
      "required": [
        "policyAssignmentId"
      ],
      "description": "The properties of an attestation resource."
    },
    "AttestationEvidence": {
      "properties": {
        "description": {
          "type": "string",
          "description": "The description for this piece of evidence."
        },
        "sourceUri": {
          "type": "string",
          "description": "The URI location of the evidence."
        }
      },
      "description": "A piece of evidence supporting the compliance state set in the attestation."
    },
    "PolicyMetadata": {
      "description": "Policy metadata resource definition.",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/PolicyMetadataProperties",
          "description": "Properties of the policy metadata."
        },
        "id": {
          "type": "string",
          "description": "The ID of the policy metadata.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the policy metadata.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the policy metadata.",
          "readOnly": true
        }
      }
    },
    "PolicyMetadataSlimProperties": {
      "description": "The properties of the policy metadata, excluding properties containing large strings",
      "properties": {
        "metadataId": {
          "description": "The policy metadata identifier.",
          "type": "string",
          "readOnly": true
        },
        "category": {
          "description": "The category of the policy metadata.",
          "type": "string",
          "readOnly": true
        },
        "title": {
          "description": "The title of the policy metadata.",
          "type": "string",
          "readOnly": true
        },
        "owner": {
          "description": "The owner of the policy metadata.",
          "type": "string",
          "readOnly": true
        },
        "additionalContentUrl": {
          "description": "Url for getting additional content about the resource metadata.",
          "type": "string",
          "readOnly": true
        },
        "metadata": {
          "description": "Additional metadata.",
          "type": "object",
          "readOnly": true
        }
      }
    },
    "PolicyMetadataProperties": {
      "description": "The properties of the policy metadata.",
      "properties": {
        "description": {
          "description": "The description of the policy metadata.",
          "type": "string",
          "readOnly": true
        },
        "requirements": {
          "description": "The requirements of the policy metadata.",
          "type": "string",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PolicyMetadataSlimProperties"
        }
      ]
    },
    "SlimPolicyMetadata": {
      "description": "Slim version of policy metadata resource definition, excluding properties with large strings",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/PolicyMetadataSlimProperties",
          "description": "Properties of the policy metadata."
        },
        "id": {
          "type": "string",
          "description": "The ID of the policy metadata.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the policy metadata.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the policy metadata.",
          "readOnly": true
        }
      }
    },
    "PolicyMetadataCollection": {
      "description": "Collection of policy metadata resources.",
      "properties": {
        "value": {
          "description": "Array of policy metadata definitions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlimPolicyMetadata"
          },
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to get the next set of results.",
          "readOnly": true
        }
      }
    },
    "Resource": {
      "title": "Resource",
      "description": "Common fields that are returned in the response for all Azure Resource Manager resources",
      "type": "object",
      "properties": {
        "id": {
          "readOnly": true,
          "type": "string",
          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "The name of the resource"
        },
        "type": {
          "readOnly": true,
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\""
        }
      },
      "x-ms-azure-resource": true
    },
    "AzureEntityResource": {
      "x-ms-client-name": "AzureEntityResource",
      "title": "Entity Resource",
      "description": "The resource model definition for an Azure Resource Manager resource with an etag.",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "readOnly": true,
          "description": "Resource Etag."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "TrackedResource": {
      "title": "Tracked Resource",
      "description": "The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'",
      "type": "object",
      "properties": {
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ],
          "description": "Resource tags."
        },
        "location": {
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "description": "The geo-location where the resource lives"
        }
      },
      "required": [
        "location"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "ProxyResource": {
      "title": "Proxy Resource",
      "description": "The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "ResourceModelWithAllowedPropertySet": {
      "description": "The resource model definition containing the full set of allowed properties for a resource. Except properties bag, there cannot be a top level property outside of this set.",
      "type": "object",
      "properties": {
        "id": {
          "readOnly": true,
          "type": "string",
          "x-ms-mutability": [
            "read"
          ],
          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "The name of the resource"
        },
        "type": {
          "readOnly": true,
          "type": "string",
          "x-ms-mutability": [
            "read"
          ],
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\""
        },
        "location": {
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "description": "The geo-location where the resource lives"
        },
        "managedBy": {
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ],
          "description": "The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is removed from the template since it is managed by another resource."
        },
        "kind": {
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "description": "Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.",
          "pattern": "^[-\\w\\._,\\(\\)]+$"
        },
        "etag": {
          "readOnly": true,
          "type": "string",
          "description": "The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. "
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ],
          "description": "Resource tags."
        },
        "identity": {
          "allOf": [
            {
              "$ref": "#/definitions/Identity"
            }
          ]
        },
        "sku": {
          "allOf": [
            {
              "$ref": "#/definitions/Sku"
            }
          ]
        },
        "plan": {
          "allOf": [
            {
              "$ref": "#/definitions/Plan"
            }
          ]
        }
      },
      "x-ms-azure-resource": true
    },
    "Sku": {
      "description": "The resource model definition representing SKU",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the SKU. Ex - P3. It is typically a letter+number code"
        },
        "tier": {
          "type": "string",
          "enum": [
            "Free",
            "Basic",
            "Standard",
            "Premium"
          ],
          "x-ms-enum": {
            "name": "SkuTier",
            "modelAsString": false
          },
          "description": "This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT."
        },
        "size": {
          "type": "string",
          "description": "The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. "
        },
        "family": {
          "type": "string",
          "description": "If the service has different generations of hardware, for the same SKU, then that can be captured here."
        },
        "capacity": {
          "type": "integer",
          "format": "int32",
          "description": "If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted."
        }
      },
      "required": [
        "name"
      ]
    },
    "Identity": {
      "description": "Identity for the resource.",
      "type": "object",
      "properties": {
        "principalId": {
          "readOnly": true,
          "type": "string",
          "description": "The principal ID of resource identity."
        },
        "tenantId": {
          "readOnly": true,
          "type": "string",
          "description": "The tenant ID of resource."
        },
        "type": {
          "type": "string",
          "description": "The identity type.",
          "enum": [
            "SystemAssigned"
          ],
          "x-ms-enum": {
            "name": "ResourceIdentityType",
            "modelAsString": false
          }
        }
      }
    },
    "Plan": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A user defined name of the 3rd Party Artifact that is being procured."
        },
        "publisher": {
          "type": "string",
          "description": "The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic"
        },
        "product": {
          "type": "string",
          "description": "The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. "
        },
        "promotionCode": {
          "type": "string",
          "description": "A publisher provided promotion code as provisioned in Data Market for the said product/artifact."
        },
        "version": {
          "type": "string",
          "description": "The version of the desired product/artifact."
        }
      },
      "description": "Plan for the resource.",
      "required": [
        "name",
        "publisher",
        "product"
      ]
    },
    "ErrorDetail": {
      "description": "The error detail.",
      "type": "object",
      "properties": {
        "code": {
          "readOnly": true,
          "type": "string",
          "description": "The error code."
        },
        "message": {
          "readOnly": true,
          "type": "string",
          "description": "The error message."
        },
        "target": {
          "readOnly": true,
          "type": "string",
          "description": "The error target."
        },
        "details": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorDetail"
          },
          "x-ms-identifiers": [
            "message",
            "target"
          ],
          "description": "The error details."
        },
        "additionalInfo": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorAdditionalInfo"
          },
          "x-ms-identifiers": [],
          "description": "The error additional info."
        }
      }
    },
    "ErrorAdditionalInfo": {
      "type": "object",
      "properties": {
        "type": {
          "readOnly": true,
          "type": "string",
          "description": "The additional info type."
        },
        "info": {
          "readOnly": true,
          "type": "object",
          "description": "The additional info."
        }
      },
      "description": "The resource management error additional info."
    },
    "OperationListResult": {
      "description": "A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results.",
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Operation"
          },
          "x-ms-identifiers": [
            "name"
          ],
          "description": "List of operations supported by the resource provider",
          "readOnly": true
        },
        "nextLink": {
          "type": "string",
          "description": "URL to get the next set of operation list results (if there are any).",
          "readOnly": true
        }
      }
    },
    "OperationStatusResult": {
      "description": "The current status of an async operation.",
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "id": {
          "description": "Fully qualified ID for the async operation.",
          "type": "string"
        },
        "name": {
          "description": "Name of the async operation.",
          "type": "string"
        },
        "status": {
          "description": "Operation status.",
          "type": "string"
        },
        "percentComplete": {
          "description": "Percent of the operation that is complete.",
          "type": "number",
          "minimum": 0,
          "maximum": 100
        },
        "startTime": {
          "description": "The start time of the operation.",
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "description": "The end time of the operation.",
          "type": "string",
          "format": "date-time"
        },
        "operations": {
          "description": "The operations list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationStatusResult"
          }
        },
        "error": {
          "description": "If present, details of the operation error.",
          "$ref": "#/definitions/ErrorDetail"
        }
      }
    },
    "locationData": {
      "description": "Metadata pertaining to the geographic location of the resource.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 256,
          "description": "A canonical name for the geographic or physical location."
        },
        "city": {
          "type": "string",
          "description": "The city or locality where the resource is located."
        },
        "district": {
          "type": "string",
          "description": "The district, state, or province where the resource is located."
        },
        "countryOrRegion": {
          "type": "string",
          "description": "The country or region where the resource is located"
        }
      },
      "required": [
        "name"
      ]
    },
    "systemData": {
      "description": "Metadata pertaining to creation and last modification of the resource.",
      "type": "object",
      "readOnly": true,
      "properties": {
        "createdBy": {
          "type": "string",
          "description": "The identity that created the resource."
        },
        "createdByType": {
          "type": "string",
          "description": "The type of identity that created the resource.",
          "enum": [
            "User",
            "Application",
            "ManagedIdentity",
            "Key"
          ],
          "x-ms-enum": {
            "name": "createdByType",
            "modelAsString": true
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of resource creation (UTC)."
        },
        "lastModifiedBy": {
          "type": "string",
          "description": "The identity that last modified the resource."
        },
        "lastModifiedByType": {
          "type": "string",
          "description": "The type of identity that last modified the resource.",
          "enum": [
            "User",
            "Application",
            "ManagedIdentity",
            "Key"
          ],
          "x-ms-enum": {
            "name": "createdByType",
            "modelAsString": true
          }
        },
        "lastModifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of resource last modification (UTC)"
        }
      }
    },
    "encryptionProperties": {
      "description": "Configuration of key for data encryption",
      "type": "object",
      "properties": {
        "status": {
          "description": "Indicates whether or not the encryption is enabled for container registry.",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "EncryptionStatus",
            "modelAsString": true
          }
        },
        "keyVaultProperties": {
          "$ref": "#/definitions/KeyVaultProperties",
          "description": "Key vault properties."
        }
      }
    },
    "KeyVaultProperties": {
      "type": "object",
      "properties": {
        "keyIdentifier": {
          "description": "Key vault uri to access the encryption key.",
          "type": "string"
        },
        "identity": {
          "description": "The client ID of the identity which will be used to access key vault.",
          "type": "string"
        }
      }
    },
    "CheckNameAvailabilityRequest": {
      "description": "The check availability request body.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the resource for which availability needs to be checked.",
          "type": "string"
        },
        "type": {
          "description": "The resource type.",
          "type": "string"
        }
      }
    },
    "CheckNameAvailabilityResponse": {
      "description": "The check availability result.",
      "type": "object",
      "properties": {
        "nameAvailable": {
          "description": "Indicates if the resource name is available.",
          "type": "boolean"
        },
        "reason": {
          "description": "The reason why the given name is not available.",
          "type": "string",
          "enum": [
            "Invalid",
            "AlreadyExists"
          ],
          "x-ms-enum": {
            "name": "CheckNameAvailabilityReason",
            "modelAsString": true
          }
        },
        "message": {
          "description": "Detailed reason why the given name is available.",
          "type": "string"
        }
      }
    }
  }
}